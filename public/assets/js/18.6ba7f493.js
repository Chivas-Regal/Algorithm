(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{593:function(s,a,t){"use strict";t.r(a);var r=t(5),n=Object(r.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念：")]),s._v(" "),t("p",[s._v("并查集是指在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，"),t("br"),s._v("\n其间要反复查找一个元素在哪个集合中。"),t("br"),s._v("\n这一类问题近几年来反复出现在信息学的国际国内赛题中。"),t("br"),s._v("\n其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；"),t("br"),s._v("\n即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。")]),s._v(" "),t("p",[s._v("并查集是一种树型的数据结构，"),t("br"),s._v("\n用于处理一些不相交集合（disjoint sets）的合并及查询问题。"),t("br"),s._v("\n常常在使用中以森林来表示。----《百度百科》")]),s._v(" "),t("h1",{attrs:{id:"过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[s._v("#")]),s._v(" 过程：")]),s._v(" "),t("p",[s._v("小故事：")]),s._v(" "),t("div",{staticClass:"language-mermaid line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" TB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n字符"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("大写字母 & 小写字母 & 其他字符\n大写字母"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" C "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" D "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" E\n小写字母"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" e\n其他字符"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("回车 & 空格 & 逗号 & 句号 \n数字"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("一位数 & 二位数 & 三位数\n一位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 5 \n二位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("10 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 20 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 30 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 40 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 50\n三位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("100 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 200 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 300 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 400 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 500 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("此时我们想要访问200的祖先（数字）"),t("br"),s._v("\n但200不能直接知道祖先是谁，它要先问他的爸爸（三位数）"),t("br"),s._v("\n但三位数也不知道祖先是谁，于是三位数去问他的爸爸（数字）"),t("br"),s._v("\n数字一想，我没有爸爸了，所以数字就是祖先。")]),s._v(" "),t("p",[s._v("在访问中，我们可以看出，数字、一位数、二位数、三位数、1、2、3、4、5、10、20.....的祖先都是数字"),t("br"),s._v("\n所以它们是一个集。"),t("br"),s._v("\n同理，字符家族谱中的所有单位也是一个集合。\n那么问题来了，两家因为觉得关系太好了想要合并，它们该怎么做呢？"),t("br"),s._v("\n不妨让数字认另一个字符为爸爸(我们要尽可能利用已知资源来进行合并，否则操作较麻烦，只转认两方祖先可以有效减小树的深度)"),t("br"),s._v("\n于是成了以下家族谱")]),s._v(" "),t("div",{staticClass:"language-mermaid line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" TB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n字符"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("数字\n字符"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("大写字母 & 小写字母 & 其他字符\n大写字母"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("A "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" C "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" D "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" E\n小写字母"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" e\n其他字符"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("回车 & 空格 & 逗号 & 句号 \n数字"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("一位数 & 二位数 & 三位数\n一位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 5 \n二位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("10 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 20 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 30 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 40 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 50\n三位数"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("100 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 200 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 300 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 400 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" 500 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这就是并查集的过程内容，那么为了普遍性我们该怎么说呢")]),s._v(" "),t("h1",{attrs:{id:"操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作"}},[s._v("#")]),s._v(" 操作")]),s._v(" "),t("p",[s._v("我们通常寻找一个人的最高领导者，但每一层都是单独管理，等于说这一层的人不知道上上层的人是谁，所以他要向直系上层询问，再由直系上层向上层询问"),t("br"),s._v("\n依次循环，知道找出没有上层的人为止，那个人就会是最高领导者"),t("br"),s._v("\n在归类中我们也可以利用已知函数进行模拟数组为find(x)，而合并中我们也可以只将两个集的最高领导人合并（这里使用认父方式)"),t("br"),s._v("\n我们在操作时会经常用到两个函数")]),s._v(" "),t("h2",{attrs:{id:"_1-find函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-find函数"}},[s._v("#")]),s._v(" 1.find函数")]),s._v(" "),t("p",[s._v("递归写法：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查找x的最高领导人")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("非递归写法")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查找x的最高领导人")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v("nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"_2-merge函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-merge函数"}},[s._v("#")]),s._v(" 2.merge函数")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("merge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//将a与b合为同集合")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" nod"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);