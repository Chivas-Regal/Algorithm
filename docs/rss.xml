<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https:/cloaks.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Cloaks</title>
    <link>https:/cloaks.cn/</link>
    <description>热爱技术，乐于分享！</description>
    <language>zh-CN</language>
    <pubDate>Fri, 21 Jan 2022 07:24:32 GMT</pubDate>
    <lastBuildDate>Fri, 21 Jan 2022 07:24:32 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by Cloaks</copyright>
    <category>英语</category>
    <category>心得</category>
    <category>微服务</category>
    <category>力扣</category>
    <category>面试</category>
    <category>参考</category>
    <category>使用指南</category>
    <item>
      <title>六级</title>
      <link>https:/cloaks.cn/blogs/cet6/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/cet6/</guid>
      <source url="https:/cloaks.cn/rss.xml">六级</source>
      <description>&amp;lt;p&amp;gt;英语六级学习计划。&amp;lt;/p&amp;gt;
</description>
      <category>英语</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>英语六级学习计划。</p>

<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201091942261.jpg" alt="" /></p>
<h2 id="真题词汇、词组、长难句"> 真题词汇、词组、长难句</h2>
<h3 id="长难句"> 长难句</h3>
<ol>
<li>
<p>However, <u>a further increase in farming area</u> <em>without impacting unfavourably</em> <u>on</u> <em>what remains of the world's natural ecosystems</em> <u><strong>appears</strong> unlikely.</u></p>
<p>然而，在不对现有的全球自然生态系统产生不利影响的条件下，进一步扩大耕地面积似乎不太可能。</p>
<blockquote>
<p>further 进一步<br>
world's natural ecosystems 全球自然生态系统</p>
</blockquote>
</li>
<li>
<p><u>The MSc curriculum should prepare students for their professional career</u> <em>by allowing them to focus on acquiring practical skills through projects.</em></p>
<p>理科硕士课程应该让学生专注于通过项目获得实际技能，从而为他们的职业生涯做好准备。</p>
<blockquote>
<p>curriculum 课程<br>
acquiring 获得</p>
</blockquote>
</li>
</ol>
<h2 id="翻译"> 翻译</h2>
<h2 id="写作"> 写作</h2>
]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201091942261.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>如何快速提高 Coding Quality</title>
      <link>https:/cloaks.cn/blogs/codingQuality/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/codingQuality/</guid>
      <source url="https:/cloaks.cn/rss.xml">如何快速提高 Coding Quality</source>
      <category>心得</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>程序员的代码就是自己的脸面，比自己张什么样更重要！</p>
</blockquote>
<h2 id="coding-style"> Coding Style</h2>
<ol>
<li>
<p>二元运算符两边加空格，单元运算符不加空格</p>
</li>
<li>
<p>花括号和 <code>for, if</code> 之间要加空格（Java），圆括号和 <code>if</code> 之间要加空格</p>
</li>
<li>
<p>用空行分隔开不同的逻辑块</p>
</li>
<li>
<p>逗号后面加空格</p>
</li>
</ol>
<h2 id="readability"> Readability</h2>
<ol>
<li>
<p>函数名和变量名用1-2个单词作为名称</p>
</li>
<li>
<p>确保一个函数内部不超过3层缩进（indention）</p>
</li>
<li>
<p>多用子函数来减少入口函数的代码量</p>
</li>
<li>
<p>多用 <code>continue</code> 少用 <code>if</code></p>
<div><pre><code> <span># 范例一：</span>
 <span>if</span> a<span>:</span>
     <span>.</span><span>.</span><span>.</span>
     <span>if</span> b<span>:</span>
        <span>.</span><span>.</span><span>.</span>

 <span># 优化后减少嵌套</span>
 <span>if</span> !a<span>:</span>
     <span>continue</span>
 <span>.</span><span>.</span><span>.</span>
 <span>if</span> !b<span>:</span>
     <span>continue</span>

 <span># 范例二：</span>
 <span>if</span> a<span>:</span>
     <span>.</span><span>.</span><span>.</span> <span># 假设此处有1000行逻辑</span>
 <span># 优化后</span>
 <span>if</span> !a<span>:</span>
     <span>continue</span>
 <span>.</span><span>.</span><span>.</span> <span># 这样优化有可提高运行效率</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
</ol>
<h2 id="bug-free"> Bug Free</h2>
<ol>
<li>
<p>不管有没有可能出问题，都要对入口函数的参数进行异常检测</p>
</li>
<li>
<p>访问一个下表的时候，一定要确保这个下标不会越界</p>
</li>
<li>
<p>访问一个对象的属性或者方法时，一定要确保这个对象不是空</p>
</li>
<li>
<p>不用全局变量</p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>介绍</title>
      <link>https:/cloaks.cn/blogs/dataStrcture/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/dataStrcture/</guid>
      <source url="https:/cloaks.cn/rss.xml">介绍</source>
      <content:encoded><![CDATA[<h1 id="介绍"> 介绍</h1>
<h2 id="数组和链表的对比"> 数组和链表的对比</h2>
<table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td>支持快速查询</td>
<td>数组最好用于索引有语意的情况</td>
</tr>
<tr>
<td>链表</td>
<td>动态</td>
<td>链表不适合用于索引有语意的情况</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>英语</title>
      <link>https:/cloaks.cn/blogs/english/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/english/</guid>
      <source url="https:/cloaks.cn/rss.xml">英语</source>
      <category>英语</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="美文摘抄"> 美文摘抄</h2>
<ol>
<li>
<p>Attitude, not aptitude, determines altitude.</p>
<p>决定高度的是态度，而不是能力。</p>
</li>
<li>
<p>Strong reasons make strong actions.</p>
<p>强有力的理由产生强有力的行动。</p>
</li>
<li>
<p>Until that shift takes place, the global recovery will be fragile and probably quit feeble.</p>
<p>在这样的变化发生之前，全球的经济复苏都将是脆弱的和无力的。</p>
</li>
</ol>
<h2 id="写作模板"> 写作模板</h2>
<ol>
<li>
<p>Examples abound. // For instance, 例一 // Similarly, 例二 // Likewise, 例三... // In nutshell</p>
<p>例子有很多，首先，同样的，类似还有，总之</p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Docker</title>
      <link>https:/cloaks.cn/blogs/docker/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/docker/</guid>
      <source url="https:/cloaks.cn/rss.xml">Docker</source>
      <description>&amp;lt;p&amp;gt;Docker 容器化部署&amp;lt;/p&amp;gt;
</description>
      <category>微服务</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Docker 容器化部署</p>

<h2 id="脚本"> 脚本</h2>
<div><pre><code><span># Mysql</span>
<span>docker</span> run --name mysql -v /opt/data/mysql:/var/lib/mysql -p <span>3306</span>:3306 -e <span>MYSQL_ROOT_PASSWORD</span><span>=</span>Ycu061036 -d mysql:5.7.37
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span># redis</span>
<span>docker</span> run --name redis -p <span>6379</span>:6379 -d redis
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span># rabbitmq</span>
<span>docker</span> run -d --hostname my-rabbit --name rabbit -p <span>15672</span>:15672 -p <span>5672</span>:5672 rabbitmq:3.6.10-management
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>docker</span> run --name zookeeper -v /opt/data/zksingle:/data -p <span>2181</span>:2181 -e <span>ZOO_LOG4J_PRPO</span><span>=</span><span>"INFO,ROLLINGFILE"</span> -d zookeeper:3.4.13
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>链表</title>
      <link>https:/cloaks.cn/blogs/dataStrcture/%E9%93%BE%E8%A1%A8/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/dataStrcture/%E9%93%BE%E8%A1%A8/</guid>
      <source url="https:/cloaks.cn/rss.xml">链表</source>
      <content:encoded><![CDATA[<h1 id="链表"> 链表</h1>
<p>优点：真正的动态，不需要处理固定容量的问题</p>
<p>缺点：丧失了随机访问的能力</p>
<h2 id="数据结构"> 数据结构</h2>
<div><pre><code><span>private</span> <span>class</span> <span>Node</span> <span>{</span>
    <span>public</span> <span>E</span> e<span>;</span>
    <span>public</span> <span>Node</span> next<span>;</span>
    <span>// 构造方法</span>
    <span>public</span> <span>Node</span><span>(</span><span>E</span> e<span>,</span> <span>Node</span> next<span>)</span> <span>{</span>
        <span>this</span><span>.</span>e <span>=</span> e<span>;</span>
        <span>this</span><span>.</span>next <span>=</span> next<span>;</span>
    <span>}</span>
    <span>public</span> <span>Node</span><span>(</span><span>E</span> e<span>)</span> <span>{</span>
        <span>this</span><span>(</span>e<span>,</span> <span>null</span><span>)</span><span>;</span>
    <span>}</span>
    <span>public</span> <span>Node</span><span>(</span><span>)</span> <span>{</span>
        <span>this</span><span>(</span><span>null</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    <span>}</span>
    <span>@Override</span>
    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> e<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>private</span> <span>Node</span> head<span>;</span>
<span>private</span> <span>int</span> size<span>;</span>

<span>// 链表初始化</span>
<span>public</span> <span>LinkList</span><span>(</span><span>)</span> <span>{</span>
    head <span>=</span> <span>null</span><span>;</span>
    size <span>=</span> <span>0</span><span>;</span>
<span>}</span>

<span>// 获取链表的元素个数</span>
<span>public</span> <span>int</span> <span>getSize</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> size<span>;</span>
<span>}</span>

<span>// 返回链表是否为空</span>
<span>public</span> <span>boolean</span> <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> size <span>==</span> <span>0</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id="crud"> CRUD</h2>
<h3 id="create"> Create</h3>
<div><pre><code><span>// 在链表头添加新的元素e</span>
<span>public</span> <span>void</span> <span>addFirst</span><span>(</span><span>E</span> e<span>)</span> <span>{</span>
    <span>// Node node = new Node(e);</span>
    <span>// node.next = head;</span>
    <span>// head = node;</span>
    <span>// 对其优化后的写法</span>
    head <span>=</span> <span>new</span> <span>Node</span><span>(</span>e<span>,</span> head<span>)</span><span>;</span>
    size<span>++</span><span>;</span>
<span>}</span>

<span>/**
    * 在链表的index(0-based)位置添加新的元素
    * 这个方法在链表中并不是一个常用的操作，只是练习使用
    */</span>
<span>public</span> <span>void</span> <span>add</span><span>(</span><span>E</span> e<span>,</span> <span>int</span> index<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>&lt;</span> <span>0</span> <span>||</span> index <span>></span> size<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span><span>"add failed. Illegal index."</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 判断索引位置是否是头结点</span>
    <span>if</span> <span>(</span>index <span>==</span> <span>0</span><span>)</span> <span>{</span>
        <span>addFirst</span><span>(</span>e<span>)</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span>index <span>!=</span> <span>0</span><span>)</span> <span>{</span>
        <span>Node</span> prev <span>=</span> head<span>;</span>
        <span>// 使指针指向索引前一个位置</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> index <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span>
            prev <span>=</span> prev<span>.</span>next<span>;</span>

        <span>// Node node = new Node(e);</span>
        <span>// node.next = prev.next;</span>
        <span>// prev.next = node;</span>

        prev<span>.</span>next <span>=</span> <span>new</span> <span>Node</span><span>(</span>e<span>,</span> prev<span>)</span><span>;</span>
        size<span>++</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>// 在链表末尾添加新的元素e</span>
<span>public</span> <span>void</span> <span>addLast</span><span>(</span><span>E</span> e<span>)</span> <span>{</span>
    <span>add</span><span>(</span>e<span>,</span> size<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>为链表设置虚拟的头结点，可以统一在不同位置添加结点的操作</p>
<div><pre><code><span>private</span> <span>Node</span> dummyHead<span>;</span>
<span>private</span> <span>int</span> size<span>;</span>

<span>public</span> <span>LinkList</span><span>(</span><span>)</span> <span>{</span>
    dummyHead <span>=</span> <span>new</span> <span>Node</span><span>(</span><span>null</span><span>,</span> <span>null</span><span>)</span><span>;</span>
    size <span>=</span> <span>0</span><span>;</span>
<span>}</span>

<span>public</span> <span>void</span> <span>add</span><span>(</span><span>E</span> e<span>,</span> <span>int</span> index<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>&lt;</span> <span>0</span> <span>||</span> index <span>></span> size<span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span><span>"add failed. Illegal index."</span><span>)</span><span>;</span>
    <span>}</span>

    <span>Node</span> prev <span>=</span> dummyHead<span>;</span>
    <span>// 使指针指向索引前一个位置</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> index<span>;</span> i<span>++</span><span>)</span>
        prev <span>=</span> prev<span>.</span>next<span>;</span>

    <span>// Node node = new Node(e);</span>
    <span>// node.next = prev.next;</span>
    <span>// prev.next = node;</span>

    prev<span>.</span>next <span>=</span> <span>new</span> <span>Node</span><span>(</span>e<span>,</span> prev<span>)</span><span>;</span>
    size<span>++</span><span>;</span>
<span>}</span>

<span>// 在链表头添加新的元素e</span>
<span>public</span> <span>void</span> <span>addFirst</span><span>(</span><span>E</span> e<span>)</span> <span>{</span>
    <span>add</span><span>(</span>e<span>,</span> <span>0</span><span>)</span><span>;</span>
<span>}</span>

<span>// 在链表末尾添加新的元素e</span>
<span>public</span> <span>void</span> <span>addLast</span><span>(</span><span>E</span> e<span>)</span> <span>{</span>
    <span>add</span><span>(</span>e<span>,</span> size<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h3 id="read"> Read</h3>
<h3 id="update"> Update</h3>
<h3 id="delete"> Delete</h3>
<h2 id="完整代码"> 完整代码</h2>
]]></content:encoded>
    </item>
    <item>
      <title>基础篇</title>
      <link>https:/cloaks.cn/blogs/interview/%E5%9F%BA%E7%A1%80%E7%AF%87/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/interview/%E5%9F%BA%E7%A1%80%E7%AF%87/</guid>
      <source url="https:/cloaks.cn/rss.xml">基础篇</source>
      <content:encoded><![CDATA[<h1 id="基础篇"> 基础篇</h1>
<h2 id="二分查找"> 二分查找</h2>
<h3 id="要求"> 要求</h3>
<ol>
<li>
<p>能够用自己语言描述二分查找算法</p>
</li>
<li>
<p>能够手写二分查找代码</p>
</li>
<li>
<p>能够解答一些变化后的考法</p>
</li>
</ol>
<h3 id="算法步骤"> 算法步骤</h3>
<ol>
<li>
<p>前提：有已排序数组 A（假设已经做好）</p>
</li>
<li>
<p>定义左边界 L、右边界 R，确定搜索范围，循环执行二分查找（3、4两步</p>
</li>
<li>
<p>获取中间索引 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6833em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.01968em;">Fl</span><span style="margin-right:0.02778em;">oor</span><span>((</span><span>L</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.00773em;">R</span><span>)</span><span>/2</span><span>)</span></span></span></span></p>
</li>
</ol>
<blockquote>
<p>注：Floor 向下取整</p>
</blockquote>
<ol start="4">
<li>
<p>中间索引的值  <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>A</span><span>[</span><span style="margin-right:0.10903em;">M</span><span>]</span></span></span></span> 与待搜索的值 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6833em;"></span><span style="margin-right:0.13889em;">T</span></span></span></span> 进行比较</p>
<ol>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>A</span><span>[</span><span style="margin-right:0.10903em;">M</span><span>]</span><span style="margin-right:0.2778em;"></span><span>==</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6833em;"></span><span style="margin-right:0.13889em;">T</span></span></span></span> 表示找到，返回中间索引</p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>A</span><span>[</span><span style="margin-right:0.10903em;">M</span><span>]</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6833em;"></span><span style="margin-right:0.13889em;">T</span></span></span></span>，中间值右侧的其它元素都大于 T，无需比较，中间索引左边去找，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7667em;vertical-align:-0.0833em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 设置为右边界，重新查找</p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>A</span><span>[</span><span style="margin-right:0.10903em;">M</span><span>]</span><span style="margin-right:0.2778em;"></span><span>&lt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6833em;"></span><span style="margin-right:0.13889em;">T</span></span></span></span>，中间值左侧的其它元素都小于 T，无需比较，中间索引右边去找， <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7667em;vertical-align:-0.0833em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 设置为左边界，重新查找</p>
</li>
</ol>
</li>
<li>
<p>当 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7224em;vertical-align:-0.0391em;"></span><span>L</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.6833em;"></span><span style="margin-right:0.00773em;">R</span></span></span></span> 时，表示没有找到，应结束循环</p>
</li>
</ol>
<h3 id="算法实现"> 算法实现</h3>
<blockquote>
<p>参考 Java JDK 中 Array.binarySearch 的实现方式</p>
</blockquote>
<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
    <span>int</span><span>[</span><span>]</span> array <span>=</span> <span>{</span><span>1</span><span>,</span> <span>5</span><span>,</span> <span>8</span><span>,</span> <span>11</span><span>,</span> <span>19</span><span>,</span> <span>22</span><span>,</span> <span>31</span><span>,</span> <span>35</span><span>,</span> <span>40</span><span>,</span> <span>45</span><span>,</span> <span>48</span><span>,</span> <span>49</span><span>,</span> <span>50</span><span>}</span><span>;</span>
    <span>int</span> target <span>=</span> <span>47</span><span>;</span>
    <span>int</span> idx <span>=</span> <span>binarySearch</span><span>(</span>array<span>,</span> target<span>)</span><span>;</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>idx<span>)</span><span>;</span>
<span>}</span>

<span>public</span> <span>static</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> t<span>)</span> <span>{</span>
    <span>int</span> l <span>=</span> <span>0</span><span>,</span> r <span>=</span> a<span>.</span>length <span>-</span> <span>1</span><span>,</span> m<span>;</span>
    <span>while</span> <span>(</span>l <span>&lt;=</span> r<span>)</span> <span>{</span>
        m <span>=</span> <span>(</span>l <span>+</span> r<span>)</span> <span>/</span> <span>2</span><span>;</span>
        <span>if</span> <span>(</span>a<span>[</span>m<span>]</span> <span>==</span> t<span>)</span> <span>{</span>
            <span>return</span> m<span>;</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>a<span>[</span>m<span>]</span> <span>></span> t<span>)</span> <span>{</span>
            r <span>=</span> m <span>-</span> <span>1</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            l <span>=</span> m <span>+</span> <span>1</span><span>;</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> <span>-</span><span>1</span><span>;</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="解决整数溢出问题"> 解决整数溢出问题</h3>
<p>当 l 和 r 都较大时，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7778em;vertical-align:-0.0833em;"></span><span style="margin-right:0.01968em;">l</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.4306em;"></span><span style="margin-right:0.02778em;">r</span></span></span></span> 有可能超过整数范围，造成运算错误，解决方法有两种：</p>
<div><pre><code><span>// 方法一</span>
<span>int</span> m <span>=</span> l <span>+</span> <span>(</span>r <span>-</span> l<span>)</span> <span>/</span> <span>2</span><span>;</span>
<span>// 方法二</span>
<span>int</span> m <span>=</span> <span>(</span>l <span>+</span> r<span>)</span> <span>>>></span> <span>1</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="冒泡排序"> 冒泡排序</h2>
<h3 id="要求-2"> 要求</h3>
<ol>
<li>
<p>能够用自己语言描述冒泡排序算法</p>
</li>
<li>
<p>能够手写冒泡排序代码</p>
</li>
<li>
<p>了解一些冒泡排序的优化手段</p>
</li>
</ol>
<h3 id="算法描述"> 算法描述</h3>
<ol>
<li>
<p>依次比较数组中相邻两个元素大小，若 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>a</span><span>[</span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2778em;"></span><span>&gt;</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>a</span><span>[</span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span></span></span></span>，则交换两个元素，两两都比较一遍称为一轮冒泡，结果是让最大的元素排至最后</p>
</li>
<li>
<p>重复以上步骤，直到整个数组有序</p>
</li>
</ol>
<h3 id="算法实现-2"> 算法实现</h3>
<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>bubble</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> a<span>.</span>length <span>-</span> <span>1</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
        <span>// 一轮冒泡</span>
        <span>boolean</span> swapped <span>=</span> <span>false</span><span>;</span> <span>// 是否发生了交换</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> a<span>.</span>length <span>-</span> <span>1</span> <span>-</span> j<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"比较次数"</span> <span>+</span> i<span>)</span><span>;</span>
            <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>></span> a<span>[</span>i <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                <span>Utils</span><span>.</span><span>swap</span><span>(</span>a<span>,</span> i<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>;</span>
                swapped <span>=</span> <span>true</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第"</span> <span>+</span> j <span>+</span> <span>"轮冒泡"</span> <span>+</span> <span>Arrays</span><span>.</span><span>toString</span><span>(</span>a<span>)</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>swapped<span>)</span> <span>{</span>
            <span>break</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>优化点1：每经过一轮冒泡，内层循环就可以减少一次
优化点2：如果某一轮冒泡没有发生交换，则表示所有数据有序，可以结束外层循环</p>
<p><strong>进一步优化</strong></p>
<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>bubble_v2</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>
    <span>int</span> n <span>=</span> a<span>.</span>length <span>-</span> <span>1</span><span>;</span>
    <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
        <span>int</span> last <span>=</span> <span>0</span><span>;</span> <span>// 表示最后一次交换索引位置</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"比较次数"</span> <span>+</span> i<span>)</span><span>;</span>
            <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>></span> a<span>[</span>i <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                <span>Utils</span><span>.</span><span>swap</span><span>(</span>a<span>,</span> i<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>;</span>
                last <span>=</span> i<span>;</span>
            <span>}</span>
        <span>}</span>
        n <span>=</span> last<span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第轮冒泡"</span>
                           <span>+</span> <span>Arrays</span><span>.</span><span>toString</span><span>(</span>a<span>)</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>n <span>==</span> <span>0</span><span>)</span> <span>{</span>
            <span>break</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>每轮冒泡时，最后一次交换索引可以作为下一轮冒泡的比较次数，如果这个值为零，表示整个数组有序，直接退出外层循环即可</p>
<h3 id="完整代码"> 完整代码</h3>
<div><pre><code><span>public</span> <span>class</span> <span>BubbleSort</span> <span>{</span>
    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>int</span><span>[</span><span>]</span> a <span>=</span> <span>{</span><span>5</span><span>,</span> <span>9</span><span>,</span> <span>3</span><span>,</span> <span>2</span><span>,</span> <span>4</span><span>,</span> <span>1</span><span>,</span> <span>6</span><span>,</span> <span>7</span><span>,</span> <span>8</span><span>}</span><span>;</span>
<span>//        int[] a = {1, 2, 3, 4, 5, 6, 7, 8, 9};</span>
        <span>bubble</span><span>(</span>a<span>)</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>a<span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>bubble</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>
        <span>int</span> length <span>=</span> a<span>.</span>length <span>-</span> <span>1</span><span>;</span>
        <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
            <span>int</span> count <span>=</span> <span>1</span><span>;</span>
            <span>int</span> last_swap_index <span>=</span> <span>0</span><span>;</span>
            <span>boolean</span> tag <span>=</span> <span>false</span><span>;</span> <span>// 优化冒泡次数</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
                <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"比较次数"</span> <span>+</span> i<span>)</span><span>;</span>
                <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>></span> a<span>[</span>i <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"\t交换次数"</span> <span>+</span> count<span>++</span><span>)</span><span>;</span>
                    <span>swap</span><span>(</span>a<span>,</span> i<span>,</span> i <span>+</span> <span>1</span><span>)</span><span>;</span>
                    last_swap_index <span>=</span> i<span>;</span>
                <span>}</span>
            <span>}</span>
            length <span>=</span> last_swap_index<span>;</span>
            <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"第轮冒泡"</span> <span>+</span> <span>Arrays</span><span>.</span><span>toString</span><span>(</span>a<span>)</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>length <span>==</span> <span>0</span><span>)</span> <span>break</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>swap</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>,</span> <span>int</span> i<span>,</span> <span>int</span> j<span>)</span> <span>{</span>
        <span>int</span> temp <span>=</span> a<span>[</span>i<span>]</span><span>;</span>
        a<span>[</span>i<span>]</span> <span>=</span> a<span>[</span>j<span>]</span><span>;</span>
        a<span>[</span>j<span>]</span> <span>=</span> temp<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="选择排序"> 选择排序</h2>
<h3 id="要求-3"> 要求</h3>
<ol>
<li>
<p>能够用自己语言描述选择排序算法</p>
</li>
<li>
<p>能够比较选择排序与冒泡排序</p>
</li>
<li>
<p>理解非稳定排序与稳定排序</p>
</li>
</ol>
<h3 id="算法描述-2"> 算法描述</h3>
<ol>
<li>
<p>将数组分为两个子集，排序的和未排序的，每一轮从未排序的子集中选出最小的元素，放入排序子集</p>
</li>
<li>
<p>重复以上步骤，直到整个数组有序</p>
</li>
</ol>
<blockquote>
<p><em>更形象的描述请参考：selection_sort.html</em></p>
</blockquote>
<h3 id="算法实现-3"> 算法实现</h3>
<div><pre><code><span>public</span> <span>static</span> <span>void</span> <span>selection</span><span>(</span><span>int</span><span>[</span><span>]</span> a<span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> a<span>.</span>length <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>// i 代表每轮选择最小元素要交换到的目标索引</span>
        <span>int</span> s <span>=</span> i<span>;</span> <span>// 代表最小元素的索引</span>
        <span>for</span> <span>(</span><span>int</span> j <span>=</span> s <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> a<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>a<span>[</span>s<span>]</span> <span>></span> a<span>[</span>j<span>]</span><span>)</span> <span>{</span> <span>// j 元素比 s 元素还要小, 更新 s</span>
                s <span>=</span> j<span>;</span>
            <span>}</span>
        <span>}</span>
        <span>if</span> <span>(</span>s <span>!=</span> i<span>)</span> <span>{</span>
            <span>swap</span><span>(</span>a<span>,</span> s<span>,</span> i<span>)</span><span>;</span>
        <span>}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>a<span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>
<li>优化点：为减少交换次数，每一轮可以先找最小的索引，在每轮最后再交换元素</li>
</ul>
<h3 id="与冒泡排序比较"> 与冒泡排序比较</h3>
<ol>
<li>
<p>二者平均时间复杂度都是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0641em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span></p>
</li>
<li>
<p>选择排序一般要快于冒泡，因为其交换次数少</p>
</li>
<li>
<p>但如果集合有序度高，冒泡优于选择</p>
</li>
<li>
<p>冒泡属于稳定排序算法，而选择属于不稳定排序</p>
<ol>
<li>
<p>稳定排序指，按对象中不同字段进行多次排序，不会打乱同值元素的顺序</p>
</li>
<li>
<p>不稳定排序则反之</p>
</li>
</ol>
</li>
</ol>
<h3 id="稳定排序与不稳定排序"> 稳定排序与不稳定排序</h3>
<div><pre><code><span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"=================不稳定================"</span><span>)</span><span>;</span>
<span>Card</span><span>[</span><span>]</span> cards <span>=</span> <span>getStaticCards</span><span>(</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>
<span>selection</span><span>(</span>cards<span>,</span> <span>Comparator</span><span>.</span><span>comparingInt</span><span>(</span><span>(</span><span>Card</span> a<span>)</span> <span>-></span> a<span>.</span>sharpOrder<span>)</span><span>.</span><span>reversed</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>
<span>selection</span><span>(</span>cards<span>,</span> <span>Comparator</span><span>.</span><span>comparingInt</span><span>(</span><span>(</span><span>Card</span> a<span>)</span> <span>-></span> a<span>.</span>numberOrder<span>)</span><span>.</span><span>reversed</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>

<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"=================稳定================="</span><span>)</span><span>;</span>
cards <span>=</span> <span>getStaticCards</span><span>(</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>
<span>bubble</span><span>(</span>cards<span>,</span> <span>Comparator</span><span>.</span><span>comparingInt</span><span>(</span><span>(</span><span>Card</span> a<span>)</span> <span>-></span> a<span>.</span>sharpOrder<span>)</span><span>.</span><span>reversed</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>
<span>bubble</span><span>(</span>cards<span>,</span> <span>Comparator</span><span>.</span><span>comparingInt</span><span>(</span><span>(</span><span>Card</span> a<span>)</span> <span>-></span> a<span>.</span>numberOrder<span>)</span><span>.</span><span>reversed</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>Arrays</span><span>.</span><span>toString</span><span>(</span>cards<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>都是先按照花色排序（♠♥♣♦），再按照数字排序（AKQJ...）</p>
<ul>
<li>
<p>不稳定排序算法按数字排序时，会打乱原本同值的花色顺序</p>
<div><pre><code><span>[</span><span>[</span>♠<span>7</span><span>]</span><span>,</span> <span>[</span>♠<span>2</span><span>]</span><span>,</span> <span>[</span>♠<span>4</span><span>]</span><span>,</span> <span>[</span>♠<span>5</span><span>]</span><span>,</span> <span>[</span>♥<span>2</span><span>]</span><span>,</span> <span>[</span>♥<span>5</span><span>]</span><span>]</span>
<span>[</span><span>[</span>♠<span>7</span><span>]</span><span>,</span> <span>[</span>♠<span>5</span><span>]</span><span>,</span> <span>[</span>♥<span>5</span><span>]</span><span>,</span> <span>[</span>♠<span>4</span><span>]</span><span>,</span> <span>[</span>♥<span>2</span><span>]</span><span>,</span> <span>[</span>♠<span>2</span><span>]</span><span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>原来 ♠2 在前 ♥2 在后，按数字再排后，他俩的位置变了</p>
</li>
<li>
<p>稳定排序算法按数字排序时，会保留原本同值的花色顺序，如下所示 ♠2 与 ♥2 的相对位置不变</p>
<div><pre><code><span>[</span><span>[</span>♠<span>7</span><span>]</span><span>,</span> <span>[</span>♠<span>2</span><span>]</span><span>,</span> <span>[</span>♠<span>4</span><span>]</span><span>,</span> <span>[</span>♠<span>5</span><span>]</span><span>,</span> <span>[</span>♥<span>2</span><span>]</span><span>,</span> <span>[</span>♥<span>5</span><span>]</span><span>]</span>
<span>[</span><span>[</span>♠<span>7</span><span>]</span><span>,</span> <span>[</span>♠<span>5</span><span>]</span><span>,</span> <span>[</span>♥<span>5</span><span>]</span><span>,</span> <span>[</span>♠<span>4</span><span>]</span><span>,</span> <span>[</span>♠<span>2</span><span>]</span><span>,</span> <span>[</span>♥<span>2</span><span>]</span><span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
</ul>
<h2 id="arraylist"> ArrayList</h2>
<h3 id="要求-4"> 要求</h3>
<ol>
<li>掌握 ArrayList 扩容规则</li>
</ol>
<h3 id="扩容规则"> 扩容规则</h3>
<ol>
<li>
<p><code>ArrayList()</code> 会使用长度为零的数组</p>
</li>
<li>
<p><code>ArrayList(int initialCapacity)</code> 会使用指定容量的数组</p>
</li>
<li>
<p><code>public ArrayList(Collection&lt;? extends E&gt; c)</code> 会使用 <code>c</code> 的大小作为数组容量</p>
</li>
<li>
<p><code>add(Object o)</code> 首次扩容为 <code>10</code>，再次扩容为上次容量的 <code>1.5</code> 倍</p>
</li>
<li>
<p><code>addAll(Collection c)</code> 没有元素时，扩容为 <code>Math.max(10, 实际元素个数)</code>，有元素时为 <code>Math.max(原容量 1.5 倍, 实际元素个数)</code></p>
</li>
<li>
<p>扩大 <code>1.5</code> 倍是通过移位运算实现的</p>
</li>
</ol>
<div><pre><code><span>// 假设 ArrayList 当前大小为 15，以下是它的扩容过程</span>
<span>15</span> <span>>></span> <span>1</span> <span>=></span> <span>7</span>
<span>7</span> <span>+</span> <span>15</span> <span>=</span> <span>22</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其中第 4 点必须知道，其它几点视个人情况而定</p>
<p><strong>提示</strong></p>
<ol>
<li>要<strong>注意</strong>的是，示例中用反射方式来更直观地反映 ArrayList 的扩容特征，但从 JDK 9 由于模块化的影响，对反射做了较多限制，需要在运行测试代码时添加 VM 参数 <code>--add-opens java.base/java.util=ALL-UNNAMED</code> 方能运行通过，后面的例子都有相同问题</li>
</ol>
<h2 id="iterator"> Iterator</h2>
<ol>
<li>掌握什么是 Fail-Fast、什么是 Fail-Safe</li>
</ol>
<p>Fail-Fast 与 Fail-Safe</p>
<ol>
<li>
<p>ArrayList 是 fail-fast 的典型代表，遍历的同时不能修改，尽快失败</p>
</li>
<li>
<p>CopyOnWriteArrayList 是 fail-safe 的典型代表，遍历的同时可以修改，原理是读写分离</p>
</li>
</ol>
<h2 id="linkedlist"> LinkedList</h2>
<ol>
<li>能够说清楚 LinkedList 对比 ArrayList 的区别，并重视纠正部分错误的认知</li>
</ol>
<h3 id="linkedlist-2"> LinkedList</h3>
<ol>
<li>
<p>基于双向链表，无需连续内存</p>
</li>
<li>
<p>随机访问慢（要沿着链表遍历）</p>
</li>
<li>
<p>头尾插入删除性能高</p>
</li>
<li>
<p>占用内存多</p>
</li>
</ol>
<h3 id="arraylist-2"> ArrayList</h3>
<ol>
<li>
<p>基于数组，需要连续内存</p>
</li>
<li>
<p>随机访问快（指根据下标访问）</p>
</li>
<li>
<p>尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低</p>
</li>
<li>
<p>可以利用 cpu 缓存，局部性原理</p>
</li>
</ol>
<h2 id="hashmap"> HashMap</h2>
<h3 id="要求-5"> 要求</h3>
<ol>
<li>
<p>掌握 HashMap 的基本数据结构</p>
</li>
<li>
<p>掌握树化</p>
</li>
<li>
<p>理解索引计算方法、二次 hash 的意义、容量对索引计算的影响</p>
</li>
<li>
<p>掌握 put 流程、扩容、扩容因子</p>
</li>
<li>
<p>理解并发使用 HashMap 可能导致的问题</p>
</li>
<li>
<p>理解 key 的设计</p>
</li>
</ol>
<h3 id="基本数据结构"> 基本数据结构</h3>
<ul>
<li>1.7 数组 + 链表</li>
<li>1.8 数组 + （链表 | 红黑树）</li>
</ul>
<blockquote>
<p>运行需要 jdk14 以上环境，进入 jar 包目录，执行下面命令</p>
<div><pre><code>java -jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED hash-demo.jar
</code></pre>
<div><span>1</span><br></div></div></blockquote>
<h3 id="树化与退化"> 树化与退化</h3>
<h4 id="树化意义"> 树化意义</h4>
<ol>
<li>
<p>红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略</p>
</li>
<li>
<p>hash 表的查找，更新的时间复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>1</span><span>)</span></span></span></span>，而红黑树的查找，更新的时间复杂度是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span><span style="margin-right:0.03588em;">g</span><span><span><span><span style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>⁡</span><span>n</span><span>)</span></span></span></span>，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表</p>
</li>
<li>
<p>hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小</p>
</li>
</ol>
<h4 id="树化规则"> 树化规则</h4>
<ol>
<li>当链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &gt;=64，才会进行树化</li>
</ol>
<h4 id="退化规则"> 退化规则</h4>
<ol>
<li>
<p>情况1：在扩容时如果拆分树时，树元素个数 &lt;= 6 则会退化链表</p>
</li>
<li>
<p>情况2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表</p>
</li>
</ol>
<h3 id="索引计算"> 索引计算</h3>
<h4 id="索引计算方法"> 索引计算方法</h4>
<ol>
<li>
<p>首先，计算对象的 hashCode()</p>
</li>
<li>
<p>再进行调用 HashMap 的 hash() 方法进行二次哈希</p>
<ol>
<li>二次 hash() 是为了综合高位数据，让哈希分布更为均匀</li>
</ol>
</li>
<li>
<p>最后 &amp; (capacity – 1) 得到索引</p>
</li>
</ol>
<h4 id="数组容量为何是-2-的-n-次幂"> 数组容量为何是 2 的 n 次幂</h4>
<ol>
<li>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</li>
<li>扩容时重新计算索引效率更高： hash &amp; oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>
<p>二次 hash 是为了配合 <strong>容量是 2 的 n 次幂</strong> 这一设计前提，如果 hash 表的容量不是 2 的 n 次幂，则不必二次 hash</p>
</li>
<li>
<p><strong>容量是 2 的 n 次幂</strong> 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable</p>
</li>
</ol>
<h3 id="put-与扩容"> put 与扩容</h3>
<h4 id="put-流程"> put 流程</h4>
<ol>
<li>
<p>HashMap 是懒惰创建数组的，首次使用才创建数组</p>
</li>
<li>
<p>计算索引（桶下标）</p>
</li>
<li>
<p>如果桶下标还没人占用，创建 Node 占位返回</p>
</li>
<li>
<p>如果桶下标已经有人占用</p>
<ol>
<li>
<p>已经是 TreeNode 走红黑树的添加或更新逻辑</p>
</li>
<li>
<p>是普通 Node，走链表的添加或更新逻辑，如果链表长度超过树化阈值，走树化逻辑</p>
</li>
</ol>
</li>
<li>
<p>返回前检查容量是否超过阈值，一旦超过进行扩容</p>
</li>
</ol>
<h4 id="_1-7-与-1-8-的区别"> 1.7 与 1.8 的区别</h4>
<ol>
<li>
<p>链表插入节点时，1.7 是头插法，1.8 是尾插法</p>
</li>
<li>
<p>1.7 是大于等于阈值且没有空位时才扩容，而 1.8 是大于阈值就扩容</p>
</li>
<li>
<p>1.8 在扩容计算 Node 索引时，会优化</p>
</li>
</ol>
<h4 id="扩容-加载-因子为何默认是-0-75f"> 扩容（加载）因子为何默认是 0.75f</h4>
<ol>
<li>
<p>在空间占用与查询时间之间取得较好的权衡</p>
</li>
<li>
<p>大于这个值，空间节省了，但链表就会比较长影响性能</p>
</li>
<li>
<p>小于这个值，冲突减少了，但扩容就会更频繁，空间占用也更多</p>
</li>
</ol>
<h3 id="并发问题"> 并发问题</h3>
<h4 id="扩容死链-1-7-会存在"> 扩容死链（1.7 会存在）</h4>
<p>1.7 源码如下：</p>
<div><pre><code><span>void</span> <span>transfer</span><span>(</span><span>Entry</span><span>[</span><span>]</span> newTable<span>,</span> <span>boolean</span> rehash<span>)</span> <span>{</span>
    <span>int</span> newCapacity <span>=</span> newTable<span>.</span>length<span>;</span>
    <span>for</span> <span>(</span><span>Entry</span><span><span>&lt;</span><span>K</span><span>,</span><span>V</span><span>></span></span> e <span>:</span> table<span>)</span> <span>{</span>
        <span>while</span><span>(</span><span>null</span> <span>!=</span> e<span>)</span> <span>{</span>
            <span>Entry</span><span><span>&lt;</span><span>K</span><span>,</span><span>V</span><span>></span></span> next <span>=</span> e<span>.</span>next<span>;</span>
            <span>if</span> <span>(</span>rehash<span>)</span> <span>{</span>
                e<span>.</span>hash <span>=</span> <span>null</span> <span>==</span> e<span>.</span>key <span>?</span> <span>0</span> <span>:</span> <span>hash</span><span>(</span>e<span>.</span>key<span>)</span><span>;</span>
            <span>}</span>
            <span>int</span> i <span>=</span> <span>indexFor</span><span>(</span>e<span>.</span>hash<span>,</span> newCapacity<span>)</span><span>;</span>
            e<span>.</span>next <span>=</span> newTable<span>[</span>i<span>]</span><span>;</span>
            newTable<span>[</span>i<span>]</span> <span>=</span> e<span>;</span>
            e <span>=</span> next<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ol>
<li>
<p>e 和 next 都是局部变量，用来指向当前节点和下一个节点</p>
</li>
<li>
<p>线程1（绿色）的临时变量 e 和 next 刚引用了这俩节点，还未来得及移动节点，发生了线程切换，由线程2（蓝色）完成扩容和迁移</p>
</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201021147765.png" alt="" /></p>
<ol start="3">
<li>线程2 扩容完成，由于头插法，链表顺序颠倒。但线程1 的临时变量 e 和 next 还引用了这俩节点，还要再来一遍迁移</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201021148143.png" alt="" /></p>
<ol start="4">
<li>
<p>第一次循环</p>
<ol>
<li>
<p>循环接着线程切换前运行，注意此时 e 指向的是节点 a，next 指向的是节点 b</p>
</li>
<li>
<p>e 头插 a 节点，注意图中画了两份 a 节点，但事实上只有一个（为了不让箭头特别乱画了两份）</p>
</li>
<li>
<p>当循环结束是 e 会指向 next 也就是 b 节点</p>
</li>
</ol>
</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201021148600.png" alt="" />
5. 第二次循环</p>
<div><pre><code>1. next 指向了节点 a

2. e 头插节点 b

3. 当循环结束时，e 指向 next 也就是节点 a
</code></pre>
</div><p><img src="https://gitee.com/biliit/pic-go/raw/master/202201021149530.png" alt="" /></p>
<ol start="6">
<li>
<p>第三次循环</p>
<ol>
<li>
<p>next 指向了 null</p>
</li>
<li>
<p>e 头插节点 a，<strong>a 的 next 指向了 b</strong>（之前 a.next 一直是 null），b 的 next 指向 a，死链已成</p>
</li>
<li>
<p>当循环结束时，e 指向 next 也就是 null，因此第四次循环时会正常退出</p>
</li>
</ol>
</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201021149234.png" alt="" /></p>
<blockquote>
<p>数据错乱（1.7，1.8 都会存在）</p>
</blockquote>
<h3 id="key-的设计"> key 的设计</h3>
<h4 id="key-的设计要求"> key 的设计要求</h4>
<ol>
<li>
<p>HashMap 的 key 可以为 null，但 Map 的其他实现则不然</p>
</li>
<li>
<p>作为 key 的对象，必须实现 hashCode 和 equals，并且 key 的内容不能修改（不可变）</p>
</li>
<li>
<p>key 的 hashCode 应该有良好的散列性</p>
</li>
</ol>
<p>如果 key 可变，例如修改了 age 会导致再次查询时查询不到</p>
<div><pre><code><span>public</span> <span>class</span> <span>HashMapMutableKey</span> <span>{</span>
    <span>public</span> <span>static</span> <span>void</span> <span>main</span><span>(</span><span>String</span><span>[</span><span>]</span> args<span>)</span> <span>{</span>
        <span>HashMap</span><span><span>&lt;</span><span>Student</span><span>,</span> <span>Object</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>Student</span> stu <span>=</span> <span>new</span> <span>Student</span><span>(</span><span>"张三"</span><span>,</span> <span>18</span><span>)</span><span>;</span>
        map<span>.</span><span>put</span><span>(</span>stu<span>,</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>)</span><span>;</span>

        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>map<span>.</span><span>get</span><span>(</span>stu<span>)</span><span>)</span><span>;</span>

        stu<span>.</span>age <span>=</span> <span>19</span><span>;</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>map<span>.</span><span>get</span><span>(</span>stu<span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>class</span> <span>Student</span> <span>{</span>
        <span>String</span> name<span>;</span>
        <span>int</span> age<span>;</span>

        <span>public</span> <span>Student</span><span>(</span><span>String</span> name<span>,</span> <span>int</span> age<span>)</span> <span>{</span>
            <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>

        <span>public</span> <span>String</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> name<span>;</span>
        <span>}</span>

        <span>public</span> <span>void</span> <span>setName</span><span>(</span><span>String</span> name<span>)</span> <span>{</span>
            <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
        <span>}</span>

        <span>public</span> <span>int</span> <span>getAge</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> age<span>;</span>
        <span>}</span>

        <span>public</span> <span>void</span> <span>setAge</span><span>(</span><span>int</span> age<span>)</span> <span>{</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>boolean</span> <span>equals</span><span>(</span><span>Object</span> o<span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>this</span> <span>==</span> o<span>)</span> <span>return</span> <span>true</span><span>;</span>
            <span>if</span> <span>(</span>o <span>==</span> <span>null</span> <span>||</span> <span>getClass</span><span>(</span><span>)</span> <span>!=</span> o<span>.</span><span>getClass</span><span>(</span><span>)</span><span>)</span> <span>return</span> <span>false</span><span>;</span>
            <span>Student</span> student <span>=</span> <span>(</span><span>Student</span><span>)</span> o<span>;</span>
            <span>return</span> age <span>==</span> student<span>.</span>age <span>&amp;&amp;</span> <span>Objects</span><span>.</span><span>equals</span><span>(</span>name<span>,</span> student<span>.</span>name<span>)</span><span>;</span>
        <span>}</span>

        <span>@Override</span>
        <span>public</span> <span>int</span> <span>hashCode</span><span>(</span><span>)</span> <span>{</span>
            <span>return</span> <span>Objects</span><span>.</span><span>hash</span><span>(</span>name<span>,</span> age<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h4 id="string-对象的-hashcode-设计"> String 对象的 hashCode() 设计</h4>
<ol>
<li>
<p>目标是达到较为均匀的散列效果，每个字符串的 hashCode 足够独特</p>
</li>
<li>
<p>字符串中的每个字符都可以表现为一个数字，称为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 i 的范围是 0 ~ n - 1</p>
</li>
<li>
<p>散列公式为： <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.9713em;vertical-align:-0.0833em;"></span><span>3</span><span><span>1</span><span><span><span><span style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>1</span><span>)</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.8333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.9713em;vertical-align:-0.0833em;"></span><span>3</span><span><span>1</span><span><span><span><span style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>2</span><span>)</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.8333em;vertical-align:-0.15em;"></span><span>…</span><span style="margin-right:0.1667em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.9713em;vertical-align:-0.0833em;"></span><span>3</span><span><span>1</span><span><span><span><span style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>1</span><span>−</span><span>i</span><span>)</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1.0385em;vertical-align:-0.3552em;"></span><span>…</span><span style="margin-right:0.1667em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>1</span><span>)</span></span></span></span></span><span>​</span></span><span><span style="height:0.3552em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.8141em;"></span><span>3</span><span><span>1</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>0</span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>31 代入公式有较好的散列特性，并且 31 * h 可以被优化为</p>
<ol>
<li>
<p>即 $32 ∗h -h $</p>
</li>
<li>
<p>即 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>5</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.7778em;vertical-align:-0.0833em;"></span><span>h</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6944em;"></span><span>h</span></span></span></span></p>
</li>
<li>
<p>即 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7335em;vertical-align:-0.0391em;"></span><span>h</span><span style="margin-right:0.2778em;"></span><span>≪</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:0.7278em;vertical-align:-0.0833em;"></span><span>5</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6944em;"></span><span>h</span></span></span></span></p>
</li>
</ol>
</li>
</ol>
<h2 id="单例模式"> 单例模式</h2>
<h3 id="要求-6"> 要求</h3>
<ol>
<li>
<p>掌握五种单例模式的实现方式</p>
</li>
<li>
<p>理解为何 DCL 实现时要使用 volatile 修饰静态变量</p>
</li>
<li>
<p>了解 jdk 中用到单例的场景</p>
</li>
</ol>
<h3 id="饿汉式"> 饿汉式</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Singleton1</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    <span>private</span> <span>Singleton1</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>INSTANCE <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            <span>throw</span> <span>new</span> <span>RuntimeException</span><span>(</span><span>"单例对象不能重复创建"</span><span>)</span><span>;</span>
        <span>}</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"private Singleton1()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>final</span> <span>Singleton1</span> INSTANCE <span>=</span> <span>new</span> <span>Singleton1</span><span>(</span><span>)</span><span>;</span>

    <span>public</span> <span>static</span> <span>Singleton1</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> INSTANCE<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>otherMethod</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"otherMethod()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>Object</span> <span>readResolve</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> INSTANCE<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><ol>
<li>
<p>构造方法抛出异常是防止反射破坏单例</p>
</li>
<li>
<p><code>readResolve()</code> 是防止反序列化破坏单例</p>
</li>
</ol>
<h3 id="枚举饿汉式"> 枚举饿汉式</h3>
<div><pre><code><span>public</span> <span>enum</span> <span>Singleton2</span> <span>{</span>
    INSTANCE<span>;</span>

    <span>private</span> <span>Singleton2</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"private Singleton2()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>String</span> <span>toString</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>getClass</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>+</span> <span>"@"</span> <span>+</span> <span>Integer</span><span>.</span><span>toHexString</span><span>(</span><span>hashCode</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>Singleton2</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> INSTANCE<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>otherMethod</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"otherMethod()"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ol>
<li>枚举饿汉式能天然防止反射、反序列化破坏单例</li>
</ol>
<h3 id="懒汉式"> 懒汉式</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Singleton3</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    <span>private</span> <span>Singleton3</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"private Singleton3()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>Singleton3</span> INSTANCE <span>=</span> <span>null</span><span>;</span>

    <span>// Singleton3.class</span>
    <span>public</span> <span>static</span> <span>synchronized</span> <span>Singleton3</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>INSTANCE <span>==</span> <span>null</span><span>)</span> <span>{</span>
            INSTANCE <span>=</span> <span>new</span> <span>Singleton3</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> INSTANCE<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>otherMethod</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"otherMethod()"</span><span>)</span><span>;</span>
    <span>}</span>

<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ol>
<li>
<p>其实只有首次创建单例对象时才需要同步，但该代码实际上每次调用都会同步</p>
</li>
<li>
<p>因此有了下面的双检锁改进</p>
</li>
</ol>
<h3 id="双检锁懒汉式"> 双检锁懒汉式</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Singleton4</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    <span>private</span> <span>Singleton4</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"private Singleton4()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>volatile</span> <span>Singleton4</span> INSTANCE <span>=</span> <span>null</span><span>;</span> <span>// 可见性，有序性</span>

    <span>public</span> <span>static</span> <span>Singleton4</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>INSTANCE <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>synchronized</span> <span>(</span><span>Singleton4</span><span>.</span><span>class</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span>INSTANCE <span>==</span> <span>null</span><span>)</span> <span>{</span>
                    INSTANCE <span>=</span> <span>new</span> <span>Singleton4</span><span>(</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> INSTANCE<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>otherMethod</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"otherMethod()"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>为何必须加 volatile：</p>
<ol>
<li>
<p><code>INSTANCE = new Singleton4()</code> 不是原子的，分成 3 步：创建对象、调用构造、给静态变量赋值，其中后两步可能被指令重排序优化，变成先赋值、再调用构造</p>
</li>
<li>
<p>如果线程1 先执行了赋值，线程2 执行到第一个 <code>INSTANCE == null</code> 时发现 INSTANCE 已经不为 null，此时就会返回一个未完全构造的对象</p>
</li>
</ol>
<h3 id="内部类懒汉式"> 内部类懒汉式</h3>
<div><pre><code><span>public</span> <span>class</span> <span>Singleton5</span> <span>implements</span> <span>Serializable</span> <span>{</span>
    <span>private</span> <span>Singleton5</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"private Singleton5()"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>static</span> <span>class</span> <span>Holder</span> <span>{</span>
        <span>static</span> <span>Singleton5</span> INSTANCE <span>=</span> <span>new</span> <span>Singleton5</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>Singleton5</span> <span>getInstance</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>Holder</span><span>.</span>INSTANCE<span>;</span>
    <span>}</span>

    <span>public</span> <span>static</span> <span>void</span> <span>otherMethod</span><span>(</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"otherMethod()"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ol>
<li>避免了双检锁的缺点</li>
</ol>
<h3 id="jdk-中单例的体现"> JDK 中单例的体现</h3>
<ol>
<li>
<p>Runtime 体现了饿汉式单例</p>
</li>
<li>
<p>Console 体现了双检锁懒汉式单例</p>
</li>
<li>
<p>Collections 中的 EmptyNavigableSet 内部类懒汉式单例</p>
</li>
<li>
<p>ReverseComparator.REVERSE_ORDER 内部类懒汉式单例</p>
</li>
<li>
<p>Comparators.NaturalOrderComparator.INSTANCE 枚举饿汉式单例</p>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201021147765.png" type="image/png"/>
    </item>
    <item>
      <title>并发篇</title>
      <link>https:/cloaks.cn/blogs/interview/%E5%B9%B6%E5%8F%91%E7%AF%87/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/interview/%E5%B9%B6%E5%8F%91%E7%AF%87/</guid>
      <source url="https:/cloaks.cn/rss.xml">并发篇</source>
      <content:encoded><![CDATA[<h1 id="并发篇"> 并发篇</h1>
<h2 id="线程状态"> 线程状态</h2>
<h3 id="要求"> 要求</h3>
<ol>
<li>
<p>掌握 Java 线程六种状态</p>
</li>
<li>
<p>掌握 Java 线程状态转换</p>
</li>
<li>
<p>能理解五种状态与六种状态两种说法的区别</p>
</li>
</ol>
<h3 id="六种状态及转换"> 六种状态及转换</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201040920672.png" alt="" /></p>
<p>分别是</p>
<ol>
<li>
<p>新建</p>
<ol>
<li>
<p>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</p>
</li>
<li>
<p>此时未与操作系统底层线程关联</p>
</li>
</ol>
</li>
<li>
<p>可运行</p>
<ol>
<li>
<p>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></p>
</li>
<li>
<p>此时与底层线程关联，由操作系统调度执行</p>
</li>
</ol>
</li>
<li>
<p>终结</p>
<ol>
<li>
<p>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></p>
</li>
<li>
<p>此时会取消与底层线程关联</p>
</li>
</ol>
</li>
<li>
<p>阻塞</p>
<ol>
<li>
<p>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</p>
</li>
<li>
<p>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</p>
</li>
</ol>
</li>
<li>
<p>等待</p>
<ol>
<li>
<p>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</p>
</li>
<li>
<p>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</p>
</li>
</ol>
</li>
<li>
<p>有时限等待</p>
<ol>
<li>
<p>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</p>
</li>
<li>
<p>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</p>
</li>
<li>
<p>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</p>
</li>
<li>
<p>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p><em><strong>其它情况（只需了解）</strong></em></p>
<ul>
<li>可以用 interrupt() 方法打断<strong>等待</strong>、<strong>有时限等待</strong>的线程，让它们恢复为<strong>可运行</strong>状态</li>
<li>park，unpark 等方法也可以让线程等待和唤醒</li>
</ul>
</blockquote>
<h3 id="五种状态"> 五种状态</h3>
<p>五种状态的说法来自于操作系统层面的划分</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201040920941.png" alt="" /></p>
<ol>
<li>
<p>运行态：分到 cpu 时间，能真正执行线程内代码的</p>
</li>
<li>
<p>就绪态：有资格分到 cpu 时间，但还未轮到它的</p>
</li>
<li>
<p>阻塞态：没资格分到 cpu 时间的</p>
<ol>
<li>
<p>涵盖了 java 状态中提到的<strong>阻塞</strong>、<strong>等待</strong>、<strong>有时限等待</strong></p>
</li>
<li>
<p>多出了阻塞 I/O，指线程在调用阻塞 I/O 时，实际活由 I/O 设备完成，此时线程无事可做，只能干等</p>
</li>
<li>
<p>新建与终结态：与 java 中同名状态类似，不再啰嗦</p>
</li>
</ol>
</li>
</ol>
<h2 id="线程池"> 线程池</h2>
<h3 id="要求-2"> 要求</h3>
<ol>
<li>掌握线程池的 7 大核心参数</li>
</ol>
<h3 id="七大参数"> 七大参数</h3>
<ol>
<li>
<p>corePoolSize 核心线程数目 - 池中会保留的最多线程数</p>
</li>
<li>
<p>maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目</p>
</li>
<li>
<p>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</p>
</li>
<li>
<p>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</p>
</li>
<li>
<p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p>
</li>
<li>
<p>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</p>
</li>
<li>
<p>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略</p>
<ol>
<li>
<p>抛异常 java.util.concurrent.ThreadPoolExecutor.AbortPolicy</p>
</li>
<li>
<p>由调用者执行任务 java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy</p>
</li>
<li>
<p>丢弃任务 java.util.concurrent.ThreadPoolExecutor.DiscardPolicy</p>
</li>
<li>
<p>丢弃最早排队任务 java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy</p>
</li>
</ol>
</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201040921944.png" alt="" /></p>
<h2 id="wait-vs-sleep"> wait vs sleep</h2>
<h3 id="要求-3"> 要求</h3>
<ol>
<li>能够说出二者区别</li>
</ol>
<h3 id="一个共同点-三个不同点"> 一个共同点，三个不同点</h3>
<p>共同点</p>
<ol>
<li>wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入<strong>阻塞</strong>状态</li>
</ol>
<p>不同点</p>
<ol>
<li>
<p>方法归属不同</p>
<ol>
<li>
<p><code>sleep(long)</code> 是 <code>Thread</code> 的静态方法</p>
</li>
<li>
<p>而 <code>wait()</code>，<code>wait(long)</code> 都是 <code>Object</code> 的成员方法，每个对象都有</p>
</li>
</ol>
</li>
<li>
<p>醒来时机不同</p>
<ol>
<li>
<p>执行 <code>sleep(long)</code> 和 <code>wait(long)</code> 的线程都会在等待相应毫秒后醒来</p>
</li>
<li>
<p><code>wait(long)</code> 和 <code>wait()</code> 还可以被 <code>notify</code> 唤醒，<code>wait()</code> 如果不唤醒就一直等下去</p>
</li>
<li>
<p>它们都可以被打断唤醒</p>
</li>
</ol>
</li>
<li>
<p>锁特性不同（重点）</p>
<ol>
<li>
<p><code>wait</code> 方法的调用必须先获取 <code>wait</code> 对象的锁，而 <code>sleep</code> 则无此限制</p>
</li>
<li>
<p><code>wait</code> 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 <code>cpu</code>，但你们还可以用）</p>
</li>
<li>
<p>而 <code>sleep</code> 如果在 <code>synchronized</code> 代码块中执行，并不会释放对象锁（我放弃 <code>cpu</code>，你们也用不了）</p>
</li>
</ol>
</li>
</ol>
<h2 id="lock-vs-synchronized"> lock vs synchronized</h2>
<h3 id="要求-4"> 要求</h3>
<ol>
<li>
<p>掌握 lock 与 synchronized 的区别</p>
</li>
<li>
<p>理解 ReentrantLock 的公平、非公平锁</p>
</li>
<li>
<p>理解 ReentrantLock 中的条件变量</p>
</li>
</ol>
<h3 id="三个层面"> 三个层面</h3>
<p>不同点</p>
<ol>
<li>
<p>语法层面</p>
<ol>
<li>
<p><code>synchronized</code> 是关键字，源码在 <code>jvm</code> 中，用 <code>c++</code> 语言实现</p>
</li>
<li>
<p><code>Lock</code> 是接口，源码由 <code>jdk</code> 提供，用 <code>java</code> 语言实现</p>
</li>
<li>
<p>使用 <code>synchronized</code> 时，退出同步代码块锁会自动释放，而使用 <code>Lock</code> 时，需要手动调用 <code>unlock</code> 方法释放锁</p>
</li>
</ol>
</li>
<li>
<p>功能层面</p>
<ol>
<li>
<p>二者均属于悲观锁、都具备基本的<strong>互斥、同步、锁重入</strong>功能</p>
</li>
<li>
<p><code>Lock</code> 提供了许多 <code>synchronized</code> 不具备的功能，例如<strong>获取等待状态、公平锁、可打断、可超时、多条件变量</strong></p>
</li>
<li>
<p><code>Lock</code> 有适合不同场景的实现，如 <code>ReentrantLock</code>、 <code>ReentrantReadWriteLock</code></p>
</li>
</ol>
</li>
<li>
<p>性能层面</p>
<ol>
<li>
<p>在没有竞争时，<code>synchronized</code> 做了很多优化，如偏向锁、轻量级锁，性能不赖</p>
</li>
<li>
<p>在竞争激烈时，<code>Lock</code> 的实现通常会提供更好的性能</p>
</li>
</ol>
</li>
</ol>
<h3 id="公平锁"> 公平锁</h3>
<ol>
<li>
<p>公平锁的公平体现</p>
<ol>
<li>
<p><strong>已经处在阻塞队列</strong>中的线程（不考虑超时）始终都是公平的，先进先出</p>
</li>
<li>
<p>公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，如果队列不为空，则老实到队尾等待</p>
</li>
<li>
<p>非公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，与队列头唤醒的线程去竞争，谁抢到算谁的</p>
</li>
</ol>
</li>
<li>
<p>公平锁会降低吞吐量，一般不用</p>
</li>
</ol>
<h3 id="条件变量"> 条件变量</h3>
<ol>
<li>
<p>ReentrantLock 中的条件变量功能类似于普通 synchronized 的 wait，notify，用在当线程获得锁后，发现条件不满足时，临时等待的链表结构</p>
</li>
<li>
<p>与 synchronized 的等待集合不同之处在于，ReentrantLock 中的条件变量可以有多个，可以实现更精细的等待、唤醒控制</p>
</li>
</ol>
<h2 id="volatile"> volatile</h2>
<h3 id="要求-5"> 要求</h3>
<ol>
<li>
<p>掌握线程安全要考虑的三个问题</p>
</li>
<li>
<p>掌握 <code>volatile</code> 能解决哪些问题</p>
</li>
</ol>
<h3 id="原子性"> 原子性</h3>
<ol>
<li>
<p>起因：多线程下，不同线程的<strong>指令发生了交错</strong>导致的共享变量的读写混乱</p>
</li>
<li>
<p>解决：用悲观锁或乐观锁解决，<code>volatile</code> 并不能解决原子性</p>
</li>
</ol>
<h3 id="可见性"> 可见性</h3>
<ol>
<li>
<p>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致的对共享变量所做的修改另外的线程看不到</p>
</li>
<li>
<p>解决：用 <code>volatile</code> 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见</p>
</li>
</ol>
<h3 id="有序性"> 有序性</h3>
<ol>
<li>
<p>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致指令的实际执行顺序与编写顺序不一致</p>
</li>
<li>
<p>解决：用 <code>volatile</code> 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果</p>
</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>
<p><strong>volatile 变量写</strong>加的屏障是阻止上方其它写操作越过屏障排到 <strong>volatile 变量写</strong>之下</p>
</li>
<li>
<p><strong>volatile 变量读</strong>加的屏障是阻止下方其它读操作越过屏障排到 <strong>volatile 变量读</strong>之上</p>
</li>
<li>
<p>volatile 读写加入的屏障只能防止同一线程内的指令重排</p>
</li>
</ol>
<h2 id="悲观锁-vs-乐观锁"> 悲观锁 vs 乐观锁</h2>
<h3 id="要求-6"> 要求</h3>
<ol>
<li>掌握悲观锁和乐观锁的区别</li>
</ol>
<h3 id="对比悲观锁与乐观锁"> 对比悲观锁与乐观锁</h3>
<ol>
<li>
<p>悲观锁的代表是 synchronized 和 Lock 锁</p>
<ol>
<li>
<p>其核心思想是【线程只有占有了锁，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来等待】</p>
</li>
<li>
<p>线程从运行到阻塞、再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能</p>
</li>
<li>
<p>实际上，线程在获取 synchronized 和 Lock 锁时，如果锁已被占用，都会做几次重试操作，减少阻塞的机会</p>
</li>
</ol>
</li>
<li>
<p>乐观锁的代表是 AtomicInteger，使用 cas 来保证原子性</p>
<ol>
<li>
<p>其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】</p>
</li>
<li>
<p>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</p>
</li>
<li>
<p>它需要多核 cpu 支持，且线程数不应超过 cpu 核数</p>
</li>
</ol>
</li>
</ol>
<h2 id="hashtable-vs-concurrenthashmap"> Hashtable vs ConcurrentHashMap</h2>
<h3 id="要求-7"> 要求</h3>
<ol>
<li>
<p>掌握 Hashtable 与 ConcurrentHashMap 的区别</p>
</li>
<li>
<p>掌握 ConcurrentHashMap 在不同版本的实现区别</p>
</li>
</ol>
<h3 id="hashtable-对比-concurrenthashmap"> Hashtable 对比 ConcurrentHashMap</h3>
<ol>
<li>
<p>Hashtable 与 ConcurrentHashMap 都是线程安全的 Map 集合</p>
</li>
<li>
<p>Hashtable 并发度低，整个 Hashtable 对应一把锁，同一时刻，只能有一个线程操作它</p>
</li>
<li>
<p>ConcurrentHashMap 并发度高，整个 ConcurrentHashMap 对应多把锁，只要线程访问的是不同锁，那么不会冲突</p>
</li>
</ol>
<h3 id="concurrenthashmap-1-7"> ConcurrentHashMap 1.7</h3>
<ol>
<li>
<p>数据结构：<code>Segment(大数组) + HashEntry(小数组) + 链表</code>，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突</p>
</li>
<li>
<p>并发度：Segment 数组大小即并发度，决定了同一时刻最多能有多少个线程并发访问。Segment 数组不能扩容，意味着并发度在 ConcurrentHashMap 创建时就固定了</p>
</li>
<li>
<p>索引计算</p>
<ol>
<li>
<p>假设大数组长度是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6644em;"></span><span><span>2</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span></span></span></span></span></span></span></span>，key 在大数组内的索引是 key 的二次 hash 值的高 m 位</p>
</li>
<li>
<p>假设小数组长度是 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6644em;"></span><span><span>2</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span>，key 在小数组内的索引是 key 的二次 hash 值的低 n 位</p>
</li>
<li>
<p>扩容：每个小数组的扩容相对独立，小数组在超过扩容因子时会触发扩容，每次扩容翻倍</p>
</li>
</ol>
</li>
<li>
<p>Segment[0] 原型：首次创建其它小数组时，会以此原型为依据，数组长度，扩容因子都会以原型为准</p>
</li>
</ol>
<h3 id="concurrenthashmap-1-8"> ConcurrentHashMap 1.8</h3>
<ol>
<li>
<p>数据结构：<code>Node 数组 + 链表或红黑树</code>，数组的每个头节点作为锁，如果多个线程访问的头节点不同，则不会冲突。首次生成头节点时如果发生竞争，利用 cas 而非 syncronized，进一步提升性能</p>
</li>
<li>
<p>并发度：Node 数组有多大，并发度就有多大，与 1.7 不同，Node 数组可以扩容</p>
</li>
<li>
<p>扩容条件：Node 数组满 3/4 时就会扩容</p>
</li>
<li>
<p>扩容单位：以链表为单位从后向前迁移链表，迁移完成的将旧数组头节点替换为 ForwardingNode</p>
</li>
<li>
<p>扩容时并发 get</p>
<ol>
<li>
<p>根据是否为 ForwardingNode 来决定是在新数组查找还是在旧数组查找，不会阻塞</p>
</li>
<li>
<p>如果链表长度超过 1，则需要对节点进行复制（创建新节点），怕的是节点迁移后 next 指针改变</p>
</li>
<li>
<p>如果链表最后几个元素扩容后索引不变，则节点无需复制</p>
</li>
</ol>
</li>
<li>
<p>扩容时并发 put</p>
<ol>
<li>
<p>如果 put 的线程与扩容线程操作的链表是同一个，put 线程会阻塞</p>
</li>
<li>
<p>如果 put 的线程操作的链表还未迁移完成，即头节点不是ForwardingNode，则可以并发执行</p>
</li>
<li>
<p>如果 put 的线程操作的链表已经迁移完成，即头结点是 ForwardingNode，则可以协助扩容</p>
</li>
</ol>
</li>
<li>
<p>与 1.7 相比是懒惰初始化</p>
</li>
<li>
<p>capacity 代表预估的元素个数，capacity / factory 来计算出初始数组大小，需要贴近 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.6644em;"></span><span><span>2</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>loadFactor 只在计算初始数组大小时被使用，之后扩容固定为 3/4</p>
</li>
<li>
<p>超过树化阈值时的扩容问题，如果容量已经是 64，直接树化，否则在原来容量基础上做 3 轮扩容</p>
</li>
</ol>
<h2 id="threadlocal"> ThreadLocal</h2>
<h3 id="要求-8"> 要求</h3>
<ol>
<li>
<p>掌握 ThreadLocal 的作用与原理</p>
</li>
<li>
<p>掌握 ThreadLocal 的内存释放时机</p>
</li>
</ol>
<h3 id="作用"> 作用</h3>
<ol>
<li>
<p>ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题</p>
</li>
<li>
<p>ThreadLocal 同时实现了线程内的资源共享</p>
</li>
</ol>
<h3 id="原理"> 原理</h3>
<p>每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p>
<ol>
<li>
<p>调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</p>
</li>
<li>
<p>调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</p>
</li>
<li>
<p>调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</p>
</li>
</ol>
<p>ThreadLocalMap 的一些特点</p>
<ol>
<li>
<p>key 的 hash 值统一分配</p>
</li>
<li>
<p>初始容量 16，扩容因子 2/3，扩容容量翻倍</p>
</li>
<li>
<p>key 索引冲突后用开放寻址法解决冲突</p>
</li>
</ol>
<h3 id="弱引用-key"> 弱引用 key</h3>
<p>ThreadLocalMap 中的 key 被设计为弱引用，原因如下</p>
<ol>
<li>Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存</li>
</ol>
<h3 id="内存释放时机"> 内存释放时机</h3>
<ol>
<li>
<p>被动 GC 释放 key</p>
<ol>
<li>仅是让 key 的内存释放，关联 value 的内存并不会释放</li>
</ol>
</li>
<li>
<p>懒惰被动释放 value</p>
<ol>
<li>
<p>get key 时，发现是 null key，则释放其 value 内存</p>
</li>
<li>
<p>set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关</p>
</li>
</ol>
</li>
<li>
<p>主动 remove 释放 key，value</p>
<ol>
<li>
<p>会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存</p>
</li>
<li>
<p>推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收</p>
</li>
</ol>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201040920672.png" type="image/png"/>
    </item>
    <item>
      <title>框架篇</title>
      <link>https:/cloaks.cn/blogs/interview/%E6%A1%86%E6%9E%B6%E7%AF%87/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/interview/%E6%A1%86%E6%9E%B6%E7%AF%87/</guid>
      <source url="https:/cloaks.cn/rss.xml">框架篇</source>
      <content:encoded><![CDATA[<h1 id="框架篇"> 框架篇</h1>
<h2 id="spring-refresh-流程"> Spring refresh 流程</h2>
<h3 id="要求"> 要求</h3>
<ul>
<li>掌握 <code>refresh</code> 的 12 个步骤</li>
</ul>
<h3 id="spring-refresh-概述"> Spring refresh 概述</h3>
<p><code>refresh</code> 是 <code>AbstractApplicationContext</code> 中的一个方法，负责初始化 <code>ApplicationContext</code> 容器，容器必须调用 <code>refresh</code> 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 <code>refresh</code> 的 12 个步骤：</p>
<div><pre><code><span># 准备环境</span>
<span>prepareRefresh</span><span>:</span> 1 做好准备工作
<span># 准备 BeanFactory</span>
<span>obtainFreshBeanFactory</span><span>:</span> 2 创建或获取 BeanFactory
<span>prepareBeanFactory</span><span>:</span> 3 准备 BeanFactory
<span>postProcessBeanFactory</span><span>:</span> 4 子类扩展 BeanFactory
<span>invokeBeanFactoryPostProcessors</span><span>:</span> 5 后处理器扩展 BeanFactory
<span>registerBeanPostProcessors</span><span>:</span> 6 准备 Bean 后处理器
<span># 准备 ApplicationContext</span>
<span>initMessageSource</span><span>:</span> 7 为 ApplicationContext 提供国际化功能
<span>initApplicationEventMulticaster</span><span>:</span> 8 为 ApplicationContext 提供事件发布器
<span>onRefresh</span><span>:</span> 9 留给子类扩展
<span>registerListeners</span><span>:</span> 10 为 ApplicationContext 准备监听器
<span>finishRefresh</span><span>:</span> 12 准备生命周期管理器，发布ContextRefreshed 事件
<span># 初始化 BeanFactory 中非延迟单例 bean</span>
<span>finishBeanFactoryInitialization</span><span>:</span> 11 初始化单例 Bean，执行 Bean 后处理器扩展
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h4 id="_1-preparerefresh"> 1. prepareRefresh</h4>
<p>这一步创建和准备了 <code>Environment</code> 对象，它作为 <code>ApplicationContext</code> 的一个成员变量</p>
<p><code>Environment</code> 对象的作用之一是为后续 <code>@Value</code> 值注入时提供键值</p>
<p><code>Environment</code> 分成三个主要部分</p>
<ul>
<li>
<p><code>systemProperties</code> - 保存 <code>java</code> 环境键值</p>
</li>
<li>
<p><code>systemEnvironment</code> - 保存系统环境键值</p>
</li>
<li>
<p>自定义 <code>PropertySource</code> - 保存自定义键值，例如来自于 <code>*.properties</code> 文件的键值</p>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081057917.png" alt="" /></p>
<h4 id="_2-obtainfreshbeanfactory"> 2. obtainFreshBeanFactory</h4>
<ul>
<li>
<p>这一步获取（或创建） <code>BeanFactory</code> 也是作为 <code>ApplicationContext</code> 的一个成员变量</p>
</li>
<li>
<p><code>BeanFactory</code> 的作用是负责 <code>bean</code> 的创建、依赖注入和初始化，<code>bean</code> 的各项特征由 <code>BeanDefinition</code> 定义</p>
<ul>
<li>
<p><code>BeanDefinition</code> 作为 <code>bean</code> 的设计蓝图，规定了 <code>bean</code> 的特征，如单例多例、依赖关系、初始销毁方法等</p>
</li>
<li>
<p><code>BeanDefinition</code> 的来源有多种多样，可以是通过 <code>xml</code> 获得、配置类获得、组件扫描获得，也可以是编程添加</p>
</li>
</ul>
</li>
<li>
<p>所有的 <code>BeanDefinition</code> 会存入 <code>BeanFactory</code> 中的 <code>beanDefinitionMap</code> 集合</p>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081057632.png" alt="" /></p>
<h4 id="_3-preparebeanfactory"> 3. prepareBeanFactory</h4>
<ul>
<li>这一步会进一步完善 <code>BeanFactory</code>，为它的各项成员变量赋值</li>
<li><code>beanExpressionResolver</code> 用来解析 <code>SpEL</code>，常见实现为 <code>StandardBeanExpressionResolver</code></li>
<li><code>propertyEditorRegistrars</code> 会注册类型转换器
<ul>
<li>它在这里使用了 <code>ResourceEditorRegistrar</code> 实现类</li>
<li>并应用 <code>ApplicationContext</code> 提供的 <code>Environment</code> 完成 <code>${ }</code> 解析</li>
</ul>
</li>
<li><code>registerResolvableDependency</code> 来注册 <code>beanFactory</code> 以及 <code>ApplicationContext</code>，让它们也能用于依赖注入</li>
<li><code>beanPostProcessors</code> 是 <code>bean</code> 后处理器集合，会工作在 <code>bean</code> 的生命周期各个阶段，此处会添加两个：
<ul>
<li><code>ApplicationContextAwareProcessor</code> 用来解析 <code>Aware</code> 接口</li>
<li><code>ApplicationListenerDetector</code> 用来识别容器中 <code>ApplicationListener</code> 类型的 <code>bean</code></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081057394.png" alt="" /></p>
<h4 id="_4-postprocessbeanfactory"> 4. postProcessBeanFactory</h4>
<ul>
<li>这一步是空实现，留给子类扩展。
<ul>
<li>一般 <code>Web</code> 环境的 <code>ApplicationContext</code> 都要利用它注册新的 <code>Scope</code>，完善 <code>Web</code> 下的 <code>BeanFactory</code></li>
</ul>
</li>
<li>这里体现的是模板方法设计模式</li>
</ul>
<h4 id="_5-invokebeanfactorypostprocessors"> 5. invokeBeanFactoryPostProcessors</h4>
<ul>
<li>这一步会调用 <code>beanFactory</code> 后处理器</li>
<li><code>beanFactory</code> 后处理器，充当 <code>beanFactory</code> 的扩展点，可以用来补充或修改 <code>BeanDefinition</code></li>
<li>常见的 <code>beanFactory</code> 后处理器有
<ul>
<li><code>ConfigurationClassPostProcessor</code> – 解析 <code>@Configuration、@Bean、@Import、@PropertySource</code> 等</li>
<li><code>PropertySourcesPlaceHolderConfigurer</code> – 替换 <code>BeanDefinition</code> 中的 <code>${ }</code></li>
<li><code>MapperScannerConfigurer</code> – 补充 <code>Mapper</code> 接口对应的 <code>BeanDefinition</code></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081058642.png" alt="" /></p>
<h4 id="_6-registerbeanpostprocessors"> 6. registerBeanPostProcessors</h4>
<ul>
<li>这一步是继续从 <code>beanFactory</code> 中找出 <code>bean</code> 后处理器，添加至 <code>beanPostProcessors</code> 集合中</li>
<li><code>bean</code> 后处理器，充当 <code>bean</code> 的扩展点，可以工作在 <code>bean</code> 的实例化、依赖注入、初始化阶段，常见的有：
<ul>
<li><code>AutowiredAnnotationBeanPostProcessor</code> 功能有：解析 <code>@Autowired，@Value</code> 注解</li>
<li><code>CommonAnnotationBeanPostProcessor</code> 功能有：解析 <code>@Resource，@PostConstruct，@PreDestroy</code></li>
<li><code>AnnotationAwareAspectJAutoProxyCreator</code> 功能有：为符合切点的目标 <code>bean</code> 自动创建代理</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081058548.png" alt="" /></p>
<h4 id="_7-initmessagesource"> 7. initMessageSource</h4>
<ul>
<li>这一步是为 <code>ApplicationContext</code> 添加 <code>messageSource</code> 成员，实现国际化功能</li>
<li>去 <code>beanFactory</code> 内找名为 <code>messageSource</code> 的 <code>bean</code>，如果没有，则提供空的 <code>MessageSource</code> 实现</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081058233.png" alt="" /></p>
<h4 id="_8-initapplicationcontexteventmulticaster"> 8. initApplicationContextEventMulticaster</h4>
<ul>
<li>这一步为 <code>ApplicationContext</code> 添加事件广播器成员，即 <code>applicationContextEventMulticaster</code></li>
<li>它的作用是发布事件给监听器</li>
<li>去 <code>beanFactory</code> 找名为 <code>applicationEventMulticaster</code> 的 <code>bean</code> 作为事件广播器，若没有，会创建默认的事件广播器</li>
<li>之后就可以调用 <code>ApplicationContext.publishEvent</code>(事件对象) 来发布事件</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081058783.png" alt="" /></p>
<h4 id="_9-onrefresh"> 9. onRefresh</h4>
<ul>
<li>这一步是空实现，留给子类扩展
<ul>
<li><code>SpringBoot</code> 中的子类在这里准备了 <code>WebServer</code>，即内嵌 <code>web</code> 容器</li>
</ul>
</li>
<li>体现的是模板方法设计模式</li>
</ul>
<h4 id="_10-registerlisteners"> 10. registerListeners</h4>
<ul>
<li>这一步会从多种途径找到事件监听器，并添加至 <code>applicationEventMulticaster</code></li>
<li>事件监听器顾名思义，用来接收事件广播器发布的事件，有如下来源
<ul>
<li>事先编程添加的</li>
<li>来自容器中的 <code>bean</code></li>
<li>来自于 <code>@EventListener</code> 的解析</li>
</ul>
</li>
<li>要实现事件监听器，只需要实现 <code>ApplicationListener</code> 接口，重写其中 <code>onApplicationEvent(E e)</code> 方法即可</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081059510.png" alt="" /></p>
<h4 id="_11-finishbeanfactoryinitialization"> 11. finishBeanFactoryInitialization</h4>
<ul>
<li>这一步会将 <code>beanFactory</code> 的成员补充完毕，并初始化所有非延迟单例 <code>bean</code></li>
<li><code>conversionService</code> 也是一套转换机制，作为对 <code>PropertyEditor</code> 的补充</li>
<li><code>embeddedValueResolvers</code> 即内嵌值解析器，用来解析 <code>@Value</code> 中的 <code>${ }</code>，借用的是 <code>Environment</code> 的功能</li>
<li><code>singletonObjects</code> 即单例池，缓存所有单例对象
<ul>
<li>对象的创建都分三个阶段，每一阶段都有不同的 <code>bean</code> 后处理器参与进来，扩展功能</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081059692.png" alt="" /></p>
<h4 id="_12-finishrefresh"> 12. finishRefresh</h4>
<ul>
<li>这一步会为 <code>ApplicationContext</code> 添加 <code>lifecycleProcessor</code> 成员，用来控制容器内需要生命周期管理的 <code>bean</code></li>
<li>如果容器中有名称为 <code>lifecycleProcessor</code> 的 <code>bean</code> 就用它，否则创建默认的生命周期管理器</li>
<li>准备好生命周期管理器，就可以实现
<ul>
<li>调用 <code>context</code> 的 <code>start</code>，即可触发所有实现 <code>LifeCycle</code> 接口 <code>bean</code> 的 <code>start</code></li>
<li>调用 <code>context</code> 的 <code>stop</code>，即可触发所有实现 <code>LifeCycle</code> 接口 <code>bean</code> 的 <code>stop</code></li>
</ul>
</li>
<li>发布 <code>ContextRefreshed</code> 事件，整个 <code>refresh</code> 执行完成</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201081059816.png" alt="" /></p>
<h2 id="spring-bean-生命周期"> Spring bean 生命周期</h2>
<h3 id="要求-2"> 要求</h3>
<ul>
<li>掌握 <code>Spring bean</code> 的生命周期</li>
</ul>
<h3 id="bean-生命周期-概述"> bean 生命周期 概述</h3>
<p><code>bean</code> 的生命周期从调用 <code>beanFactory</code> 的 <code>getBean</code> 开始，到这个 <code>bean</code> 被销毁，可以总结为以下七个阶段：</p>
<div><pre><code>1. 处理名称，检查缓存

2. 处理父子容器

3. 处理 `dependsOn`

4. 选择 `scope` 策略

5. 创建 `bean`

6. 类型转换处理

7. 销毁 `bean`
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><blockquote>
<p><em><strong>注意</strong></em></p>
<ul>
<li>划分的阶段和名称并不重要，重要的是理解整个过程中做了哪些事情</li>
</ul>
</blockquote>
<h4 id="_1-处理名称-检查缓存"> 1. 处理名称，检查缓存</h4>
<ul>
<li>
<p>这一步会处理别名，将别名解析为实际名称</p>
</li>
<li>
<p>对 <code>FactoryBean</code> 也会特殊处理，如果以 <code>&amp;</code> 开头表示要获取 <code>FactoryBean</code> 本身，否则表示要获取其产品</p>
</li>
<li>
<p>这里针对单例对象会检查一级、二级、三级缓存</p>
<ul>
<li>
<p><code>singletonFactories</code> 三级缓存，存放单例工厂对象</p>
</li>
<li>
<p><code>earlySingletonObjects</code> 二级缓存，存放单例工厂的产品对象</p>
<ul>
<li>如果发生循环依赖，产品是代理；无循环依赖，产品是原始对象</li>
</ul>
</li>
<li>
<p><code>singletonObjects</code> 一级缓存，存放单例成品对象</p>
</li>
</ul>
</li>
</ul>
<h4 id="_2-处理父子容器"> 2. 处理父子容器</h4>
<ul>
<li>
<p>如果当前容器根据名字找不到这个 <code>bean</code>，此时若父容器存在，则执行父容器的 <code>getBean</code> 流程</p>
</li>
<li>
<p>父子容器的 <code>bean</code> 名称可以重复</p>
</li>
</ul>
<h4 id="_3-处理-dependson"> 3. 处理 dependsOn</h4>
<ul>
<li>
<p>如果当前 <code>bean</code> 有通过 <code>dependsOn</code> 指定了非显式依赖的 <code>bean</code>，这一步会提前创建这些 <code>dependsOn</code> 的 <code>bean</code></p>
</li>
<li>
<p>所谓非显式依赖，就是指两个 <code>bean</code> 之间不存在直接依赖关系，但需要控制它们的创建先后顺序</p>
</li>
</ul>
<h4 id="_4-选择-scope-策略"> 4. 选择 scope 策略</h4>
<ul>
<li>
<p>对于 <code>singleton scope</code>，首先到单例池去获取 <code>bean</code>，如果有则直接返回，没有再进入创建流程</p>
</li>
<li>
<p>对于 <code>prototype scope</code>，每次都会进入创建流程</p>
</li>
<li>
<p>对于自定义 <code>scope</code>，例如 <code>request</code>，首先到 <code>request</code> 域获取 <code>bean</code>，如果有则直接返回，没有再进入创建流程</p>
</li>
</ul>
<h4 id="_5-1-创建-bean-创建-bean-实例"> 5.1 创建 bean - 创建 bean 实例</h4>
<table>
<thead>
<tr>
<th><strong>要点</strong></th>
<th><strong>总结</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>有自定义 <code>TargetSource</code> 的情况</td>
<td>由 <code>AnnotationAwareAspectJAutoProxyCreator</code> 创建代理返回</td>
</tr>
<tr>
<td><code>Supplier</code> 方式创建 <code>bean</code> 实例</td>
<td>为 <code>Spring 5.0</code> 新增功能，方便编程方式创建  <code>bean</code>  实例</td>
</tr>
<tr>
<td><code>FactoryMethod</code> 方式  创建 <code>bean</code>  实例</td>
<td>① 分成静态工厂与实例工厂；② 工厂方法若有参数，需要对工厂方法参数进行解析，利用 <code>resolveDependency</code>；③ 如果有多个工厂方法候选者，还要进一步按权重筛选</td>
</tr>
<tr>
<td><code>AutowiredAnnotationBeanPostProcessor</code></td>
<td>① 优先选择带  <code>@Autowired</code>  注解的构造；② 若有唯一的带参构造，也会入选</td>
</tr>
<tr>
<td><code>mbd.getPreferredConstructors</code></td>
<td>选择所有公共构造，这些构造之间按权重筛选</td>
</tr>
<tr>
<td>采用默认构造</td>
<td>如果上面的后处理器和 <code>BeanDefiniation</code> 都没找到构造，采用默认构造，即使是私有的</td>
</tr>
</tbody>
</table>
<h4 id="_5-2-创建-bean-依赖注入"> 5.2 创建 bean - 依赖注入</h4>
<table>
<thead>
<tr>
<th><strong>要点</strong></th>
<th><strong>总结</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AutowiredAnnotationBeanPostProcessor</code></td>
<td>识别 <code>@Autowired</code> 及 <code>@Value</code> 标注的成员，封装为 <code>InjectionMetadata</code> 进行依赖注入</td>
</tr>
<tr>
<td><code>CommonAnnotationBeanPostProcessor</code></td>
<td>识别 <code>@Resource</code> 标注的成员，封装为 <code>InjectionMetadata</code> 进行依赖注入</td>
</tr>
<tr>
<td><code>resolveDependency</code></td>
<td>用来查找要装配的值，可以识别：① <code>Optional</code>；② <code>ObjectFactory</code> 及 <code>ObjectProvider</code>；③ <code>@Lazy</code>  注解；④ <code>@Value</code> 注解（<code>${ }</code>, <code>#{ }</code>, 类型转换）；⑤ 集合类型（<code>Collection</code>，<code>Map</code>，数组等）；⑥ 泛型和  <code>@Qualifier</code>（用来区分类型歧义）；⑦ <code>primary</code>  及名字匹配（用来区分类型歧义）</td>
</tr>
<tr>
<td><code>AUTOWIRE_BY_NAME</code></td>
<td>根据成员名字找 <code>bean</code> 对象，修改 <code>mbd</code> 的 <code>propertyValues</code>，不会考虑简单类型的成员</td>
</tr>
<tr>
<td><code>AUTOWIRE_BY_TYPE</code></td>
<td>根据成员类型执行 <code>resolveDependency</code> 找到依赖注入的值，修改  <code>mbd</code> 的 <code>propertyValues</code></td>
</tr>
<tr>
<td><code>applyPropertyValues</code></td>
<td>根据 <code>mbd</code> 的 <code>propertyValues</code> 进行依赖注入（即 <code>xml</code> 中 <code>&lt;property name ref|value/&gt;</code>）</td>
</tr>
</tbody>
</table>
<h4 id="_5-3-创建-bean-初始化"> 5.3 创建 bean - 初始化</h4>
<table>
<thead>
<tr>
<th><strong>要点</strong></th>
<th><strong>总结</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>内置 <code>Aware</code> 接口的装配</td>
<td>包括 <code>BeanNameAware</code>，<code>BeanFactoryAware</code> 等</td>
</tr>
<tr>
<td>扩展 <code>Aware</code> 接口的装配</td>
<td>由 <code>ApplicationContextAwareProcessor</code> 解析，执行时机在  <code>postProcessBeforeInitialization</code></td>
</tr>
<tr>
<td><code>@PostConstruct</code></td>
<td>由 <code>CommonAnnotationBeanPostProcessor</code> 解析，执行时机在  <code>postProcessBeforeInitialization</code></td>
</tr>
<tr>
<td><code>InitializingBean</code></td>
<td>通过接口回调执行初始化</td>
</tr>
<tr>
<td><code>initMethod</code></td>
<td>根据 <code>BeanDefinition</code> 得到的初始化方法执行初始化，即 <code>&lt;bean init-method&gt;</code> 或 <code>@Bean</code>(<code>initMethod</code>)</td>
</tr>
<tr>
<td>创建 <code>aop</code> 代理</td>
<td>由 <code>AnnotationAwareAspectJAutoProxyCreator</code> 创建，执行时机在  <code>postProcessAfterInitialization</code></td>
</tr>
</tbody>
</table>
<h4 id="_5-4-创建-bean-注册可销毁-bean"> 5.4 创建 bean - 注册可销毁 bean</h4>
<p>在这一步判断并登记可销毁 <code>bean</code></p>
<ul>
<li>
<p>判断依据</p>
<ul>
<li>
<p>如果实现了 <code>DisposableBean</code> 或 <code>AutoCloseable</code> 接口，则为可销毁 <code>bean</code></p>
</li>
<li>
<p>如果自定义了 <code>destroyMethod</code>，则为可销毁 <code>bean</code></p>
</li>
<li>
<p>如果采用 <code>@Bean</code> 没有指定 <code>destroyMethod</code>，则采用自动推断方式获取销毁方法名（<code>close，shutdown</code>）</p>
</li>
<li>
<p>如果有 <code>@PreDestroy</code> 标注的方法</p>
</li>
</ul>
</li>
<li>
<p>存储位置</p>
<ul>
<li>
<p><code>singleton scope</code> 的可销毁 <code>bean</code> 会存储于 <code>beanFactory</code> 的成员当中</p>
</li>
<li>
<p>自定义 <code>scope</code> 的可销毁 <code>bean</code> 会存储于对应的域对象当中</p>
</li>
<li>
<p><code>prototype scope</code> 不会存储，需要自己找到此对象销毁</p>
</li>
</ul>
</li>
<li>
<p>存储时都会封装为 <code>DisposableBeanAdapter</code> 类型对销毁方法的调用进行适配</p>
</li>
</ul>
<h4 id="_6-类型转换处理"> 6. 类型转换处理</h4>
<ul>
<li>如果 <code>getBean</code> 的 <code>requiredType</code> 参数与实际得到的对象类型不同，会尝试进行类型转换</li>
</ul>
<h4 id="_7-销毁-bean"> 7. 销毁 bean</h4>
<ul>
<li>
<p>销毁时机</p>
<ul>
<li>
<p><code>singleton bean</code> 的销毁在 <code>ApplicationContext.close</code> 时，此时会找到所有 <code>DisposableBean</code> 的名字，逐一销毁</p>
</li>
<li>
<p>自定义 <code>scope bean</code> 的销毁在作用域对象生命周期结束时</p>
</li>
<li>
<p><code>prototype bean</code> 的销毁可以通过自己手动调用 <code>AutowireCapableBeanFactory.destroyBean</code> 方法执行销毁</p>
</li>
</ul>
</li>
<li>
<p>同一 <code>bean</code> 中不同形式销毁方法的调用次序</p>
<ul>
<li>
<p>优先后处理器销毁，即 <code>@PreDestroy</code></p>
</li>
<li>
<p>其次 <code>DisposableBean</code> 接口销毁</p>
</li>
<li>
<p>最后 <code>destroyMethod</code> 销毁（包括自定义名称，推断名称，<code>AutoCloseable</code> 接口 多选一）</p>
</li>
</ul>
</li>
</ul>

]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201081057917.png" type="image/png"/>
    </item>
    <item>
      <title>虚拟机</title>
      <link>https:/cloaks.cn/blogs/interview/%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/interview/%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <source url="https:/cloaks.cn/rss.xml">虚拟机</source>
      <content:encoded><![CDATA[<h1 id="虚拟机"> 虚拟机</h1>
<h2 id="jvm-内存结构"> JVM 内存结构</h2>
<h3 id="要求"> 要求</h3>
<ul>
<li>掌握 JVM 内存结构划分</li>
<li>尤其要知道方法区、永久代、元空间的关系</li>
</ul>
<h3 id="结合一段-java-代码的执行理解内存划分"> 结合一段 java 代码的执行理解内存划分</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071119700.png" alt="" /></p>
<ul>
<li>执行 javac 命令编译源代码为字节码</li>
<li>执行 java 命令
<ol>
<li>创建 JVM，调用类加载子系统加载 class，将类的信息存入<strong>方法区</strong></li>
<li>创建 main 线程，使用的内存区域是 <strong>JVM 虚拟机栈</strong>，开始执行 main 方法代码</li>
<li>如果遇到了未见过的类，会继续触发类加载过程，同样会存入<strong>方法区</strong></li>
<li>需要创建对象，会使用<strong>堆</strong>内存来存储对象</li>
<li>不再使用的对象，会由<strong>垃圾回收器</strong>在内存不足时回收其内存</li>
<li>调用方法时，方法内的局部变量、方法参数所使用的是  <strong>JVM 虚拟机栈</strong>中的栈帧内存</li>
<li>调用方法时，先要到<strong>方法区</strong>获得到该方法的字节码指令，由<strong>解释器</strong>将字节码指令解释为机器码执行</li>
<li>调用方法时，会将要执行的指令行号读到<strong>程序计数器</strong>，这样当发生了线程切换，恢复时就可以从中断的位置继续</li>
<li>对于非 java 实现的方法调用，使用内存称为<strong>本地方法栈</strong>（见说明）</li>
<li>对于热点方法调用，或者频繁的循环代码，由 <strong>JIT 即时编译器</strong>将这些代码编译成机器码缓存，提高执行性能</li>
</ol>
</li>
</ul>
<p>说明</p>
<ul>
<li>加粗字体代表了 JVM 虚拟机组件</li>
<li>对于 Oracle 的 Hotspot 虚拟机实现，不区分虚拟机栈和本地方法栈</li>
</ul>
<h3 id="会发生内存溢出的区域"> 会发生内存溢出的区域</h3>
<ul>
<li>不会出现内存溢出的区域 – 程序计数器</li>
<li>出现 OutOfMemoryError 的情况
<ul>
<li>堆内存耗尽 – 对象越来越多，又一直在使用，不能被垃圾回收</li>
<li>方法区内存耗尽 – 加载的类越来越多，很多框架都会在运行期间动态产生新的类</li>
<li>虚拟机栈累积 – 每个线程最多会占用 1 M 内存，线程个数越来越多，而又长时间运行不销毁时</li>
</ul>
</li>
<li>出现 StackOverflowError 的区域
<ul>
<li>JVM 虚拟机栈，原因有方法递归调用未正确结束、反序列化 json 时循环引用</li>
</ul>
</li>
</ul>
<h3 id="方法区、永久代、元空间"> 方法区、永久代、元空间</h3>
<ul>
<li><strong>方法区</strong>是 JVM 规范中定义的一块内存区域，用来存储类元数据、方法字节码、即时编译器需要的信息等</li>
<li><strong>永久代</strong>是 Hotspot 虚拟机对 JVM 规范的实现（1.8 之前）</li>
<li><strong>元空间</strong>是 Hotspot 虚拟机对 JVM 规范的另一种实现（1.8 以后），使用本地内存作为这些信息的存储空间</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071119658.png" alt="" /></p>
<p>从这张图学到三点</p>
<ul>
<li>当第一次用到某个类是，由类加载器将 class 文件的类元信息读入，并存储于元空间</li>
<li>X，Y 的类元信息是存储于元空间中，无法直接访问</li>
<li>可以用 X.class，Y.class 间接访问类元信息，它们俩属于 java 对象，我们的代码中可以使用</li>
</ul>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071119588.png" alt="" /></p>
<p>从这张图可以学到</p>
<ul>
<li>堆内存中：当一个<strong>类加载器对象</strong>，这个类加载器对象加载的所有<strong>类对象</strong>，这些类对象对应的所有<strong>实例对象</strong>都没人引用时，GC 时就会对它们占用的对内存进行释放</li>
<li>元空间中：内存释放<strong>以类加载器为单位</strong>，当堆中类加载器内存释放时，对应的元空间中的类元信息也会释放</li>
</ul>
<h2 id="jvm-内存参数"> JVM 内存参数</h2>
<h3 id="要求-2"> 要求</h3>
<ul>
<li>熟悉常见的 JVM 参数，尤其和大小相关的</li>
</ul>
<h3 id="堆内存-按大小设置"> 堆内存，按大小设置</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071127067.png" alt="" /></p>
<p>解释：</p>
<ul>
<li>-Xms 最小堆内存（包括新生代和老年代）</li>
<li>-Xmx 最大对内存（包括新生代和老年代）</li>
<li>通常建议将 -Xms 与 -Xmx 设置为大小相等，即不需要保留内存，不需要从小到大增长，这样性能较好</li>
<li>-XX:NewSize 与 -XX:MaxNewSize 设置新生代的最小与最大值，但一般不建议设置，由 JVM 自己控制</li>
<li>-Xmn 设置新生代大小，相当于同时设置了 -XX:NewSize 与 -XX:MaxNewSize 并且取值相等</li>
<li>保留是指，一开始不会占用那么多内存，随着使用内存越来越多，会逐步使用这部分保留内存。下同</li>
</ul>
<h3 id="堆内存-按比例设置"> 堆内存，按比例设置</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071127868.png" alt="" /></p>
<p>解释：</p>
<ul>
<li>-XX:NewRatio=2:1 表示老年代占两份，新生代占一份</li>
<li>-XX:SurvivorRatio=4:1 表示新生代分成六份，伊甸园占四份，from 和 to 各占一份</li>
</ul>
<h3 id="元空间内存设置"> 元空间内存设置</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071128535.png" alt="" /></p>
<p>解释：</p>
<ul>
<li>class space 存储类的基本信息，最大值受 -XX:CompressedClassSpaceSize 控制</li>
<li>non-class space 存储除类的基本信息以外的其它信息（如方法字节码、注解等）</li>
<li>class space 和 non-class space 总大小受 -XX:MaxMetaspaceSize 控制</li>
</ul>
<p>注意：</p>
<ul>
<li>这里 -XX:CompressedClassSpaceSize 这段空间还与是否开启了指针压缩有关，这里暂不深入展开，可以简单认为指针压缩默认开启</li>
</ul>
<h3 id="代码缓存内存设置"> 代码缓存内存设置</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071128424.png" alt="" /></p>
<p>解释：</p>
<ul>
<li>如果 -XX:ReservedCodeCacheSize &lt; 240m，所有优化机器代码不加区分存在一起</li>
<li>否则，分成三个区域（图中笔误 mthod 拼写错误，少一个 e）
<ul>
<li>non-nmethods - JVM 自己用的代码</li>
<li>profiled nmethods - 部分优化的机器码</li>
<li>non-profiled nmethods - 完全优化的机器码</li>
</ul>
</li>
</ul>
<h3 id="线程内存设置"> 线程内存设置</h3>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071128173.png" alt="" /></p>
<blockquote>
<p><em><strong>官方参考文档</strong></em></p>
<ul>
<li>https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE</li>
</ul>
</blockquote>
<h2 id="jvm-垃圾回收"> JVM 垃圾回收</h2>
<h3 id="要求-3"> 要求</h3>
<ul>
<li>掌握垃圾回收算法</li>
<li>掌握分代回收思想</li>
<li>理解三色标记及漏标处理</li>
<li>了解常见垃圾回收器</li>
</ul>
<h3 id="三种垃圾回收算法"> 三种垃圾回收算法</h3>
<p>标记清除法</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071128360.png" alt="" /></p>
<p>解释：</p>
<ol>
<li>找到 GC Root 对象，即那些一定不会被回收的对象，如正执行方法内局部变量引用的对象、静态变量引用的对象</li>
<li>标记阶段：沿着 GC Root 对象的引用链找，直接或间接引用到的对象加上标记</li>
<li>清除阶段：释放未加标记的对象占用的内存</li>
</ol>
<p>要点：</p>
<ul>
<li>标记速度与存活对象线性关系</li>
<li>清除速度与内存大小线性关系</li>
<li>缺点是会产生内存碎片</li>
</ul>
<p>标记整理法</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071129695.png" alt="" /></p>
<p>解释：</p>
<ol>
<li>前面的标记阶段、清理阶段与标记清除法类似</li>
<li>多了一步整理的动作，将存活对象向一端移动，可以避免内存碎片产生</li>
</ol>
<p>特点：</p>
<ul>
<li>
<p>标记速度与存活对象线性关系</p>
</li>
<li>
<p>清除与整理速度与内存大小成线性关系</p>
</li>
<li>
<p>缺点是性能上较慢</p>
</li>
</ul>
<p>标记复制法</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071129958.png" alt="" /></p>
<p>解释：</p>
<ol>
<li>将整个内存分成两个大小相等的区域，from 和 to，其中 to 总是处于空闲，from 存储新创建的对象</li>
<li>标记阶段与前面的算法类似</li>
<li>在找出存活对象后，会将它们从 from 复制到 to 区域，复制的过程中自然完成了碎片整理</li>
<li>复制完成后，交换 from 和 to 的位置即可</li>
</ol>
<p>特点：</p>
<ul>
<li>标记与复制速度与存活对象成线性关系</li>
<li>缺点是会占用成倍的空间</li>
</ul>
<h3 id="gc-与分代回收算法"> GC 与分代回收算法</h3>
<p>GC 的目的在于实现无用对象内存自动释放，减少内存碎片、加快分配速度</p>
<p>GC 要点：</p>
<ul>
<li>回收区域是<strong>堆内存</strong>，不包括虚拟机栈</li>
<li>判断无用对象，使用<strong>可达性分析算法</strong>，<strong>三色标记法</strong>标记存活对象，回收未标记对象</li>
<li>GC 具体的实现称为<strong>垃圾回收器</strong></li>
<li>GC 大都采用了<strong>分代回收思想</strong>
<ul>
<li>理论依据是大部分对象朝生夕灭，用完立刻就可以回收，另有少部分对象会长时间存活，每次很难回收</li>
<li>根据这两类对象的特性将回收区域分为<strong>新生代</strong>和<strong>老年代</strong>，新生代采用标记复制法、老年代一般采用标记整理法</li>
</ul>
</li>
<li>根据 GC 的规模可以分成 <strong>Minor GC</strong>，<strong>Mixed GC</strong>，<strong>Full GC</strong></li>
</ul>
<h3 id="分代回收"> 分代回收</h3>
<ol>
<li>伊甸园 eden，最初对象都分配到这里，与幸存区 survivor（分成 from 和 to）合称新生代，</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071129240.png" alt="" /></p>
<ol start="2">
<li>当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071129589.png" alt="" /></p>
<ol start="3">
<li>将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071130072.png" alt="" /></p>
<ol start="4">
<li>将 from 和 to 交换位置</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071130845.png" alt="" /></p>
<ol start="5">
<li>经过一段时间后伊甸园的内存又出现不足</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071130915.png" alt="" /></p>
<ol start="6">
<li>标记伊甸园与 from（现阶段没有）的存活对象</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071130701.png" alt="" /></p>
<ol start="7">
<li>将存活对象采用复制算法复制到 to 中</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071130562.png" alt="" /></p>
<ol start="8">
<li>复制完毕后，伊甸园和 from 内存都得到释放</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071131113.png" alt="" /></p>
<ol start="9">
<li>将 from 和 to 交换位置</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071131342.png" alt="" /></p>
<ol start="10">
<li>老年代 old，当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）</li>
</ol>
<h3 id="gc-规模"> GC 规模</h3>
<ul>
<li>
<p>Minor GC 发生在新生代的垃圾回收，暂停时间短</p>
</li>
<li>
<p>Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有</p>
</li>
<li>
<p>Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，<strong>应尽力避免</strong></p>
</li>
</ul>
<h3 id="三色标记"> 三色标记</h3>
<p>即用三种颜色记录对象的标记状态</p>
<ul>
<li>黑色 – 已标记</li>
<li>灰色 – 标记中</li>
<li>白色 – 还未标记</li>
</ul>
<ol>
<li>起始的三个对象还未处理完成，用灰色表示</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071131396.png" style="zoom:50%;" />
<ol start="2">
<li>该对象的引用已经处理完成，用黑色表示，黑色引用的对象变为灰色</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071132663.png" style="zoom:50%;" />
<ol start="3">
<li>依次类推</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071133347.png" style="zoom:50%;"/>
<ol start="4">
<li>沿着引用链都标记了一遍</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071133347.png" style="zoom:50%;"/>
<ol start="5">
<li>最后为标记的白色对象，即为垃圾</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071715328.png" style="zoom:50%;"/>
<h3 id="并发漏标问题"> 并发漏标问题</h3>
<p>比较先进的垃圾回收器都支持<strong>并发标记</strong>，即在标记过程中，用户线程仍然能工作。但这样带来一个新的问题，如果用户线程修改了对象引用，那么就存在漏标问题。例如：</p>
<ol>
<li>如图所示标记工作尚未完成</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071715889.png" style="zoom:50%;"/>
<ol start="2">
<li>用户线程同时在工作，断开了第一层 3、4 两个对象之间的引用，这时对于正在处理 3 号对象的垃圾回收线程来讲，它会将 4 号对象当做是白色垃圾</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071716383.png" style="zoom:50%;"/>
<ol start="3">
<li>但如果其他用户线程又建立了 2、4 两个对象的引用，这时因为 2 号对象是黑色已处理对象了，因此垃圾回收线程不会察觉到这个引用关系的变化，从而产生了漏标</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071716978.png" style="zoom:50%;"/>
<ol start="4">
<li>如果用户线程让黑色对象引用了一个新增对象，一样会存在漏标问题</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071717425.png" style="zoom:50%;"/>
<p>因此对于<strong>并发标记</strong>而言，必须解决漏标问题，也就是要记录标记过程中的变化。有两种解决方法：</p>
<ol>
<li>Incremental Update 增量更新法，CMS 垃圾回收器采用
<ul>
<li>思路是拦截每次赋值动作，只要赋值发生，被赋值的对象就会被记录下来，在重新标记阶段再确认一遍</li>
</ul>
</li>
<li>Snapshot At The Beginning，SATB 原始快照法，G1 垃圾回收器采用
<ul>
<li>思路也是拦截每次赋值动作，不过记录的对象不同，也需要在重新标记阶段对这些对象二次处理</li>
<li>新加对象会被记录</li>
<li>被删除引用关系的对象也被记录</li>
</ul>
</li>
</ol>
<h3 id="垃圾回收器-parallel-gc"> 垃圾回收器 - Parallel GC</h3>
<ul>
<li>
<p>eden 内存不足发生 Minor GC，采用标记复制算法，需要暂停用户线程</p>
</li>
<li>
<p>old 内存不足发生 Full GC，采用标记整理算法，需要暂停用户线程</p>
</li>
<li>
<p><strong>注重吞吐量</strong></p>
</li>
</ul>
<h3 id="垃圾回收器-concurrentmarksweep-gc"> 垃圾回收器 - ConcurrentMarkSweep GC</h3>
<ul>
<li>
<p>它是工作在 old 老年代，支持<strong>并发标记</strong>的一款回收器，采用<strong>并发清除</strong>算法</p>
<ul>
<li>并发标记时不需暂停用户线程</li>
<li>重新标记时仍需暂停用户线程</li>
</ul>
</li>
<li>
<p>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</p>
</li>
<li>
<p><strong>注重响应时间</strong></p>
</li>
</ul>
<h3 id="垃圾回收器-g1-gc"> 垃圾回收器 - G1 GC</h3>
<ul>
<li><strong>响应时间与吞吐量兼顾</strong></li>
<li>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</li>
<li>分成三个阶段：新生代回收、并发标记、混合收集</li>
<li>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</li>
</ul>
<h3 id="g1-回收阶段-新生代回收"> G1 回收阶段 - 新生代回收</h3>
<ol>
<li>初始时，所有区域都处于空闲状态</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071718179.png" style="zoom:50%;"/>
<ol start="2">
<li>创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071718995.png" style="zoom:50%;"/>
<ol start="3">
<li>当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071719119.png" style="zoom:50%;"/>
<ol start="4">
<li>复制完成，将之前的伊甸园内存释放</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071719513.png" style="zoom:50%;"/>
<ol start="5">
<li>随着时间流逝，伊甸园的内存又有不足</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071720938.png" style="zoom:50%;"/>
<ol start="6">
<li>将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071723542.png" style="zoom:50%;"/>
<ol start="7">
<li>释放伊甸园以及之前幸存区的内存</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071723089.png" style="zoom:50%;"/>
<h3 id="g1-回收阶段-并发标记与混合收集"> G1 回收阶段 - 并发标记与混合收集</h3>
<ol>
<li>当老年代占用内存超过阈值后，触发并发标记，这时无需暂停用户线程</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071724516.png" style="zoom:50%;"/>
<ol start="2">
<li>并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据<strong>暂停时间目标</strong>优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071732366.png" style="zoom:50%;"/>
<ol start="3">
<li>混合收集阶段中，参与复制的有 eden、survivor、old，下图显示了伊甸园和幸存区的存活对象复制</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071724341.png" style="zoom:50%;"/>
<ol start="4">
<li>下图显示了老年代和幸存区晋升的存活对象的复制</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071725727.png" style="zoom:50%;"/>
<ol start="5">
<li>复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071725261.png" style="zoom:50%;"/>
<h2 id="内存溢出"> 内存溢出</h2>
<h3 id="要求-4"> 要求</h3>
<ul>
<li>能够说出几种典型的导致内存溢出的情况</li>
</ul>
<h3 id="典型情况"> 典型情况</h3>
<ul>
<li>误用线程池导致的内存溢出
<ul>
<li>参考 day03.TestOomThreadPool</li>
</ul>
</li>
<li>查询数据量太大导致的内存溢出
<ul>
<li>参考 day03.TestOomTooManyObject</li>
</ul>
</li>
<li>动态生成类导致的内存溢出
<ul>
<li>参考 day03.TestOomTooManyClass</li>
</ul>
</li>
</ul>
<h2 id="类加载"> 类加载</h2>
<h3 id="要求-5"> 要求</h3>
<ul>
<li>掌握类加载阶段</li>
<li>掌握类加载器</li>
<li>理解双亲委派机制</li>
</ul>
<h3 id="类加载过程的三个阶段"> 类加载过程的三个阶段</h3>
<ol>
<li>
<p>加载</p>
<ol>
<li>
<p>将类的字节码载入方法区，并创建类.class 对象</p>
</li>
<li>
<p>如果此类的父类没有加载，先加载父类</p>
</li>
<li>
<p>加载是懒惰执行</p>
</li>
</ol>
</li>
<li>
<p>链接</p>
<ol>
<li>验证 – 验证类是否符合 Class 规范，合法性、安全性检查</li>
<li>准备 – 为 static 变量分配空间，设置默认值</li>
<li>解析 – 将常量池的符号引用解析为直接引用</li>
</ol>
</li>
<li>
<p>初始化</p>
<ol>
<li>静态代码块、static 修饰的变量赋值、static final 修饰的引用类型变量赋值，会被合并成一个 <code>&lt;cinit&gt;</code> 方法，在初始化时被调用</li>
<li>static final 修饰的基本类型变量赋值，在链接阶段就已完成</li>
<li>初始化是懒惰执行</li>
</ol>
</li>
</ol>
<blockquote>
<p><em><strong>验证手段</strong></em></p>
<ul>
<li>
<p>使用 jps 查看进程号</p>
</li>
<li>
<p>使用 jhsdb 调试，执行命令 <code>jhsdb.exe hsdb</code> 打开它的图形界面</p>
<ul>
<li>Class Browser 可以查看当前 jvm 中加载了哪些类</li>
<li>控制台的 universe 命令查看堆内存范围</li>
<li>控制台的 g1regiondetails 命令查看 region 详情</li>
<li><code>scanoops 起始地址 结束地址 对象类型</code> 可以根据类型查找某个区间内的对象地址</li>
<li>控制台的 <code>inspect 地址</code> 指令能够查看这个地址对应的对象详情</li>
</ul>
</li>
<li>
<p>使用 javap 命令可以查看 class 字节码
<em><strong>代码说明</strong></em></p>
</li>
<li>
<p>day03.loader.TestLazy - 验证类的加载是懒惰的，用到时才触发类加载</p>
</li>
<li>
<p>day03.loader.TestFinal - 验证使用 final 修饰的变量不会触发类加载</p>
</li>
</ul>
</blockquote>
<h3 id="jdk-8-的类加载器"> jdk 8 的类加载器</h3>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>加载哪的类</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Bootstrap ClassLoader</td>
<td>JAVA_HOME/jre/lib</td>
<td>无法直接访问</td>
</tr>
<tr>
<td>Extension ClassLoader</td>
<td>JAVA_HOME/jre/lib/ext</td>
<td>上级为 Bootstrap，显示为  null</td>
</tr>
<tr>
<td>Application ClassLoader</td>
<td>classpath</td>
<td>上级为 Extension</td>
</tr>
<tr>
<td>自定义类加载器</td>
<td>自定义</td>
<td>上级为 Application</td>
</tr>
</tbody>
</table>
<h3 id="双亲委派机制"> 双亲委派机制</h3>
<p>所谓的双亲委派，就是指优先委派上级类加载器进行加载，如果上级类加载器</p>
<ul>
<li>能找到这个类，由上级加载，加载后该类也对下级加载器可见</li>
<li>找不到这个类，则下级类加载器才有资格执行加载</li>
</ul>
<p>双亲委派的目的有两点</p>
<ol>
<li>
<p>让上级类加载器中的类对下级共享（反之不行），即能让你的类能依赖到 jdk 提供的核心类</p>
</li>
<li>
<p>让类的加载有优先次序，保证核心类优先加载</p>
</li>
</ol>
<h3 id="对双亲委派的误解"> 对双亲委派的误解</h3>
<p>下面面试题的回答是错误的</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071735306.png" alt="" /></p>
<p>错在哪了？</p>
<ul>
<li>
<p>自己编写类加载器就能加载一个假冒的 java.lang.System 吗? 答案是不行。</p>
</li>
<li>
<p>假设你自己的类加载器用双亲委派，那么优先由启动类加载器加载真正的 java.lang.System，自然不会加载假冒的</p>
</li>
<li>
<p>假设你自己的类加载器不用双亲委派，那么你的类加载器加载假冒的 java.lang.System 时，它需要先加载父类 java.lang.Object，而你没有用委派，找不到 java.lang.Object 所以加载会失败</p>
</li>
<li>
<p><strong>以上也仅仅是假设</strong>。事实上操作你就会发现，自定义类加载器加载以 java. 打头的类时，会抛安全异常，在 jdk9 以上版本这些特殊包名都与模块进行了绑定，更连编译都过不了</p>
</li>
</ul>
<blockquote>
<p><em><strong>代码说明</strong></em></p>
<ul>
<li>day03.loader.TestJdk9ClassLoader - 演示类加载器与模块的绑定关系</li>
</ul>
</blockquote>
<h2 id="四种引用"> 四种引用</h2>
<h3 id="要求-6"> 要求</h3>
<ul>
<li>掌握四种引用</li>
</ul>
<h3 id="强引用"> 强引用</h3>
<ol>
<li>
<p>普通变量赋值即为强引用，如 A a = new A();</p>
</li>
<li>
<p>通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收</p>
</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071727417.png" style="zoom:80%;"/>
<h3 id="软引用-softreference"> 软引用（SoftReference）</h3>
<ol>
<li>
<p>例如：SoftReference a = new SoftReference(new A());</p>
</li>
<li>
<p>如果仅有软引用该对象时，首次垃圾回收不会回收该对象，如果内存仍不足，再次回收时才会释放对象</p>
</li>
<li>
<p>软引用自身需要配合引用队列来释放</p>
</li>
<li>
<p>典型例子是反射数据</p>
</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071728914.png" style="zoom:80%;"/>
<h3 id="弱引用-weakreference"> 弱引用（WeakReference）</h3>
<ol>
<li>
<p>例如：WeakReference a = new WeakReference(new A());</p>
</li>
<li>
<p>如果仅有弱引用引用该对象时，只要发生垃圾回收，就会释放该对象</p>
</li>
<li>
<p>弱引用自身需要配合引用队列来释放</p>
</li>
<li>
<p>典型例子是 ThreadLocalMap 中的 Entry 对象</p>
</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071728727.png" style="zoom:50%;"/>
<h3 id="虚引用-phantomreference"> 虚引用（PhantomReference）</h3>
<ol>
<li>
<p>例如： PhantomReference a = new PhantomReference(new A(), referenceQueue);</p>
</li>
<li>
<p>必须配合引用队列一起使用，当虚引用所引用的对象被回收时，由 Reference Handler 线程将虚引用对象入队，这样就可以知道哪些对象被回收，从而对它们关联的资源做进一步处理</p>
</li>
<li>
<p>典型例子是 Cleaner 释放 DirectByteBuffer 关联的直接内存</p>
</li>
</ol>
<img src="https://gitee.com/biliit/pic-go/raw/master/202201071729725.png" style="zoom:50%;"/>
<blockquote>
<p><em><strong>代码说明</strong></em></p>
<ul>
<li>day03.reference.TestPhantomReference - 演示虚引用的基本用法</li>
<li>day03.reference.TestWeakReference - 模拟 ThreadLocalMap, 采用引用队列释放 entry 内存</li>
</ul>
</blockquote>
<h2 id="finalize"> finalize</h2>
<h3 id="要求-7"> 要求</h3>
<ul>
<li>掌握 finalize 的工作原理与缺点</li>
</ul>
<h3 id="finalize-2"> finalize</h3>
<ul>
<li>它是 Object 中的一个方法，如果子类重写它，垃圾回收时此方法会被调用，可以在其中进行资源释放和清理工作</li>
<li>将资源释放和清理放在 finalize 方法中非常不好，非常影响性能，严重时甚至会引起 OOM，从 Java9 开始就被标注为 @Deprecated，不建议被使用了</li>
</ul>
<h3 id="finalize-原理"> finalize 原理</h3>
<ol>
<li>对 finalize 方法进行处理的核心逻辑位于 java.lang.ref.Finalizer 类中，它包含了名为 unfinalized 的静态变量（双向链表结构），Finalizer 也可被视为另一种引用对象（地位与软、弱、虚相当，只是不对外，无法直接使用）</li>
<li>当重写了 finalize 方法的对象，在构造方法调用之时，JVM 都会将其包装成一个 Finalizer 对象，并加入 unfinalized 链表中</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071730959.png" alt="" /></p>
<ol start="3">
<li>Finalizer 类中还有另一个重要的静态变量，即 ReferenceQueue 引用队列，刚开始它是空的。当狗对象可以被当作垃圾回收时，就会把这些狗对象对应的 Finalizer 对象加入此引用队列</li>
<li>但此时 Dog 对象还没法被立刻回收，因为 unfinalized -&gt; Finalizer 这一引用链还在引用它嘛，为的是【先别着急回收啊，等我调完 finalize 方法，再回收】</li>
<li>FinalizerThread 线程会从 ReferenceQueue 中逐一取出每个 Finalizer 对象，把它们从链表断开并真正调用 finallize 方法</li>
</ol>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201071730793.png" alt="" /></p>
<ol start="6">
<li>由于整个 Finalizer 对象已经从 unfinalized 链表中断开，这样没谁能引用到它和狗对象，所以下次 gc 时就被回收了</li>
</ol>
<h3 id="finalize-缺点"> finalize 缺点</h3>
<ul>
<li>无法保证资源释放：FinalizerThread 是守护线程，代码很有可能没来得及执行完，线程就结束了</li>
<li>无法判断是否发生错误：执行 finalize 方法时，会吞掉任意异常（Throwable）</li>
<li>内存释放不及时：重写了 finalize 方法的对象在第一次被 gc 时，并不能及时释放它占用的内存，因为要等着 FinalizerThread 调用完 finalize，把它从 unfinalized 队列移除后，第二次 gc 时才能真正释放内存</li>
<li>有的文章提到【Finalizer 线程会和我们的主线程进行竞争，不过由于它的优先级较低，获取到的CPU时间较少，因此它永远也赶不上主线程的步伐】这个显然是错误的，FinalizerThread 的优先级较普通线程更高，原因应该是 finalize 串行执行慢等原因综合导致</li>
</ul>
<blockquote>
<p><em><strong>代码说明</strong></em></p>
<ul>
<li>day03.reference.TestFinalize - finalize 的测试代码</li>
</ul>
</blockquote>
]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201071119700.png" type="image/png"/>
    </item>
    <item>
      <title>LRU 算法 &amp;&amp; 爬台阶递归算法</title>
      <link>https:/cloaks.cn/blogs/lintcode/LRU/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/LRU/</guid>
      <source url="https:/cloaks.cn/rss.xml">LRU 算法 &amp;&amp; 爬台阶递归算法</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/134/" target="_blank" rel="noopener noreferrer">134</a><br>
描述：为最近最少使用（LRU）缓存策略设计一个数据结构，它应该支持以下操作：获取数据和写入数据。</p>
<ul>
<li>get(key) 获取数据：如果缓存中存在key，则获取其数据值（通常是正数），否则返回-1。</li>
<li>set(key, value) 写入数据：如果key还没有在缓存中，则设置或插入其数据值。当缓存达到上限，它应该在写入新数据之前删除最近最少使用的数据用来腾出空闲位置。</li>
</ul>
<p>最终, 你需要返回每次 get 的数据</p>
</blockquote>
<h2 id="算法描述"> 算法描述</h2>
<div><pre><code><span>/* 缓存容量为 2 */</span>
<span>LRUCache</span> cache <span>=</span> <span>new</span> <span>LRUCache</span><span>(</span><span>2</span><span>)</span><span>;</span>
<span>// 你可以把 cache 理解成一个队列</span>
<span>// 假设左边是队头，右边是队尾</span>
<span>// 最近使用的排在队头，久未使用的排在队尾</span>
<span>// 圆括号表示键值对 (key, val)</span>

cache<span>.</span><span>set</span><span>(</span><span>1</span><span>,</span> <span>1</span><span>)</span><span>;</span>
<span>// cache = [(1, 1)]</span>
cache<span>.</span><span>set</span><span>(</span><span>2</span><span>,</span> <span>2</span><span>)</span><span>;</span>
<span>// cache = [(2, 2), (1, 1)]</span>
cache<span>.</span><span>get</span><span>(</span><span>1</span><span>)</span><span>;</span>       <span>// 返回 1</span>
<span>// cache = [(1, 1), (2, 2)]</span>
<span>// 解释：因为最近访问了键 1，所以提前至队头</span>
<span>// 返回键 1 对应的值 1</span>
cache<span>.</span><span>set</span><span>(</span><span>3</span><span>,</span> <span>3</span><span>)</span><span>;</span>
<span>// cache = [(3, 3), (1, 1)]</span>
<span>// 解释：缓存容量已满，需要删除内容空出位置</span>
<span>// 优先删除久未使用的数据，也就是队尾的数据</span>
<span>// 然后把新的数据插入队头</span>
cache<span>.</span><span>get</span><span>(</span><span>2</span><span>)</span><span>;</span>       <span>// 返回 -1 (未找到)</span>
<span>// cache = [(3, 3), (1, 1)]</span>
<span>// 解释：cache 中不存在键为 2 的数据</span>
cache<span>.</span><span>set</span><span>(</span><span>1</span><span>,</span> <span>4</span><span>)</span><span>;</span>    
<span>// cache = [(1, 4), (3, 3)]</span>
<span>// 解释：键 1 已存在，把原始值 1 覆盖为 4</span>
<span>// 不要忘了也要将键值对提前到队头</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="算法设计"> 算法设计</h2>
<p>分析上面的操作过程，要让 set 和 get 方法的时间复杂度为 O(1)，我们可以总结出 cache 这个数据结构必要的条件：查找快，插入快，删除快，有顺序之分。</p>
<p>因为显然 cache 必须有顺序之分，以区分最近使用的和久未使用的数据；而且我们要在 cache 中查找键是否已存在；如果容量满了要删除最后一个数据；每次访问还要把数据插入到队头。</p>
<p>那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表。</p>
<p>LRU 缓存算法的核心数据结构就是哈希链表，双向链表和哈希表的结合体。这个数据结构长这样：</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201131455479.png" alt="" /></p>
<blockquote>
<p>双链表可以保证对链表操作的时间复杂度为 <code>O(1)</code></p>
</blockquote>
<h2 id="算法实现"> 算法实现</h2>
<p>双链表结点类型</p>
<div><pre><code><span>class</span> <span>Node</span> <span>{</span>
    <span>public</span> <span>int</span> key<span>,</span> val<span>;</span>
    <span>public</span> <span>Node</span> next<span>,</span> prev<span>;</span>
    <span>public</span> <span>Node</span><span>(</span><span>int</span> k<span>,</span> <span>int</span> v<span>)</span> <span>{</span>
        <span>this</span><span>.</span>key <span>=</span> k<span>;</span>
        <span>this</span><span>.</span>val <span>=</span> v<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>双链表的基本 <code>API</code></p>
<div><pre><code><span>class</span> <span>DoubleList</span> <span>{</span>  
    <span>// 在链表头部添加节点 x</span>
    <span>public</span> <span>void</span> <span>addFirst</span><span>(</span><span>Node</span> x<span>)</span><span>;</span>

    <span>// 删除链表中的 x 节点（x 一定存在）</span>
    <span>public</span> <span>void</span> <span>remove</span><span>(</span><span>Node</span> x<span>)</span><span>;</span>

    <span>// 删除链表中最后一个节点，并返回该节点</span>
    <span>public</span> <span>Node</span> <span>removeLast</span><span>(</span><span>)</span><span>;</span>

    <span>// 返回链表长度</span>
    <span>public</span> <span>int</span> <span>size</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>在 <code>LRU</code> 算法中把双链表和 <code>HashMap</code> 结合起来</p>
<p><strong>伪代码</strong></p>
<div><pre><code><span>HashMap</span><span><span>&lt;</span><span>Interger</span><span>,</span> <span>Node</span><span>></span></span> map<span>;</span>

<span>DoubleList</span> cache<span>;</span>

<span>int</span> <span>get</span><span>(</span><span>int</span> key<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key 不存在<span>)</span> <span>{</span>
        <span>return</span> <span>-</span><span>1</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>// 将数据 (key, val) 提到表头；</span>
        <span>return</span> val<span>;</span>
    <span>}</span>
<span>}</span>

<span>void</span> <span>put</span><span>(</span><span>int</span> key<span>,</span> <span>int</span> val<span>)</span> <span>{</span>
    <span>Node</span> x <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>
    <span>if</span> <span>(</span>key 已存在<span>)</span> <span>{</span>
        <span>// 把旧的数据删除</span>
        <span>// 将新的结点 x 插入到开头</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>if</span> <span>(</span>cache 已满<span>)</span> <span>{</span>
            <span>// 删除链表的最后一个数据腾位置</span>
            <span>// 删除 map 中映射到该数据的键</span>
        <span>}</span>
        <span>// 将新节点 x 插入到表头</span>
        <span>// map 中新建 key 对新节点 x 的映射</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p><strong>将上述的逻辑，翻译成代码</strong></p>
<div><pre><code><span>class</span> <span>LRUCache</span> <span>{</span>
    <span>// key -> Node(key, val)</span>
    <span>private</span> <span>HashMap</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Node</span><span>></span></span> map<span>;</span>
    <span>// Node(k1, v1) &lt;-> Node(k2, v2)</span>
    <span>private</span> <span>DoubleList</span> cache<span>;</span>
    <span>// 缓存容量</span>
    <span>private</span> <span>int</span> capacity<span>;</span>

    <span>public</span> <span>LRUCache</span><span>(</span><span>int</span> capacity<span>)</span> <span>{</span>
        <span>this</span><span>.</span>capacity <span>=</span> capacity<span>;</span>
        map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        cache <span>=</span> <span>new</span> <span>DoubleList</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>int</span> <span>get</span><span>(</span><span>int</span> key<span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span>map<span>.</span><span>containsKey</span><span>(</span>key<span>)</span><span>)</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>int</span> val <span>=</span> map<span>.</span><span>get</span><span>(</span>key<span>)</span><span>.</span>val<span>;</span>
        <span>set</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>
        <span>return</span> val<span>;</span>
    <span>}</span>

    <span>public</span> <span>int</span> <span>set</span><span>(</span><span>int</span> key<span>,</span> <span>int</span> val<span>)</span> <span>{</span>
        <span>// 先初始化节点</span>
        <span>Node</span> x <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>,</span> val<span>)</span><span>;</span>

        <span>if</span> <span>(</span>map<span>.</span><span>containsKey</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
            <span>// 删除旧节点， 新节点插到头部</span>
            cache<span>.</span><span>remove</span><span>(</span>map<span>.</span><span>get</span><span>(</span>key<span>)</span><span>)</span><span>;</span>
            cache<span>.</span><span>addFirst</span><span>(</span>x<span>)</span><span>;</span>
            <span>// 更新 map 中对应的数据</span>
            map<span>.</span><span>set</span><span>(</span>key<span>,</span> x<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
            <span>if</span> <span>(</span>cap <span>==</span> cache<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                <span>// 删除链表最后的一个数据</span>
                <span>Node</span> last <span>=</span> cache<span>.</span><span>removeLast</span><span>(</span><span>)</span><span>;</span>
                map<span>.</span><span>remove</span><span>(</span>last<span>.</span>key<span>)</span><span>;</span>
            <span>}</span>
            <span>// 直接添加到头部</span>
            chache<span>.</span><span>addFirst</span><span>(</span>x<span>)</span><span>;</span>
            map<span>.</span><span>put</span><span>(</span>key<span>,</span> x<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h2 id="爬台阶递归算法"> 爬台阶递归算法</h2>
<h3 id="算法设计-2"> 算法设计</h3>
<p>很长时间没有接触递归了，昨天突然遇到思维一下没有转过来😭</p>
<ol>
<li>
<p>n=0 和 n=1 的时候 并没有其他可选择的，所以可以得出f(0)=0;f(1)=1;</p>
</li>
<li>
<p>n&gt;=2时情况就变复杂起来，但是这个时候可以操作的步骤也就2种，也就是走1步(n-1)与走2步(n-2)。所以可以得到f(n)=f(n-1)+f(n-2);从当前状态转为下一状态的通用算法既可。</p>
</li>
<li>
<p>验证，使用2以上的数字验证几次。</p>
</li>
</ol>
<h3 id="算法实现-2"> 算法实现</h3>
<p>使用递归的方法，本质上是穷举所有可以实现的</p>
<div><pre><code><span>public</span> <span>static</span> <span>int</span> <span>f</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>if</span><span>(</span>n<span>&lt;=</span><span>2</span><span>)</span> <span>return</span> n<span>;</span>
    <span>int</span> x <span>=</span> <span>f</span><span>(</span>n<span>-</span><span>1</span><span>)</span><span>+</span><span>f</span><span>(</span>n<span>-</span><span>2</span><span>)</span><span>;</span>
    <span>return</span> x<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>针对这个问题我使用循环的方法实现了这个过程，这种方法相较于递归效率更高没有冗余计算</p>
<div><pre><code><span>public</span> <span>static</span> <span>int</span> <span>f</span><span>(</span><span>int</span> n<span>)</span><span>{</span>
    <span>if</span><span>(</span>n<span>&lt;=</span><span>2</span><span>)</span> <span>return</span> n<span>;</span>
    <span>int</span> first<span>=</span><span>1</span><span>,</span>second<span>=</span><span>2</span><span>;</span>
    <span>int</span> third<span>=</span><span>0</span><span>;</span>
    <span>for</span><span>(</span><span>int</span> i<span>=</span><span>3</span><span>;</span>i<span>&lt;=</span>n<span>;</span>i<span>++</span><span>)</span><span>{</span>
        third <span>=</span> first<span>+</span>second<span>;</span>
        first <span>=</span> second<span>;</span>
        second <span>=</span> third<span>;</span>
    <span>}</span>
    <span>return</span> third<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201131455479.png" type="image/png"/>
    </item>
    <item>
      <title>斐波那契数列</title>
      <link>https:/cloaks.cn/blogs/lintcode/fibonacci/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/fibonacci/</guid>
      <source url="https:/cloaks.cn/rss.xml">斐波那契数列</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/366/" target="_blank" rel="noopener noreferrer">366</a><br>
描述：查找斐波纳契数列中第 N 个数。<br>
所谓的斐波纳契数列是指：<br>
前2个数是 0 和 1 。<br>
第 i 个数是第 i-1 个数和第i-2 个数的和。<br>
斐波纳契数列的前10个数字是：<br>
0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...</p>
</blockquote>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param n: an integer
    @return: an ineger f(n)
    """</span>
    <span>def</span> <span>fibonacci</span><span>(</span>self<span>,</span> n<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> n <span>&lt;=</span> <span>2</span><span>:</span>
            <span>return</span> n <span>-</span> <span>1</span>
        
        <span>return</span> self<span>.</span>fibonacci<span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> self<span>.</span>fibonacci<span>(</span>n <span>-</span> <span>2</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>java</p>
<div><pre><code><span>// 循环</span>
<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param n: an integer
     * @return: an ineger f(n)
     */</span>
    <span>public</span> <span>int</span> <span>fibonacci</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>
        <span>int</span> a <span>=</span> <span>0</span><span>;</span>
        <span>int</span> b <span>=</span> <span>1</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>int</span> c <span>=</span> a <span>+</span> b<span>;</span>
            a <span>=</span> b<span>;</span>
            b <span>=</span> c<span>;</span>
        <span>}</span>
        <span>return</span> a<span>;</span>
    <span>}</span>
<span>}</span>
<span>// 递归</span>
<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param n: an integer
     * @return: an ineger f(n)
     */</span>
    <span>public</span> <span>int</span> <span>fibonacci</span><span>(</span><span>int</span> n<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>n <span>&lt;=</span> <span>2</span><span>)</span> <span>{</span>
            <span>return</span> n <span>-</span> <span>1</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>2</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>最长回文子串</title>
      <link>https:/cloaks.cn/blogs/lintcode/longestPalindrome/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/longestPalindrome/</guid>
      <source url="https:/cloaks.cn/rss.xml">最长回文子串</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/200/" target="_blank" rel="noopener noreferrer">200</a><br>
描述：给出一个字符串（假设长度最长为1000），求出它的最长回文子串，你可以假定只有一个满足条件的最长回文串。<br>
挑战：时间复杂度可为O(n2)，你能将其优化为O(n)吗</p>
</blockquote>
<h2 id="使用时间复杂度为o-n-3-的算法"> 使用时间复杂度为O(n^3)的算法</h2>
<p>java 实现</p>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
    <span>public</span> <span>String</span> <span>longestPalindrome</span><span>(</span><span>String</span> s<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>s <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>}</span>

        <span>for</span> <span>(</span><span>int</span> length <span>=</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span> length <span>></span> <span>0</span><span>;</span> length<span>--</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> start <span>=</span> <span>0</span><span>;</span> start <span>+</span> length <span>&lt;=</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span> start<span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span><span>isPalindrome</span><span>(</span>s<span>,</span> start<span>,</span> start <span>+</span> length <span>-</span> <span>1</span><span>)</span><span>)</span> <span>{</span>
                    <span>return</span> s<span>.</span><span>substring</span><span>(</span>start<span>,</span> start <span>+</span> length<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> <span>""</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>boolean</span> <span>isPalindrome</span><span>(</span><span>String</span> s<span>,</span> <span>int</span> left<span>,</span> <span>int</span> right<span>)</span> <span>{</span>
        <span>while</span> <span>(</span>left <span>&lt;</span> right <span>&amp;&amp;</span> s<span>.</span><span>charAt</span><span>(</span>left<span>)</span> <span>==</span> s<span>.</span><span>charAt</span><span>(</span>right<span>)</span><span>)</span> <span>{</span>
            left<span>++</span><span>;</span> right<span>--</span><span>;</span>
        <span>}</span>
        <span>return</span> left <span>>=</span> right<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>python 实现</p>
<div><pre><code><span>class</span> <span>Solution</span><span>(</span><span>object</span><span>)</span><span>:</span>
    <span>def</span> <span>longestPalindrome</span><span>(</span>self<span>,</span> s<span>)</span><span>:</span>
        <span>"""
        :type s: str
        :rtype: str
        """</span>
        <span>if</span> s <span>is</span> <span>None</span><span>:</span>
            <span>return</span> <span>None</span>

        <span>for</span> length <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>s<span>)</span><span>,</span> <span>0</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>:</span>
            <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>s<span>)</span> <span>-</span> length <span>+</span> <span>1</span><span>)</span><span>:</span>
                <span>if</span> self<span>.</span>is_palindrome<span>(</span>s<span>,</span> i<span>,</span> i <span>+</span> length <span>-</span> <span>1</span><span>)</span><span>:</span>
                    <span>return</span> s<span>[</span>i<span>:</span> i <span>+</span> length<span>]</span>

        <span>return</span> <span>""</span>

    <span>def</span> <span>is_palindrome</span><span>(</span>self<span>,</span> s<span>,</span> left<span>,</span> right<span>)</span><span>:</span>
        <span>while</span> left <span>&lt;</span> right <span>and</span> s<span>[</span>left<span>]</span> <span>==</span> s<span>[</span>right<span>]</span><span>:</span>
            left <span>+=</span> <span>1</span>
            right <span>-=</span> <span>1</span>

        <span>return</span> left <span>>=</span> right
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="基于中心线枚举的算法"> 基于中心线枚举的算法</h2>
<p>java 实现</p>
<div><pre><code><span>class</span> <span>Solution</span> <span>{</span>
    <span>public</span> <span>String</span> <span>longestPalindrome</span><span>(</span><span>String</span> s<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>s <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>}</span>

        <span>String</span> longest <span>=</span> <span>""</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>String</span> oddPalindrome <span>=</span> <span>getPalindromeFrom</span><span>(</span>s<span>,</span> i<span>,</span> i<span>)</span><span>;</span>
            <span>if</span> <span>(</span>longest<span>.</span><span>length</span><span>(</span><span>)</span> <span>&lt;</span> oddPalindrome<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                longest <span>=</span> oddPalindrome<span>;</span>
            <span>}</span>

            <span>String</span> evenPalindrome <span>=</span> <span>getPalindromeFrom</span><span>(</span>s<span>,</span> i<span>,</span> i <span>+</span><span>1</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>longest<span>.</span><span>length</span><span>(</span><span>)</span> <span>&lt;</span> evenPalindrome<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span> <span>{</span>
                longest <span>=</span> evenPalindrome<span>;</span>
            <span>}</span>
        <span>}</span>
        
        <span>return</span> longest<span>;</span>
    <span>}</span>

    <span>private</span> <span>String</span> <span>getPalindromeFrom</span><span>(</span><span>String</span> s<span>,</span> <span>int</span> left<span>,</span> <span>int</span> right<span>)</span> <span>{</span>
        <span>while</span> <span>(</span>left <span>>=</span> <span>0</span> <span>&amp;&amp;</span> right <span>&lt;</span> s<span>.</span><span>length</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>s<span>.</span><span>charAt</span><span>(</span>left<span>)</span> <span>!=</span> s<span>.</span><span>charAt</span><span>(</span>right<span>)</span><span>)</span> <span>{</span>
                <span>break</span><span>;</span>
            <span>}</span>
            left<span>--</span><span>;</span>
            right<span>++</span><span>;</span>
        <span>}</span>

        <span>return</span> s<span>.</span><span>substring</span><span>(</span>left <span>+</span> <span>1</span><span>,</span> right<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>python 实现</p>
<div><pre><code><span>class</span> <span>Solution</span><span>(</span><span>object</span><span>)</span><span>:</span>
    <span>def</span> <span>longestPalindrome</span><span>(</span>self<span>,</span> s<span>)</span><span>:</span>
        <span>"""
        :type s: str
        :rtype: str
        """</span>
        <span>if</span> <span>not</span> s<span>:</span>
            <span>return</span> s
        
        answer <span>=</span> <span>(</span><span>0</span><span>,</span> <span>0</span><span>)</span>
        <span>for</span> mid <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>s<span>)</span><span>)</span><span>:</span>
            answer <span>=</span> <span>max</span><span>(</span>answer<span>,</span> self<span>.</span>get_palindrome_from<span>(</span>s<span>,</span> mid<span>,</span> mid<span>)</span><span>)</span>
            answer <span>=</span> <span>max</span><span>(</span>answer<span>,</span> self<span>.</span>get_palindrome_from<span>(</span>s<span>,</span> mid<span>,</span> mid <span>+</span> <span>1</span><span>)</span><span>)</span>

        <span>return</span> s<span>[</span>answer<span>[</span><span>1</span><span>]</span><span>:</span> answer<span>[</span><span>0</span><span>]</span> <span>+</span> answer<span>[</span><span>1</span><span>]</span><span>]</span>

    <span>def</span> <span>get_palindrome_from</span><span>(</span>self<span>,</span> s<span>,</span> left<span>,</span> right<span>)</span><span>:</span>
        <span>while</span> left <span>>=</span> <span>0</span> <span>and</span> right <span>&lt;</span> <span>len</span><span>(</span>s<span>)</span> <span>and</span> s<span>[</span>left<span>]</span> <span>==</span> s<span>[</span>right<span>]</span><span>:</span>
            left <span>-=</span> <span>1</span>
            right <span>+=</span> <span>1</span>

        <span>return</span> right <span>-</span> left <span>-</span> <span>1</span><span>,</span> left <span>+</span> <span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="基于动态规划的算法"> 基于动态规划的算法</h2>
<p>java 实现</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>python 实现</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>查询</title>
      <link>https:/cloaks.cn/blogs/lintcode/search/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/search/</guid>
      <source url="https:/cloaks.cn/rss.xml">查询</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="二分查找"> 二分查找</h2>
<blockquote>
<p>时间复杂度 <code>O(log^n)</code></p>
</blockquote>
<h3 id="经典二分查找问题"> 经典二分查找问题</h3>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/457/" target="_blank" rel="noopener noreferrer">457</a><br>
描述：在一个排序数组中找一个数，返回该数出现的任意位置，如果不存在，返回 -1。</p>
</blockquote>
<h4 id="递归"> 递归</h4>
<p>时间复杂度：log(n)</p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param nums: An integer array sorted in ascending order
    @param target: An integer
    @return: An integer
    """</span>
    <span>def</span> <span>findPosition</span><span>(</span>self<span>,</span> nums<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> nums <span>or</span> target <span>==</span> <span>None</span><span>:</span>
            <span>return</span> <span>-</span><span>1</span> 
            
        <span>return</span> self<span>.</span>binarySearch<span>(</span>nums<span>,</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span><span>,</span> target<span>)</span>

    <span>def</span> <span>binarySearch</span><span>(</span>self<span>,</span> nums<span>,</span> start<span>,</span> end<span>,</span> target<span>)</span><span>:</span>
        <span>if</span> start <span>></span> end<span>:</span>
            <span>return</span> <span>-</span><span>1</span>

        mid <span>=</span> <span>(</span>start <span>+</span> end<span>)</span> <span>//</span> <span>2</span>
        <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> mid
        <span>if</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
            <span>return</span> self<span>.</span>binarySearch<span>(</span>nums<span>,</span> start<span>,</span> mid <span>-</span> <span>1</span><span>,</span> target<span>)</span>

        <span>return</span> self<span>.</span>binarySearch<span>(</span>nums<span>,</span> mid <span>+</span> <span>1</span><span>,</span> end<span>,</span> target<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */</span>
    <span>public</span> <span>int</span> <span>findPosition</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>return</span> <span>binarySearch</span><span>(</span>nums<span>,</span> <span>0</span><span>,</span> nums<span>.</span>length <span>-</span> <span>1</span><span>,</span> target<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> start<span>,</span> <span>int</span> end<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>start <span>></span> end<span>)</span> <span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>

        <span>int</span> mid <span>=</span> <span>(</span>start <span>+</span> end<span>)</span> <span>/</span> <span>2</span><span>;</span>
        <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> mid<span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>&lt;</span> target<span>)</span> <span>{</span>
            <span>return</span> <span>binarySearch</span><span>(</span>nums<span>,</span> mid <span>+</span> <span>1</span><span>,</span> end<span>,</span> target<span>)</span><span>;</span>
        <span>}</span> 
        <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>></span> target<span>)</span> <span>{</span>
            <span>return</span> <span>binarySearch</span><span>(</span>nums<span>,</span> start<span>,</span> mid <span>-</span> <span>1</span><span>,</span> target<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>-</span><span>1</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p><strong>双指针</strong></p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param nums: An integer array sorted in ascending order
    @param target: An integer
    @return: An integer
    """</span>
    <span>def</span> <span>findPosition</span><span>(</span>self<span>,</span> nums<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> nums <span>or</span> target <span>==</span> <span>None</span><span>:</span>
            <span>return</span> <span>-</span><span>1</span>

        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>

        <span>while</span> left <span>&lt;</span> right<span>:</span>
            mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span>

            <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
                <span>return</span> mid
            <span>elif</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
                right <span>=</span> mid <span>-</span> <span>1</span>
            <span>else</span><span>:</span>
                left <span>=</span> mid <span>+</span> <span>1</span>

        <span>if</span> nums<span>[</span>left<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> left

        <span>return</span> <span>-</span><span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */</span>
    <span>public</span> <span>int</span> <span>findPosition</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>if</span> <span>(</span>nums <span>==</span> <span>null</span> <span>||</span> nums<span>.</span>length <span>==</span> <span>0</span><span>)</span> <span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>

        <span>int</span> left <span>=</span> <span>0</span><span>,</span> right <span>=</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span>
        <span>while</span><span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>
            <span>int</span> mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span><span>;</span>
            <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
                <span>return</span> mid<span>;</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>nums<span>[</span>mid<span>]</span> <span>></span> target<span>)</span> <span>{</span>
                right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>if</span> <span>(</span>nums<span>[</span>left<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> left<span>;</span>
        <span>}</span>

        <span>return</span> <span>-</span><span>1</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h3 id="目标最后位置"> 目标最后位置</h3>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/458/" target="_blank" rel="noopener noreferrer">458</a>二分法变形<br>
描述：给一个升序数组，找到 <code>target</code> 最后一次出现的位置，如果没出现过返回 <code>-1</code></p>
</blockquote>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param nums: An integer array sorted in ascending order
    @param target: An integer
    @return: An integer
    """</span>
    <span>def</span> <span>lastPosition</span><span>(</span>self<span>,</span> nums<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> nums <span>or</span> target <span>==</span> <span>None</span><span>:</span>
            <span>return</span> <span>-</span><span>1</span>

        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>

        <span>while</span> left <span>+</span> <span>1</span> <span>&lt;</span> right<span>:</span>
            mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span>

            <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
                left <span>=</span> mid
            <span>elif</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
                right <span>=</span> mid <span>-</span> <span>1</span>
            <span>else</span><span>:</span>
                left <span>=</span> mid <span>+</span> <span>1</span>

        <span>if</span> nums<span>[</span>right<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> right
        
        <span>if</span> nums<span>[</span>left<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> left

        <span>return</span> <span>-</span><span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */</span>
    <span>public</span> <span>int</span> <span>lastPosition</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>if</span> <span>(</span>nums <span>==</span> <span>null</span> <span>||</span> nums<span>.</span>length <span>==</span> <span>0</span><span>)</span> <span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>

        <span>int</span> left <span>=</span> <span>0</span><span>,</span> right <span>=</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span>
        <span>while</span><span>(</span>left <span>+</span> <span>1</span> <span>&lt;</span> right<span>)</span> <span>{</span>
            <span>int</span> mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span><span>;</span>
            <span>if</span><span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
                left <span>=</span> mid<span>;</span>
            <span>}</span> <span>else</span> <span>if</span><span>(</span>nums<span>[</span>mid<span>]</span> <span>></span> target<span>)</span> <span>{</span>
                right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>if</span> <span>(</span>nums<span>[</span>right<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> right<span>;</span>
        <span>}</span>

        <span>if</span> <span>(</span> nums<span>[</span>left<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> left<span>;</span>
        <span>}</span>

        <span>return</span> <span>-</span><span>1</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h3 id="目标最前位置"> 目标最前位置</h3>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/14/" target="_blank" rel="noopener noreferrer">14</a>二分法变形<br>
描述：给定一个排序的整数数组（升序）和一个要查找的整数 <code>target</code>，用<code>O(logn)</code>的时间查找到<code>target</code>第一次出现的下标（从0开始），如果<code>target</code>不存在于数组中，返回<code>-1</code>。</p>
</blockquote>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param nums: The integer array.
    @param target: Target to find.
    @return: The first position of target. Position starts from 0.
    """</span>
    <span>def</span> <span>binarySearch</span><span>(</span>self<span>,</span> nums<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> nums <span>or</span> target <span>==</span> <span>None</span><span>:</span>
            <span>return</span> <span>-</span><span>1</span>

        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>

        <span>while</span> left <span>+</span> <span>1</span> <span>&lt;</span> right<span>:</span>
            mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span>

            <span>if</span> nums<span>[</span>mid<span>]</span> <span>==</span> target<span>:</span>
                right <span>=</span> mid
            <span>elif</span> nums<span>[</span>mid<span>]</span> <span>></span> target<span>:</span>
                right <span>=</span> mid <span>-</span> <span>1</span>
            <span>else</span><span>:</span>
                left <span>=</span> mid <span>+</span> <span>1</span>

        <span>if</span> nums<span>[</span>left<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> left
        <span>if</span> nums<span>[</span>right<span>]</span> <span>==</span> target<span>:</span>
            <span>return</span> right
        
        <span>return</span> <span>-</span><span>1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */</span>
    <span>public</span> <span>int</span> <span>binarySearch</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>if</span> <span>(</span>nums <span>==</span> <span>null</span> <span>||</span> nums<span>.</span>length <span>==</span> <span>0</span><span>)</span> <span>{</span>
            <span>return</span> <span>-</span><span>1</span><span>;</span>
        <span>}</span>

        <span>int</span> left <span>=</span> <span>0</span><span>,</span> right <span>=</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span>
        <span>while</span><span>(</span>left <span>+</span> <span>1</span> <span>&lt;</span> right<span>)</span> <span>{</span>
            <span>int</span> mid <span>=</span> <span>(</span>left <span>+</span> right<span>)</span> <span>/</span> <span>2</span><span>;</span>
            <span>if</span><span>(</span>nums<span>[</span>mid<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
                right <span>=</span> mid<span>;</span>
            <span>}</span> <span>else</span> <span>if</span><span>(</span>nums<span>[</span>mid<span>]</span> <span>></span> target<span>)</span> <span>{</span>
                right <span>=</span> mid <span>-</span> <span>1</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                left <span>=</span> mid <span>+</span> <span>1</span><span>;</span>
            <span>}</span>
        <span>}</span>

        <span>if</span> <span>(</span> nums<span>[</span>left<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> left<span>;</span>
        <span>}</span>
        <span>if</span> <span>(</span>nums<span>[</span>right<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
            <span>return</span> right<span>;</span>
        <span>}</span>

        <span>return</span> <span>-</span><span>1</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="宽度优先搜索"> 宽度优先搜索</h2>
<p><strong>适用范围</strong>：分层遍历、连通块问题、拓扑排序</p>
<ol>
<li>
<p>分层遍历</p>
<ul>
<li>
<p>一层一层的遍历一个图、树、矩阵</p>
</li>
<li>
<p>简单图最短路径</p>
</li>
</ul>
<blockquote>
<p>简单图的定义：图中所有的边长都是一样的</p>
</blockquote>
</li>
<li>
<p>连通块问题</p>
<ul>
<li>
<p>通过图中一个点找到其他所有连通的点</p>
</li>
<li>
<p>找到所有方案问题的一种非递归实现方式</p>
</li>
</ul>
</li>
<li>
<p>拓扑排序</p>
<ul>
<li>实现难度远低于 <code>DFS</code></li>
</ul>
</li>
</ol>
<p><strong>实现方式</strong>：单队列、双队列、<code>Dummy Node</code></p>
<h3 id="二叉树的层次遍历"> 二叉树的层次遍历</h3>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/69/" target="_blank" rel="noopener noreferrer">69</a><br>
描述：给出一棵二叉树，返回其节点值的层次遍历（逐层从左往右访问）</p>
</blockquote>
<h4 id="单队列实现"> 单队列实现</h4>
<div><pre><code><span>"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""</span>

<span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param root: A Tree
    @return: Level order a list of lists of integer
    """</span>
    <span>def</span> <span>levelOrder</span><span>(</span>self<span>,</span> root<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> root<span>:</span>
            <span>return</span> <span>[</span><span>]</span>

        <span># 把第一层几点放到队列中</span>
        queue <span>=</span> collections<span>.</span>deque<span>(</span><span>[</span>root<span>]</span><span>)</span>
        results <span>=</span> <span>[</span><span>]</span>

        <span># 判断队列非空</span>
        <span>while</span> queue<span>:</span>
            results<span>.</span>append<span>(</span><span>[</span>node<span>.</span>val <span>for</span> node <span>in</span> queue<span>]</span><span>)</span>

            <span># 把上一层几点拓展出下一层节点</span>
            <span>for</span> _ <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>queue<span>)</span><span>)</span><span>:</span>
                node <span>=</span> queue<span>.</span>popleft<span>(</span><span>)</span>
                <span>if</span> node<span>.</span>left<span>:</span>
                    queue<span>.</span>append<span>(</span>node<span>.</span>left<span>)</span>
                <span>if</span> node<span>.</span>right<span>:</span>
                    queue<span>.</span>append<span>(</span>node<span>.</span>right<span>)</span>

        <span>return</span> results
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><div><div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span>/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */</span>

<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */</span>
    <span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>levelOrder</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>List</span> result <span>=</span> <span>new</span> <span>ArrayList</span><span>(</span><span>)</span><span>;</span>

        <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> result<span>;</span>
        <span>}</span>

        <span>Queue</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> queue <span>=</span> <span>new</span> <span>LinkedList</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        queue<span>.</span><span>offer</span><span>(</span>root<span>)</span><span>;</span>

        <span>while</span> <span>(</span><span>!</span>queue<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span> level <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>
            <span>int</span> size <span>=</span> queue<span>.</span><span>size</span><span>(</span><span>)</span><span>;</span>
            <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> size<span>;</span> i<span>++</span><span>)</span> <span>{</span>
                <span>TreeNode</span> head <span>=</span> queue<span>.</span><span>poll</span><span>(</span><span>)</span><span>;</span>
                level<span>.</span><span>add</span><span>(</span>head<span>.</span>val<span>)</span><span>;</span>
                <span>if</span> <span>(</span>head<span>.</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                    queue<span>.</span><span>offer</span><span>(</span>head<span>.</span>left<span>)</span><span>;</span>
                <span>}</span>
                <span>if</span> <span>(</span>head<span>.</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                    queue<span>.</span><span>offer</span><span>(</span>head<span>.</span>right<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
            result<span>.</span><span>add</span><span>(</span>level<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> result<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h4 id="双队列实现"> 双队列实现</h4>
<div><pre><code><span>"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""</span>

<span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param root: A Tree
    @return: Level order a list of lists of integer
    """</span>
    <span>def</span> <span>levelOrder</span><span>(</span>self<span>,</span> root<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> root<span>:</span>
            <span>return</span> <span>[</span><span>]</span>

        queue <span>=</span> <span>[</span>root<span>]</span>
        results <span>=</span> <span>[</span><span>]</span>
        <span>while</span> queue<span>:</span>
            next_queue <span>=</span> <span>[</span><span>]</span>
            results<span>.</span>append<span>(</span><span>[</span>node<span>.</span>val <span>for</span> node <span>in</span> queue<span>]</span><span>)</span>
            <span>for</span> node <span>in</span> queue<span>:</span>
                <span>if</span> node<span>.</span>left<span>:</span>
                    next_queue<span>.</span>append<span>(</span>node<span>.</span>left<span>)</span>
                <span>if</span> node<span>.</span>right<span>:</span>
                    next_queue<span>.</span>append<span>(</span>node<span>.</span>right<span>)</span>
            queue <span>=</span> next_queue
        <span>return</span> results
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><div><pre><code><span>/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */</span>

<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */</span>
    <span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>levelOrder</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> results <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> results<span>;</span>
        <span>}</span>

        <span>List</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> queue <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        queue<span>.</span><span>add</span><span>(</span>root<span>)</span><span>;</span>
        <span>while</span> <span>(</span><span>!</span>queue<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>List</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> next_queue <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
            results<span>.</span><span>add</span><span>(</span><span>toIntegerList</span><span>(</span>queue<span>)</span><span>)</span><span>;</span>

            <span>for</span> <span>(</span><span>TreeNode</span> node <span>:</span> queue<span>)</span> <span>{</span>
                <span>if</span> <span>(</span>node<span>.</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                    next_queue<span>.</span><span>add</span><span>(</span>node<span>.</span>left<span>)</span><span>;</span>
                <span>}</span>
                <span>if</span> <span>(</span>node<span>.</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                    next_queue<span>.</span><span>add</span><span>(</span>node<span>.</span>right<span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
            queue <span>=</span> next_queue<span>;</span>
        <span>}</span>
        <span>return</span> results<span>;</span>
    <span>}</span>
    <span>private</span> <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> <span>toIntegerList</span><span>(</span><span>List</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> queue<span>)</span> <span>{</span>
        <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> level <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>for</span> <span>(</span><span>TreeNode</span> node <span>:</span> queue<span>)</span> <span>{</span>
            level<span>.</span><span>add</span><span>(</span>node<span>.</span>val<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> level<span>;</span>
    <span>}</span>   
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><h4 id="dummynode-实现-bfs"> DummyNode 实现 BFS</h4>
<div><pre><code><span>"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""</span>

<span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param root: A Tree
    @return: Level order a list of lists of integer
    """</span>
    <span>def</span> <span>levelOrder</span><span>(</span>self<span>,</span> root<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> root<span>:</span>
            <span>return</span> <span>[</span><span>]</span>

        queue <span>=</span> collections<span>.</span>deque<span>(</span><span>[</span>root<span>,</span> <span>None</span><span>]</span><span>)</span>
        results<span>,</span> level <span>=</span> <span>[</span><span>]</span><span>,</span> <span>[</span><span>]</span>
        <span>while</span> queue<span>:</span>
            node <span>=</span> queue<span>.</span>popleft<span>(</span><span>)</span>
            <span>if</span> node <span>is</span> <span>None</span><span>:</span>
                results<span>.</span>append<span>(</span>level<span>)</span>
                level <span>=</span> <span>[</span><span>]</span>
                <span>if</span> queue<span>:</span>
                    queue<span>.</span>append<span>(</span><span>None</span><span>)</span>
                <span>continue</span>
            level<span>.</span>append<span>(</span>node<span>.</span>val<span>)</span>
            <span>if</span> node<span>.</span>left<span>:</span>
                queue<span>.</span>append<span>(</span>node<span>.</span>left<span>)</span>
            <span>if</span> node<span>.</span>right<span>:</span>
                queue<span>.</span>append<span>(</span>node<span>.</span>right<span>)</span>
        <span>return</span> results
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><div><pre><code><span>/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */</span>

<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */</span>
    <span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>levelOrder</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> result <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> result<span>;</span>
        <span>}</span>

        <span>Queue</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span> <span>Q</span> <span>=</span> <span>new</span> <span>LinkedList</span><span><span>&lt;</span><span>TreeNode</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>Q</span><span>.</span><span>offer</span><span>(</span>root<span>)</span><span>;</span>
        <span>Q</span><span>.</span><span>offer</span><span>(</span><span>null</span><span>)</span><span>;</span>

        <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> level <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>
        <span>while</span><span>(</span><span>!</span><span>Q</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>TreeNode</span> node <span>=</span> <span>Q</span><span>.</span><span>poll</span><span>(</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span>level<span>.</span><span>size</span><span>(</span><span>)</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>
                    <span>break</span><span>;</span>
                <span>}</span>
                result<span>.</span><span>add</span><span>(</span>level<span>)</span><span>;</span>
                level <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>Integer</span><span>></span></span><span>(</span><span>)</span><span>;</span>
                <span>Q</span><span>.</span><span>offer</span><span>(</span><span>null</span><span>)</span><span>;</span>
                <span>continue</span><span>;</span>
            <span>}</span>

            level<span>.</span><span>add</span><span>(</span>node<span>.</span>val<span>)</span><span>;</span>
            <span>if</span> <span>(</span>node<span>.</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                <span>Q</span><span>.</span><span>offer</span><span>(</span>node<span>.</span>left<span>)</span><span>;</span>
            <span>}</span>
            <span>if</span> <span>(</span>node<span>.</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                <span>Q</span><span>.</span><span>offer</span><span>(</span>node<span>.</span>right<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>return</span> result<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h2 id="深度优先搜索"> 深度优先搜索</h2>
<p><strong>算法思想</strong>：遍历法、分治法</p>
<ol>
<li>
<p>遍历法：一个人拿着记事本走遍所有结点</p>
<p>通常会用到一个全局变量或共享参数</p>
</li>
<li>
<p>分治法：多个人做子任务，最终进行结果汇总</p>
<p>通常会用到 <code>return value</code> 记录子问题结果</p>
</li>
</ol>
<h3 id="分治法"> 分治法</h3>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/93/" target="_blank" rel="noopener noreferrer">93</a><br>
描述：给定一个二叉树,确定它是高度平衡的。对于这个问题,一棵高度平衡的二叉树的定义是：一棵二叉树中每个节点的两个子树的深度相差不会超过1。</p>
</blockquote>
<div><pre><code><span>"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""</span>

<span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param root: The root of binary tree.
    @return: True if this Binary tree is Balanced, or false.
    """</span>
    <span>def</span> <span>isBalanced</span><span>(</span>self<span>,</span> root<span>)</span><span>:</span>
        <span># write your code here</span>
        is_balanced<span>,</span> _ <span>=</span> self<span>.</span>divideConquer<span>(</span>root<span>)</span>
        <span>return</span> is_balanced

    <span>def</span> <span>divideConquer</span><span>(</span>self<span>,</span> root<span>)</span><span>:</span>
        <span>if</span> <span>not</span> root<span>:</span>
            <span>return</span> <span>True</span><span>,</span> <span>0</span>

        is_left_balanced<span>,</span> left_height <span>=</span> self<span>.</span>divideConquer<span>(</span>root<span>.</span>left<span>)</span>
        is_right_balanced<span>,</span> right_height <span>=</span> self<span>.</span>divideConquer<span>(</span>root<span>.</span>right<span>)</span>
        root_height <span>=</span> <span>max</span><span>(</span>left_height<span>,</span> right_height<span>)</span> <span>+</span> <span>1</span>

        <span>if</span> <span>not</span> is_left_balanced <span>or</span> <span>not</span> is_right_balanced<span>:</span>
            <span>return</span> <span>False</span><span>,</span> root_height
        <span>if</span> <span>abs</span><span>(</span>left_height <span>-</span> right_height<span>)</span> <span>></span> <span>1</span><span>:</span>
            <span>return</span> <span>False</span><span>,</span> root_height
        <span>return</span> <span>True</span><span>,</span> root_height
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><div><pre><code><span>/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */</span>

<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>class</span> <span>Pair</span> <span>{</span>
        <span>boolean</span> isBalanced<span>;</span>
        <span>int</span> height<span>;</span>

        <span>public</span> <span>Pair</span><span>(</span><span>boolean</span> isBalanced<span>,</span> <span>int</span> height<span>)</span> <span>{</span>
            <span>this</span><span>.</span>isBalanced <span>=</span> isBalanced<span>;</span>
            <span>this</span><span>.</span>height <span>=</span> height<span>;</span>
        <span>}</span>
    <span>}</span>
    <span>/**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */</span>
    <span>public</span> <span>boolean</span> <span>isBalanced</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>return</span> <span>divideConquer</span><span>(</span>root<span>)</span><span>.</span>isBalanced<span>;</span>
    <span>}</span>

    <span>private</span> <span>Pair</span> <span>divideConquer</span><span>(</span><span>TreeNode</span> root<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>Pair</span><span>(</span><span>true</span><span>,</span> <span>0</span><span>)</span><span>;</span>
        <span>}</span>

        <span>Pair</span> pairLeft <span>=</span> <span>divideConquer</span><span>(</span>root<span>.</span>left<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>pairLeft<span>.</span>isBalanced<span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>Pair</span><span>(</span><span>false</span><span>,</span> pairLeft<span>.</span>height<span>)</span><span>;</span>
        <span>}</span>
        <span>Pair</span> pairRight <span>=</span> <span>divideConquer</span><span>(</span>root<span>.</span>right<span>)</span><span>;</span>
        <span>if</span> <span>(</span><span>!</span>pairRight<span>.</span>isBalanced<span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>Pair</span><span>(</span><span>false</span><span>,</span> pairRight<span>.</span>height<span>)</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>new</span> <span>Pair</span><span>(</span><span>Math</span><span>.</span><span>abs</span><span>(</span>pairLeft<span>.</span>height <span>-</span> pairRight<span>.</span>height<span>)</span> <span>&lt;=</span> <span>1</span><span>,</span> <span>Math</span><span>.</span><span>max</span><span>(</span>pairLeft<span>.</span>height<span>,</span> pairRight<span>.</span>height<span>)</span> <span>+</span> <span>1</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>排序算法</title>
      <link>https:/cloaks.cn/blogs/lintcode/sortIntegers/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/sortIntegers/</guid>
      <source url="https:/cloaks.cn/rss.xml">排序算法</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/463/" target="_blank" rel="noopener noreferrer">463</a><br>
描述：给一组整数，按照升序排序，使用选择排序，冒泡排序，插入排序或者任何 O(n2) 的排序算法。</p>
</blockquote>
<h2 id="选择排序"> 选择排序</h2>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param A: an integer array
    @return: nothing
    """</span>
    <span>def</span> <span>sortIntegers</span><span>(</span>self<span>,</span> A<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>len</span><span>(</span>A<span>)</span><span>)</span><span>:</span>
            <span>for</span> j <span>in</span> <span>range</span><span>(</span>i <span>+</span> <span>1</span><span>,</span> <span>len</span><span>(</span>A<span>)</span><span>)</span><span>:</span>
                <span>if</span> A<span>[</span>i<span>]</span> <span>></span> A<span>[</span>j<span>]</span><span>:</span>
                    A<span>[</span>i<span>]</span><span>,</span> A<span>[</span>j<span>]</span> <span>=</span> A<span>[</span>j<span>]</span><span>,</span> A<span>[</span>i<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param A: an integer array
     * @return: nothing
     */</span>
    <span>public</span> <span>void</span> <span>sortIntegers</span><span>(</span><span>int</span><span>[</span><span>]</span> <span>A</span><span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>A</span><span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> <span>A</span><span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span><span>A</span><span>[</span>i<span>]</span> <span>></span> <span>A</span><span>[</span>j<span>]</span><span>)</span> <span>{</span>
                    <span>A</span><span>[</span>i<span>]</span> <span>=</span> <span>A</span><span>[</span>i<span>]</span> <span>+</span> <span>A</span><span>[</span>j<span>]</span><span>;</span>
                    <span>A</span><span>[</span>j<span>]</span> <span>=</span> <span>A</span><span>[</span>i<span>]</span> <span>-</span> <span>A</span><span>[</span>j<span>]</span><span>;</span>
                    <span>A</span><span>[</span>i<span>]</span> <span>=</span> <span>A</span><span>[</span>i<span>]</span> <span>-</span> <span>A</span><span>[</span>j<span>]</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="冒泡排序"> 冒泡排序</h2>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param A: an integer array
    @return: nothing
    """</span>
    <span>def</span> <span>sortIntegers</span><span>(</span>self<span>,</span> A<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>len</span><span>(</span>A<span>)</span> <span>-</span> <span>1</span><span>)</span><span>:</span>
            <span>for</span> j <span>in</span> <span>range</span><span>(</span><span>0</span><span>,</span> <span>len</span><span>(</span>A<span>)</span> <span>-</span> <span>1</span><span>)</span><span>:</span>
                <span>if</span> A<span>[</span>j<span>]</span> <span>></span> A<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>:</span>
                    A<span>[</span>j<span>]</span><span>,</span> A<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> A<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> A<span>[</span>j<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param A: an integer array
     * @return: nothing
     */</span>
    <span>public</span> <span>void</span> <span>sortIntegers</span><span>(</span><span>int</span><span>[</span><span>]</span> <span>A</span><span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>A</span><span>.</span>length <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>A</span><span>.</span>length <span>-</span> <span>1</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span><span>A</span><span>[</span>j<span>]</span> <span>></span> <span>A</span><span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                    <span>A</span><span>[</span>j<span>]</span> <span>=</span> <span>A</span><span>[</span>j<span>]</span> <span>+</span> <span>A</span><span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
                    <span>A</span><span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> <span>A</span><span>[</span>j<span>]</span> <span>-</span> <span>A</span><span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
                    <span>A</span><span>[</span>j<span>]</span> <span>=</span> <span>A</span><span>[</span>j<span>]</span> <span>-</span> <span>A</span><span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="插入排序"> 插入排序</h2>
<p>python</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>java</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><h2 id="归并排序"> 归并排序</h2>
<p>python</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>java</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><h2 id="快速排序"> 快速排序</h2>
<p>python</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div><p>java</p>
<div><pre><code>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>计算机网络面试</title>
      <link>https:/cloaks.cn/blogs/network/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/network/</guid>
      <source url="https:/cloaks.cn/rss.xml">计算机网络面试</source>
      <category>面试</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="osi七层模型"> OSI七层模型</h2>
<h3 id="物理层"> 物理层</h3>
<p>建立、维护、断开物理连接</p>
<h3 id="数据链路层"> 数据链路层</h3>
<p>建立逻辑连接、进行硬件地址寻址、差错校验</p>
<h3 id="网络层"> 网络层</h3>
<p>进行逻辑地址寻址，实现不同网络之间的路径选择</p>
<h3 id="传输层"> 传输层</h3>
<p>定义传输数据的协议端口号，以及流控和差错校验</p>
<p>常见协议：<strong>TCP、UDP</strong></p>
<p>数据包一旦离开网卡即进入网络传输层</p>
<p><strong>TCP三次握手</strong></p>
<p>所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。</p>
<p>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息.在socket编程中，客户端执行connect()时。将触发三次握手。</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201061236575.png" alt="" /></p>
<p>第一次握手:
客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201061236854.png" alt="" /></p>
<p>第二次握手:
服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即X+1。</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201061237932.png" alt="" /></p>
<p>第三次握手.
客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201061237689.png" alt="" /></p>
<p><strong>TCP四次握手</strong></p>
<p>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p>
<p><img src="https://gitee.com/biliit/pic-go/raw/master/202201061235996.png" alt="" /></p>
<h3 id="会话层"> 会话层</h3>
<p>简历、管理、终止会话</p>
<h3 id="表示层"> 表示层</h3>
<p>数据表示、安全、压缩</p>
<h3 id="应用层"> 应用层</h3>
<p>网络服务与最终用户的一个接口</p>
<h4 id="常见网络协议含义及端口"> 常见网络协议含义及端口</h4>
<table>
<thead>
<tr>
<th>协议</th>
<th>含义</th>
<th>端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>FTP</td>
<td>文件传输协议</td>
<td>21</td>
</tr>
<tr>
<td>Telnet</td>
<td>远程登陆</td>
<td>23</td>
</tr>
<tr>
<td>SMTP</td>
<td>简单邮件传输协议</td>
<td>25</td>
</tr>
<tr>
<td>POP3</td>
<td>邮件接收协议</td>
<td>110</td>
</tr>
<tr>
<td>HTTP</td>
<td>超文本传输协议</td>
<td>80</td>
</tr>
<tr>
<td>DNS</td>
<td>域名解析</td>
<td>53</td>
</tr>
</tbody>
</table>
<h4 id="http协议"> HTTP协议</h4>
<h5 id="状态码"> 状态码</h5>
<p>五类响应：1XX(信息类状态码) 2XX(成功状态码) 3XX(重定向状态码) 4XX(客户端错误状态码) 5XX(服务器错误状态码)</p>
<p>常见状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>成功</td>
</tr>
<tr>
<td>204</td>
<td>成功处理，报文不含内容</td>
</tr>
<tr>
<td>206</td>
<td>部分成功</td>
</tr>
<tr>
<td>301</td>
<td>永久性重定向</td>
</tr>
<tr>
<td>302、307</td>
<td>临时性重定向</td>
</tr>
<tr>
<td>303</td>
<td></td>
</tr>
<tr>
<td>304</td>
<td></td>
</tr>
<tr>
<td>400</td>
<td>请求错误</td>
</tr>
<tr>
<td>401</td>
<td>需要HTTP认证信息</td>
</tr>
<tr>
<td>403</td>
<td>请求拒绝</td>
</tr>
<tr>
<td>404</td>
<td>未找到请求地址</td>
</tr>
<tr>
<td>500</td>
<td>执行请求错误</td>
</tr>
<tr>
<td>503</td>
<td>超负载、停机维护</td>
</tr>
</tbody>
</table>
<h5 id="请求头-响应头"> 请求头/响应头</h5>
<div><pre><code><span>Content-Type</span><span>:</span> 
<span>Accept</span><span>:</span> 
<span>Origin</span><span>:</span> 
<span>Cache-Control</span><span>:</span> 
<span>Cookie</span><span>:</span> 
<span>User-Agent</span><span>:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML<span>,</span> like Gecko) Chrome/96.0.4664.45 Safari/537.36
<span>Referer</span><span>:</span> 
<span>X-Forwarded-For</span><span>:</span> 
<span>Access-Control-Allow-Origin</span><span>:</span> 允许特定域名访问
<span>Last-Modify</span><span>:</span> 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h5 id="请求方法"> 请求方法</h5>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>用于数据读取，幂等操作</td>
</tr>
<tr>
<td>POST</td>
<td>向指定资源提交数据，非幂等操作</td>
</tr>
<tr>
<td>HEAD</td>
<td>向服务器请求头信息</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>查看服务器支持HTTP请求方法，测试功能是否正常</td>
</tr>
<tr>
<td>PUT</td>
<td>请求服务器修改信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>请求服务器删除数据</td>
</tr>
<tr>
<td>TRACE</td>
<td>请求服务器回显信息，测试诊断服务器状态</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>HTTP协议和GET和POST请求方法的区别</p>
<ol>
<li>
<p>在进行后退操作时 GET 是无害的，但是 POST 请求会进行重新提交</p>
</li>
<li>
<p>GET 可以收藏为书签，POST 不可以</p>
</li>
<li>
<p>GET 可以被浏览器缓存，POST 不可以</p>
</li>
<li>
<p>GET 可以被浏览器存到历史当中，POST 不可以</p>
</li>
<li>
<p>GET URL限制为2038个字符，POST 没有限制</p>
</li>
<li>
<p>GET 安全性较差</p>
</li>
</ol>
</li>
<li>
<p>HTTPS 的工作原理</p>
<ol>
<li>
<p>HTTPS 是一种基于 SSL/TLS 的 HTTP 协议，所有的HTTP数据都是在 SSL/TLS 协议封装之上传输的</p>
</li>
<li>
<p>HTTPS 协议在 HTTP 协议的基础上，添加了 SSL/TLS 握手以及数据加密传输，也属于应用层协议</p>
</li>
</ol>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://gitee.com/biliit/pic-go/raw/master/202201061236575.png" type="image/png"/>
    </item>
    <item>
      <title>介绍</title>
      <link>https:/cloaks.cn/blogs/nowcoder/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/nowcoder/</guid>
      <source url="https:/cloaks.cn/rss.xml">介绍</source>
      <content:encoded><![CDATA[<h1 id="介绍"> 介绍</h1>
]]></content:encoded>
    </item>
    <item>
      <title>VuePress 使用手册</title>
      <link>https:/cloaks.cn/blogs/vuepressReference/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/vuepressReference/</guid>
      <source url="https:/cloaks.cn/rss.xml">VuePress 使用手册</source>
      <category>参考</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="markdown-扩展"> Markdown 扩展</h2>
<h3 id="扩展数学公式"> 扩展数学公式</h3>
<blockquote>
<p>前提：vuepress 2.0 不支持</p>
</blockquote>
<p>弄着还挺费劲的，对前端不太熟悉又把 <code>VUE</code> 看了一下</p>
<p>本次使用的是<a href="https://github.com/tani/markdown-it-mathjax3" target="_blank" rel="noopener noreferrer">markdown-it-mathjax3</a>，有兴趣可以看看博主<a href="https://blog.csdn.net/u011367208/article/details/120168954" target="_blank" rel="noopener noreferrer">べ断桥烟雨ミ</a>的帖子，写的比较细</p>
<p>使用过程官方都写得比较清楚，我也不嫌烦就再写一次 ಥ_ಥ</p>
<div><pre><code><span># Install markdown-it</span>
<span>yarn</span> <span>add</span> -D markdown-it
<span># Install the plugin</span>
<span>yarn</span> <span>add</span> -D markdown-it-mathjax3
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>引用时要注意一下，<a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">vuePress</a>关于<a href="https://v2.vuepress.vuejs.org/zh/reference/plugin-api.html#extendsmarkdown" target="_blank" rel="noopener noreferrer">markdown it</a>有详细介绍</p>
<p>只需在 <code>config.js</code> 中做如下配置即可</p>
<div><pre><code><span>var</span> mathjax3 <span>=</span> <span>require</span><span>(</span><span>'markdown-it-mathjax3'</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>{</span>
    <span>extendsMarkdown</span><span>:</span> <span>(</span><span>md</span><span>)</span> <span>=></span> <span>{</span>
        md<span>.</span><span>use</span><span>(</span>mathjax3<span>)</span>
      <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<p>踩了很多坑，各种各样的问题，不过最重要的还是认真仔细阅读文档</p>
</blockquote>
<p>可以看看最终效果，还不错哈 (<sup>///</sup>)</p>
<p>行内公式 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.04em;vertical-align:-0.1744em;"></span><span><span><span><span style="height:0.8656em;"><span style="top:-3em;"><span style="height:3em;"></span><span style="padding-left:0.833em;"><span>3</span><span>x</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>1</span></span></span><span style="top:-2.8256em;"><span style="height:3em;"></span><span style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span>​</span></span><span><span style="height:0.1744em;"><span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>1</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1.0641em;vertical-align:-0.25em;"></span><span>x</span><span><span>)</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></p>
<p>块级公式</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:4.1939em;vertical-align:-1.8469em;"></span><span><span><span style="width:0.5em;"></span><span><span><span><span style="height:2.3469em;"><span style="top:-4.3469em;"><span style="height:3.0724em;"></span><span><span>∇</span><span style="margin-right:0.2222em;"></span><span>×</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:0.9691em;"><span style="top:-3em;"><span style="height:3em;"></span><span>B</span></span><span style="top:-3.2551em;"><span style="height:3em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.2222em;"></span><span><span></span><span><span><span><span style="height:0.8451em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span>c</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.0724em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span>t</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.9691em;"><span style="top:-2.714em;"><span style="height:2.714em;"></span><span>E</span></span><span style="top:-2.9691em;"><span style="height:2.714em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span></span></span><span style="top:-2.9146em;"><span style="height:3.0724em;"></span><span><span>∇</span><span style="margin-right:0.2222em;"></span><span>×</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:0.9691em;"><span style="top:-3em;"><span style="height:3em;"></span><span>E</span></span><span style="top:-3.2551em;"><span style="height:3em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.2222em;"></span><span><span></span><span><span><span><span style="height:0.8451em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span>c</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.0724em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span>t</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.9691em;"><span style="top:-2.714em;"><span style="height:2.714em;"></span><span>B</span></span><span style="top:-2.9691em;"><span style="height:2.714em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span></span></span><span style="top:-1.5854em;"><span style="height:3.0724em;"></span><span><span>∇</span><span style="margin-right:0.2222em;"></span><span>⋅</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:0.9691em;"><span style="top:-3em;"><span style="height:3em;"></span><span>B</span></span><span style="top:-3.2551em;"><span style="height:3em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:1.8469em;"><span></span></span></span></span></span><span style="width:0.5em;"></span><span style="width:0.5em;"></span><span><span><span><span style="height:2.3469em;"><span style="top:-4.3469em;"><span style="height:3.0724em;"></span><span><span>=</span><span style="margin-right:0.2778em;"></span><span><span></span><span><span><span><span style="height:0.8451em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span>c</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>4</span><span style="margin-right:0.03588em;">π</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span><span><span><span><span style="height:0.9774em;"><span style="top:-3em;"><span style="height:3em;"></span><span>j</span></span><span style="top:-3.2634em;"><span style="height:3em;"></span><span style="left:-0.2355em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span>​</span></span><span><span style="height:0.1944em;"><span></span></span></span></span></span><span>∇</span><span style="margin-right:0.2222em;"></span><span>⋅</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:0.9691em;"><span style="top:-3em;"><span style="height:3em;"></span><span>E</span></span><span style="top:-3.2551em;"><span style="height:3em;"></span><span style="left:-0.1522em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-2.9146em;"><span style="height:3.0724em;"></span><span><span>=</span><span style="margin-right:0.2778em;"></span><span><span><span><span style="height:0.9274em;"><span style="top:-3em;"><span style="height:3em;"></span><span>0</span></span><span style="top:-3.2134em;"><span style="height:3em;"></span><span style="left:-0.2355em;"><span style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-1.5854em;"><span style="height:3.0724em;"></span><span><span>=</span><span style="margin-right:0.2778em;"></span><span>0</span></span></span></span><span>​</span></span><span><span style="height:1.8469em;"><span></span></span></span></span></span><span style="width:0.5em;"></span><span style="width:0.5em;"></span><span><span><span><span style="height:2.3469em;"><span style="top:-4.3469em;"><span style="height:3.0724em;"></span><span><span>=</span><span style="margin-right:0.2778em;"></span><span>4</span><span style="margin-right:0.03588em;">π</span><span>ρ</span></span></span></span></span></span></span><span style="width:0.5em;"></span></span></span></span></span></span></span></p>
<h2 id="插件扩展"> 插件扩展</h2>
<h3 id="评论"> 评论</h3>
<p>暂时放弃，等自己搞明白了在弄吧 <code>vuepress 2.0</code> 好像不支持</p>
]]></content:encoded>
    </item>
    <item>
      <title>反转链表</title>
      <link>https:/cloaks.cn/blogs/nowcoder/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/nowcoder/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <source url="https:/cloaks.cn/rss.xml">反转链表</source>
      <content:encoded><![CDATA[<h1 id="反转链表"> 反转链表</h1>
<blockquote>
<p>题号：<a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca" target="_blank" rel="noopener noreferrer">200</a><br>
描述：给定一个单链表的头结点pHead，长度为n，反转该链表后，返回新链表的表头。数据范围： n&lt;=1000<br>
要求：空间复杂度 O(1)O(1) ，时间复杂度 O(n)O(n) 。如当输入链表{1,2,3}时，经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p>
</blockquote>
<h3 id="解题思路"> 解题思路</h3>
<p>官方给的第二种解法很不错，大概意识从头结点开始把每一个结点用头插法的方式插入空指针pre中，这个反向指针的说法还是不好理解的。</p>
<h3 id="算法实现"> 算法实现</h3>
<div><pre><code><span>/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/</span>
<span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>public</span> <span>ListNode</span> <span>ReverseList</span><span>(</span><span>ListNode</span> head<span>)</span> <span>{</span>
        <span>ListNode</span> pre <span>=</span> <span>null</span><span>;</span>
        <span>ListNode</span> cur <span>=</span> head<span>;</span>
        <span>ListNode</span> next <span>=</span> <span>null</span><span>;</span>
        <span>while</span> <span>(</span>cur <span>!=</span> <span>null</span><span>)</span> <span>{</span>
            next <span>=</span> cur<span>.</span>next<span>;</span>
            cur<span>.</span>next <span>=</span> pre<span>;</span>
            pre <span>=</span> cur<span>;</span>
            cur <span>=</span> next<span>;</span>
        <span>}</span>
        <span>return</span> pre<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>我的书屋</title>
      <link>https:/cloaks.cn/book/</link>
      <guid isPermaLink="false">https:/cloaks.cn/book/</guid>
      <source url="https:/cloaks.cn/rss.xml">我的书屋</source>
    </item>
    <item>
      <title>组件禁用</title>
      <link>https:/cloaks.cn/guide/disable/</link>
      <guid isPermaLink="false">https:/cloaks.cn/guide/disable/</guid>
      <source url="https:/cloaks.cn/rss.xml">组件禁用</source>
      <description>&amp;lt;p&amp;gt;你可以通过设置页面的 Frontmatter，在页面禁用一些功能。&amp;lt;/p&amp;gt;
</description>
      <category>使用指南</category>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https:/cloaks.cn/guide/encrypt/</link>
      <guid isPermaLink="false">https:/cloaks.cn/guide/encrypt/</guid>
      <source url="https:/cloaks.cn/rss.xml">密码加密的文章</source>
      <category>使用指南</category>
      <content:encoded><![CDATA[<h1 id="密码加密的文章"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>双指针算法</title>
      <link>https:/cloaks.cn/blogs/lintcode/twoPoint/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/lintcode/twoPoint/</guid>
      <source url="https:/cloaks.cn/rss.xml">双指针算法</source>
      <category>力扣</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="valid-palindrome"> Valid Palindrome</h2>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/415/" target="_blank" rel="noopener noreferrer">415</a><br>
描述：给定一个字符串，判断其是否为一个回文串。只考虑字母和数字，忽略大小写。<br>
挑战：O(n) 时间复杂度，且不占用额外空间。</p>
</blockquote>
<p>相向双指针实现</p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param s: A string
    @return: Whether the string is a valid palindrome
    """</span>
    <span>def</span> <span>isPalindrome</span><span>(</span>self<span>,</span> s<span>)</span><span>:</span>
        <span># 创建两个指针</span>
        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>s<span>)</span> <span>-</span> <span>1</span>
        <span># 循环使两个指针项目比较</span>
        <span>while</span> left <span>&lt;</span> right<span>:</span>
            <span># 判断left是否为a-z字符</span>
            <span>while</span> left <span>&lt;</span> right <span>and</span> <span>not</span> self<span>.</span>is_valid<span>(</span>s<span>[</span>left<span>]</span><span>)</span><span>:</span>
                left <span>+=</span> <span>1</span>
            <span># 判断right是否为a-z字符</span>
            <span>while</span> left <span>&lt;</span> right <span>and</span> <span>not</span> self<span>.</span>is_valid<span>(</span>s<span>[</span>right<span>]</span><span>)</span><span>:</span>
                right <span>-=</span> <span>1</span>
            <span># 判断!(left == right)返回false</span>
            <span>if</span> left <span>&lt;</span> right <span>and</span> s<span>[</span>left<span>]</span><span>.</span>lower<span>(</span><span>)</span> <span>!=</span> s<span>[</span>right<span>]</span><span>.</span>lower<span>(</span><span>)</span><span>:</span>
                <span>return</span> <span>False</span>
            left <span>+=</span> <span>1</span>
            right <span>-=</span> <span>1</span>
        <span>return</span> <span>True</span>
        
    <span>def</span> <span>is_valid</span><span>(</span>self<span>,</span> char<span>)</span><span>:</span>
        <span>return</span> char<span>.</span>isdigit<span>(</span><span>)</span> <span>or</span> char<span>.</span>isalpha<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param s: A string
     * @return: Whether the string is a valid palindrome
     */</span>
    <span>public</span> <span>boolean</span> <span>isPalindrome</span><span>(</span><span>String</span> s<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>if</span> <span>(</span>s <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>
        <span>// 定义 两个指针分别指向头和尾</span>
        <span>int</span> left <span>=</span> <span>0</span><span>,</span> right <span>=</span> s<span>.</span><span>length</span><span>(</span><span>)</span> <span>-</span> <span>1</span><span>;</span>

        <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>
            <span>while</span> <span>(</span>left <span>&lt;</span> right <span>&amp;&amp;</span> <span>!</span><span>isValid</span><span>(</span>s<span>.</span><span>charAt</span><span>(</span>left<span>)</span><span>)</span><span>)</span> <span>{</span>
                left<span>++</span><span>;</span>
            <span>}</span>
            <span>while</span> <span>(</span>left <span>&lt;</span> right <span>&amp;&amp;</span> <span>!</span><span>isValid</span><span>(</span>s<span>.</span><span>charAt</span><span>(</span>right<span>)</span><span>)</span><span>)</span> <span>{</span>
                right<span>--</span><span>;</span>
            <span>}</span>
            <span>if</span> <span>(</span>left <span>&lt;</span> right <span>&amp;&amp;</span> <span>!</span><span>isEqual</span><span>(</span>s<span>.</span><span>charAt</span><span>(</span>left<span>)</span><span>,</span> s<span>.</span><span>charAt</span><span>(</span>right<span>)</span><span>)</span><span>)</span> <span>{</span>
                <span>return</span> <span>false</span><span>;</span>
            <span>}</span>
            left<span>++</span><span>;</span>
            right<span>--</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>true</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>boolean</span> <span>isValid</span><span>(</span><span>char</span> c<span>)</span> <span>{</span>
        <span>return</span> <span>Character</span><span>.</span><span>isDigit</span><span>(</span>c<span>)</span> <span>||</span> <span>Character</span><span>.</span><span>isLetter</span><span>(</span>c<span>)</span><span>;</span>
    <span>}</span>
    <span>private</span> <span>boolean</span> <span>isEqual</span><span>(</span><span>char</span> a<span>,</span> <span>char</span> b<span>)</span> <span>{</span>
        <span>return</span> <span>Character</span><span>.</span><span>toLowerCase</span><span>(</span>a<span>)</span> <span>==</span> <span>Character</span><span>.</span><span>toLowerCase</span><span>(</span>b<span>)</span><span>;</span>
    <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h2 id="valid-palindrome-ii"> Valid Palindrome II</h2>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/891/" target="_blank" rel="noopener noreferrer">491</a><br>
描述：给一个非空字符串 s，你最多可以删除一个字符。判断是否可以把它变成回文串。</p>
</blockquote>
<p>相向双指针实现</p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param s: a string
    @return: whether you can make s a palindrome by deleting at most one character
    """</span>
    <span>def</span> <span>validPalindrome</span><span>(</span>self<span>,</span> s<span>)</span><span>:</span>
        <span># Write your code here</span>
        <span>if</span> s <span>is</span> <span>None</span><span>:</span>
            <span>return</span> <span>False</span>
        
        left<span>,</span> right <span>=</span> self<span>.</span>findDifference<span>(</span>s<span>,</span> <span>0</span><span>,</span> <span>len</span><span>(</span>s<span>)</span> <span>-</span> <span>1</span><span>)</span>
        <span>if</span> left <span>>=</span> right<span>:</span>
            <span>return</span> <span>True</span>

        <span>return</span> self<span>.</span>isPalindrome<span>(</span>s<span>,</span> left <span>+</span> <span>1</span><span>,</span> right<span>)</span> <span>or</span> self<span>.</span>isPalindrome<span>(</span>s<span>,</span> left<span>,</span> right <span>-</span> <span>1</span><span>)</span>

    <span>def</span> <span>findDifference</span><span>(</span>self<span>,</span> s<span>,</span> left<span>,</span> right<span>)</span><span>:</span>
        <span>while</span> left <span>&lt;</span> right<span>:</span>
            <span>if</span> s<span>[</span>left<span>]</span> <span>!=</span> s<span>[</span>right<span>]</span><span>:</span>
                <span>return</span> left<span>,</span> right
            left <span>+=</span> <span>1</span>
            right <span>-=</span> <span>1</span>
        <span>return</span> left<span>,</span> right

    <span>def</span> <span>isPalindrome</span><span>(</span>self<span>,</span> s<span>,</span> left<span>,</span> right<span>)</span><span>:</span>
        left<span>,</span> right <span>=</span> self<span>.</span>findDifference<span>(</span>s<span>,</span> left<span>,</span> right<span>)</span>
        <span>return</span> left <span>>=</span> right
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param s: a string
     * @return: whether you can make s a palindrome by deleting at most one character
     */</span>
    <span>public</span> <span>boolean</span> <span>validPalindrome</span><span>(</span><span>String</span> s<span>)</span> <span>{</span>
        <span>// Write your code here</span>
        <span>if</span> <span>(</span>s <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> <span>false</span><span>;</span>
        <span>}</span>

        <span>Pair</span> pair <span>=</span> <span>findDifference</span><span>(</span>s<span>,</span> <span>0</span><span>,</span> s<span>.</span><span>length</span><span>(</span><span>)</span> <span>-</span> <span>1</span><span>)</span><span>;</span>
        <span>if</span> <span>(</span>pair<span>.</span>left <span>>=</span> pair<span>.</span>right<span>)</span> <span>{</span>
            <span>return</span> <span>true</span><span>;</span>
        <span>}</span>

        <span>return</span> <span>isPalindrome</span><span>(</span>s<span>,</span> pair<span>.</span>left <span>+</span> <span>1</span><span>,</span> pair<span>.</span>right<span>)</span> <span>||</span> <span>isPalindrome</span><span>(</span>s<span>,</span> pair<span>.</span>left<span>,</span> pair<span>.</span>right <span>-</span> <span>1</span><span>)</span><span>;</span>

    <span>}</span>

    <span>private</span> <span>Pair</span> <span>findDifference</span><span>(</span><span>String</span> s<span>,</span> <span>int</span> left<span>,</span> <span>int</span> right<span>)</span> <span>{</span>
        <span>while</span><span>(</span>left <span>&lt;</span> right <span>&amp;&amp;</span> s<span>.</span><span>charAt</span><span>(</span>left<span>)</span> <span>==</span> s<span>.</span><span>charAt</span><span>(</span>right<span>)</span><span>)</span> <span>{</span>
            left<span>++</span><span>;</span>
            right<span>--</span><span>;</span>
        <span>}</span>
        <span>return</span> <span>new</span> <span>Pair</span><span>(</span>left<span>,</span> right<span>)</span><span>;</span>
    <span>}</span>

    <span>private</span> <span>boolean</span> <span>isPalindrome</span><span>(</span><span>String</span> s<span>,</span> <span>int</span> left<span>,</span> <span>int</span> right<span>)</span> <span>{</span>
        <span>Pair</span> pair <span>=</span> <span>findDifference</span><span>(</span>s<span>,</span> left<span>,</span> right<span>)</span><span>;</span>
        <span>return</span> pair<span>.</span>left <span>>=</span> pair<span>.</span>right<span>;</span>
    <span>}</span>

    <span>class</span> <span>Pair</span> <span>{</span>
        <span>int</span> left<span>,</span> right<span>;</span>
        <span>public</span> <span>Pair</span><span>(</span><span>int</span> left<span>,</span> <span>int</span> right<span>)</span> <span>{</span>
            <span>this</span><span>.</span>left <span>=</span> left<span>;</span>
            <span>this</span><span>.</span>right <span>=</span> right<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id="two-sum"> Two Sum</h2>
<blockquote>
<p>题号：<a href="https://www.lintcode.com/problem/56/" target="_blank" rel="noopener noreferrer">56</a><br>
描述：给一个整数数组，找到两个数使得他们的和等于一个给定的数 target。你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 0 到 n-1。<br>
挑战：</p>
<ul>
<li>O(n) 空间复杂度，O(nlogn)时间复杂度</li>
<li>O(n)空间复杂度，O(n)时间复杂度。</li>
</ul>
</blockquote>
<p><strong>相向双指针实现</strong></p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param numbers: An array of Integer
    @param target: target = numbers[index1] + numbers[index2]
    @return: [index1, index2] (index1 &lt; index2)
    """</span>
    <span>def</span> <span>twoSum</span><span>(</span>self<span>,</span> numbers<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span>if</span> <span>not</span> numbers<span>:</span>
            <span>return</span> <span>[</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>]</span>

        nums <span>=</span> <span>[</span>
            <span>(</span>number<span>,</span> index<span>)</span>
            <span>for</span> index<span>,</span> number <span>in</span> <span>enumerate</span><span>(</span>numbers<span>)</span>
        <span>]</span>

        nums<span>.</span>sort<span>(</span><span>)</span>

        left<span>,</span> right <span>=</span> <span>0</span><span>,</span> <span>len</span><span>(</span>nums<span>)</span> <span>-</span> <span>1</span>
        <span>while</span> left <span>&lt;</span> right<span>:</span>
            <span>if</span> nums<span>[</span>left<span>]</span><span>[</span><span>0</span><span>]</span> <span>+</span> nums<span>[</span>right<span>]</span><span>[</span><span>0</span><span>]</span> <span>></span> target<span>:</span>
                right <span>-=</span> <span>1</span>
            <span>elif</span> nums<span>[</span>left<span>]</span><span>[</span><span>0</span><span>]</span> <span>+</span> nums<span>[</span>right<span>]</span><span>[</span><span>0</span><span>]</span> <span>&lt;</span> target<span>:</span>
                left <span>+=</span> <span>1</span>
            <span>else</span><span>:</span>
                <span>return</span> <span>sorted</span><span>(</span><span>[</span>nums<span>[</span>left<span>]</span><span>[</span><span>1</span><span>]</span><span>,</span> nums<span>[</span>right<span>]</span><span>[</span><span>1</span><span>]</span><span>]</span><span>)</span>
        <span>return</span> <span>[</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1, index2] (index1 &lt; index2)
     */</span>

    <span>// 自定义类</span>
    <span>class</span> <span>Pair</span> <span>implements</span> <span>Comparable</span><span><span>&lt;</span><span>Pair</span><span>></span></span> <span>{</span>
        <span>int</span> number<span>,</span> index<span>;</span>

        <span>public</span> <span>Pair</span><span>(</span><span>int</span> number<span>,</span> <span>int</span> index<span>)</span> <span>{</span>
            <span>this</span><span>.</span>number <span>=</span> number<span>;</span>
            <span>this</span><span>.</span>index <span>=</span> index<span>;</span>
        <span>}</span>

        <span>// 实现比较方法</span>
        <span>public</span> <span>int</span> <span>compareTo</span><span>(</span><span>Pair</span> other<span>)</span> <span>{</span>
            <span>return</span> number <span>-</span> other<span>.</span>number<span>;</span>
        <span>}</span>
    <span>}</span>
    
    <span>public</span> <span>int</span><span>[</span><span>]</span> <span>twoSum</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>int</span><span>[</span><span>]</span> result <span>=</span> <span>{</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>}</span><span>;</span>
        <span>if</span> <span>(</span>numbers <span>==</span> <span>null</span><span>)</span> <span>{</span>
            <span>return</span> result<span>;</span>
        <span>}</span>

        <span>// 获取二元组并排序</span>
        <span>Pair</span><span>[</span><span>]</span> pairs <span>=</span> <span>getSortedPairs</span><span>(</span>numbers<span>)</span><span>;</span>

        <span>int</span> left <span>=</span> <span>0</span><span>,</span> right <span>=</span> pairs<span>.</span>length <span>-</span> <span>1</span><span>;</span>
        <span>while</span> <span>(</span>left <span>&lt;</span> right<span>)</span> <span>{</span>
            <span>if</span> <span>(</span>pairs<span>[</span>left<span>]</span><span>.</span>number <span>+</span> pairs<span>[</span>right<span>]</span><span>.</span>number <span>&lt;</span> target<span>)</span> <span>{</span>
                left<span>++</span><span>;</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>pairs<span>[</span>left<span>]</span><span>.</span>number <span>+</span> pairs<span>[</span>right<span>]</span><span>.</span>number <span>></span> target<span>)</span> <span>{</span>
                right<span>--</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>
                result<span>[</span><span>0</span><span>]</span> <span>=</span> <span>Math</span><span>.</span><span>min</span><span>(</span>pairs<span>[</span>left<span>]</span><span>.</span>index<span>,</span> pairs<span>[</span>right<span>]</span><span>.</span>index<span>)</span><span>;</span>
                result<span>[</span><span>1</span><span>]</span> <span>=</span> <span>Math</span><span>.</span><span>max</span><span>(</span>pairs<span>[</span>left<span>]</span><span>.</span>index<span>,</span> pairs<span>[</span>right<span>]</span><span>.</span>index<span>)</span><span>;</span>
                <span>return</span> result<span>;</span>
            <span>}</span>
        <span>}</span>

        <span>return</span> result<span>;</span>
    <span>}</span>

    <span>private</span> <span>Pair</span><span>[</span><span>]</span> <span>getSortedPairs</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>)</span> <span>{</span>
        <span>Pair</span><span>[</span><span>]</span> pairs <span>=</span> <span>new</span> <span>Pair</span><span>[</span>numbers<span>.</span>length<span>]</span><span>;</span>
        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> numbers<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            pairs<span>[</span>i<span>]</span> <span>=</span> <span>new</span> <span>Pair</span><span>(</span>numbers<span>[</span>i<span>]</span><span>,</span> i<span>)</span><span>;</span>
        <span>}</span>
        <span>Arrays</span><span>.</span><span>sort</span><span>(</span>pairs<span>)</span><span>;</span>
        <span>return</span> pairs<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><p><strong>hash表实现</strong></p>
<p>python</p>
<div><pre><code><span>class</span> <span>Solution</span><span>:</span>
    <span>"""
    @param numbers: An array of Integer
    @param target: target = numbers[index1] + numbers[index2]
    @return: [index1, index2] (index1 &lt; index2)
    """</span>
    <span>def</span> <span>twoSum</span><span>(</span>self<span>,</span> numbers<span>,</span> target<span>)</span><span>:</span>
        <span># write your code here</span>
        <span># hash 用于简历数值到下标的映射</span>
        <span>hash</span> <span>=</span> <span>{</span><span>}</span>
        <span>for</span> i <span>in</span> <span>range</span><span>(</span><span>len</span><span>(</span>numbers<span>)</span><span>)</span><span>:</span>
            <span>if</span> target <span>-</span> numbers<span>[</span>i<span>]</span> <span>in</span> <span>hash</span><span>:</span>
                <span>return</span> <span>[</span><span>hash</span><span>[</span>target <span>-</span> numbers<span>[</span>i<span>]</span><span>]</span><span>,</span> i<span>]</span>
            <span>hash</span><span>[</span>numbers<span>[</span>i<span>]</span><span>]</span> <span>=</span> i
        
        <span># 无解情况</span>
        <span>return</span> <span>[</span><span>-</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>java</p>
<div><pre><code><span>public</span> <span>class</span> <span>Solution</span> <span>{</span>
    <span>/**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1, index2] (index1 &lt; index2)
     */</span>
    <span>public</span> <span>int</span><span>[</span><span>]</span> <span>twoSum</span><span>(</span><span>int</span><span>[</span><span>]</span> numbers<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
        <span>// write your code here</span>
        <span>HashMap</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Integer</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

        <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> numbers<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>map<span>.</span><span>get</span><span>(</span>numbers<span>[</span>i<span>]</span><span>)</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
                <span>int</span><span>[</span><span>]</span> result <span>=</span> <span>{</span>map<span>.</span><span>get</span><span>(</span>numbers<span>[</span>i<span>]</span><span>)</span><span>,</span> i<span>}</span><span>;</span>
                <span>return</span> result<span>;</span>
            <span>}</span>
            map<span>.</span><span>put</span><span>(</span>target <span>-</span> numbers<span>[</span>i<span>]</span><span>,</span> i<span>)</span><span>;</span>
        <span>}</span>

        <span>int</span><span>[</span><span>]</span> result <span>=</span> <span>{</span><span>}</span><span>;</span>
        <span>return</span> result<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Markdown 增强</title>
      <link>https:/cloaks.cn/guide/markdown/</link>
      <guid isPermaLink="false">https:/cloaks.cn/guide/markdown/</guid>
      <source url="https:/cloaks.cn/rss.xml">Markdown 增强</source>
      <description>&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;vuepress-theme-hope&amp;lt;/code&amp;gt; 通过内置 &amp;lt;a href=&amp;quot;https://vuepress-theme-hope.github.io/md-enhance&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot;&amp;gt;md-enhance&amp;lt;/a&amp;gt;，在 Markdown 中启用了更多的语法与新功能。&amp;lt;/p&amp;gt;
</description>
      <content:encoded><![CDATA[<p><code>vuepress-theme-hope</code> 通过内置 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>

<h2 id="一键启用"> 一键启用</h2>
<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>mdEnhance</span><span>:</span> <span>{</span>
      <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="新增的更多语法"> 新增的更多语法</h2>
<h3 id="上下角标"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<details><summary>代码</summary>
<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="自定义对齐"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<details><summary>代码</summary>
<div><pre><code>::: center

我是居中的

:::

::: right

我在右对齐

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/align/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="脚注"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<details><summary>代码</summary>
<div><pre><code>此文字有脚注[^first].

<span><span>[</span><span>^first</span><span>]</span><span>:</span> 这是脚注内容</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="标记"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<details><summary>代码</summary>
<div><pre><code>你可以标记 ==重要的内容== 。
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="任务列表"> 任务列表</h3>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></li>
</ul>
<details><summary>Code</summary>
<div><pre><code><span>-</span> [x] 计划 1
<span>-</span> [ ] 计划 2
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tasklist/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="流程图"> 流程图</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>flow</span>
<span>cond=>condition: Process?
process=>operation: Process
e=>end: End

cond(yes)->process->e
cond(no)->e</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="mermaid"> Mermaid</h2>
<Mermaid id="mermaid-64a57060" data-code="graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A"></Mermaid><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>mermaid</span>
<span>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="tex-语法"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<details><summary>代码</summary>
<div><pre><code>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right\}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="代码案例"> 代码案例</h3>

          <div
            id="code-demo-5ac6bc9f"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-693e1878"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>

          <div
            id="code-demo-2c0b9cdb"
           
  data-type="vue"
 data-title="%E4%B8%80%E4%B8%AA%20Vue%20Demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [vue] 一个 Vue Demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope &lt;span>{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "十分帅" }),
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>

          <div
            id="code-demo-2869b0e2"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> 标题</span>

十分帅
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> 标题</span>

十分帅</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="幻灯片"> 幻灯片</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code>@slidestart

<span><span>##</span> 幻灯片 1</span>

一个有文字和 <span>[<span>链接</span>](<span>https://mrhope.site</span>)</span> 的段落

<span>---</span>

<span><span>##</span> 幻灯片 2</span>

<span>-</span> 列表 1
<span>-</span> 列表 2

<span>---</span>

<span><span>##</span> 幻灯片 3.1</span>

<span><span>```</span><span>js</span>
<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>
<span>```</span></span>

--

<span><span>##</span> 幻灯片 3.2</span>

$$
J(\theta_0,\theta_1) = \sum_{i=0}
$$

@slideend
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="其他语法"> 其他语法</h2>
<div><p>自定义标题</p>
<p>信息容器</p>
</div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https:/cloaks.cn/guide/page/</link>
      <guid isPermaLink="false">https:/cloaks.cn/guide/page/</guid>
      <source url="https:/cloaks.cn/rss.xml">页面配置</source>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="页面信息"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Not supported content</i></p>
</blockquote>
<h2 id="页面结构"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>中间件</title>
      <link>https:/cloaks.cn/blogs/middleware/</link>
      <guid isPermaLink="false">https:/cloaks.cn/blogs/middleware/</guid>
      <source url="https:/cloaks.cn/rss.xml">中间件</source>
      <description>&amp;lt;p&amp;gt;简要介绍常见中间件&amp;lt;/p&amp;gt;
</description>
      <category>微服务</category>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>简要介绍常见中间件</p>

<h2 id="redis"> Redis</h2>
<h2 id="zookeeper"> Zookeeper</h2>
<p><code>zookeeper</code> 是一个分布式服务框架，是 <code>Apache Hadoop</code> 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
<ul>
<li>
<p>结点类型：</p>
<ul>
<li>
<p>临时节点：临时节点的生命周期和客户端会话绑定在一起，客户端会话失效，则这个节点就会被自动清除。</p>
</li>
<li>
<p>永久节点：该数据节点被创建后，就会一直存在于 <code>zookeeper</code> 服务器上，直到有删除操作来主动删除这个节点。</p>
</li>
</ul>
</li>
</ul>
<h3 id="使用场景"> 使用场景</h3>
<p>配置中心：配置中心，顾名思义就是将配置数据写到 <code>ZK</code> 节点上，供各个分布式机器获取配置，同时监听自己对应的节点。实现配置信息的集中式管理和动态更新。</p>
<p>命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。被命名的实体通常可以是集群中的机器，提供的服务地址，远程对象等等，这些我们都可以统称他们为名字(<code>Name</code>)。通过调用 <code>ZK</code> 提供的创建节点的 <code>API</code>，能够很容易创建一个全局唯一的 <code>path</code>，这个 <code>path</code> 就可以作为一个名称。</p>
<p>分布式通知：<code>ZooKeeper</code> 的 <code>watcher</code> 注册与异步通知机制，能够很好的实现分布式环境下不同系统之间的通知与协调，实现对数据变更的实时处理。不同系统都对 <code>ZK</code> 上同一个 <code>znode</code> 进行注册，监听 <code>znode</code> 的变化（包括 <code>znode</code> 本身内容及子节点的)，其中一个系统 <code>update</code> 了 <code>znode</code>，那么另一个系统能够收到通知，并作出相应处理</p>
<p>选主：利用 <code>ZooKeeper</code> 的一致性，能够保证在分布式高并发情况下节点创建的全局唯一性，即：同时有多个客户端请求创建 <code>/currentMaster</code> 节点，最终一定只有一个客户端请求能够创建成功。利用这个特性，就能很轻易的在分布式环境中进行集群选取了。</p>
<p>分布式锁：分布式锁，这个主要得益于 <code>ZooKeeper</code> 的节点创建和事件监听机制。</p>
<h2 id="rabbit-mq"> Rabbit MQ</h2>
<p><code>Rabbit MQ</code> 是一个由 <code>erlang</code> 开发的 <code>AMQP（Advanced Message Queue）</code> 的开源实现</p>
<h3 id="模块介绍"> 模块介绍</h3>
<p><code>Broker</code>：可以简单理解为一台物理机器。</p>
<p><code>Producer</code>：消息生产者，就是投递消息的程序。</p>
<p><code>Consumer</code>：消息消费者，就是接受消息的程序。</p>
<p><code>Exchange</code>：消息交换机，它指定消息按什么规则，路由到哪个队列。
<code>fanout|direct|topic|headerQueue</code>：消息的载体，每个消息都会被投到一个或多个队列。</p>
<p><code>Binding</code>：绑定，它的作用就是把 <code>exchange</code> 和 <code>queue</code> 按照路由规则绑定起来。</p>
<p><code>Routing Key</code>：路由关键字，<code>exchange</code> 根据这个关键字进行消息投递。</p>
<p><code>vhost</code>：虚拟主机，一个 <code>broker</code> 里可以有多个 <code>vhost</code>，用作不同用户的权限分离。</p>
<h3 id="应用"> 应用</h3>
<p>消息传递、异步处理、应用解耦、流量削峰</p>
<h3 id="高可用"> 高可用</h3>
<p>发送方：<code>confirm</code> 机制（发送成功后有异步通知）</p>
<p>消费端：<code>ACK</code> 消息应答机制</p>
<p><code>rabbit</code>：<code>queue</code> 持久化，消息持久化（<code>deliveryMode = 2</code>）</p>
<h2 id="nginx"> Nginx</h2>
<p><code>Nginx</code> 是一款轻量级的 <code>Web</code> 服务器/反向代理服务器及电子邮件<code>（IMAP/POP3)</code>代理服务器，在 <code>BSD-like</code> 协议下发行。其特点是占有内存少，并发能力强，事实上 <code>nginx</code> 的并发能力在同类型的网页服务器中几乎成为公认的标杆，在百度、京东、新浪、网易、腾讯、淘宝等互联网公司中均有应用。</p>
<h3 id="动静分离"> 动静分离</h3>
<p>静态资源：由 <code>nginx</code> 作为 <code>web</code> 服务器身份，直接返回</p>
<p>动态资源：<code>nginx</code> 将请求转发出去，交给后端应用服务器处理</p>
<h3 id="负载均衡"> 负载均衡</h3>
<p>当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群提升并行处理能力。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。这时使用 <code>nginx</code> 实现了机器之间的负载均衡。</p>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https:/cloaks.cn/guide/</link>
      <guid isPermaLink="false">https:/cloaks.cn/guide/</guid>
      <source url="https:/cloaks.cn/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <content:encoded><![CDATA[<h1 id="主要功能与配置演示"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="./page.html">页面展示</a></p>
</li>
<li>
<p><a href="./markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="./disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="./encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>自定义布局</title>
      <link>https:/cloaks.cn/layout/</link>
      <guid isPermaLink="false">https:/cloaks.cn/layout/</guid>
      <source url="https:/cloaks.cn/rss.xml">自定义布局</source>
      <content:encoded><![CDATA[<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>
<div><p>注意</p>
<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>


</div>
<template #page-top><p>页面顶部内容</p>
</template><template #page-bottom><p>页面底部内容</p>
</template><template #content-top><p>内容顶部内容</p>
</template><template #content-bottom><p>内容底部内容</p>
</template><template #navbar-start><p>导航栏起始内容</p>
</template><template #navbar-center><p>导航栏中部内容</p>
</template><template #navbar-end><p>导航栏末尾内容</p>
</template><template #sidebar-top><p>侧边栏顶部内容</p>
</template><template #sidebar-center><p>侧边栏中部内容</p>
</template><template #sidebar-bottom><p>侧边栏底部内容</p>
</template><p>更多详情，详见 <a href="https://vuepress-theme-hope.github.io/zh/guide/layout/custom/" target="_blank" rel="noopener noreferrer">自定义布局</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>主页</title>
      <link>https:/cloaks.cn/project/</link>
      <guid isPermaLink="false">https:/cloaks.cn/project/</guid>
      <source url="https:/cloaks.cn/rss.xml">主页</source>
    </item>
    <item>
      <title>主页</title>
      <link>https:/cloaks.cn/project/redPacket/</link>
      <guid isPermaLink="false">https:/cloaks.cn/project/redPacket/</guid>
      <source url="https:/cloaks.cn/rss.xml">主页</source>
      <content:encoded><![CDATA[<h2 id="项目介绍"> 项目介绍</h2>
<p>关于项目介绍我有很多话想说</p>
]]></content:encoded>
    </item>
    <item>
      <title>博客主页</title>
      <link>https:/cloaks.cn/</link>
      <guid isPermaLink="false">https:/cloaks.cn/</guid>
      <source url="https:/cloaks.cn/rss.xml">博客主页</source>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https:/cloaks.cn/slides/</link>
      <guid isPermaLink="false">https:/cloaks.cn/slides/</guid>
      <source url="https:/cloaks.cn/rss.xml">幻灯片页</source>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https:/cloaks.cn/logo.svg" type="image/svg+xml"/>
    </item>
  </channel>
</rss>