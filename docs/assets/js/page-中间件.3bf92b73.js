(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{545:function(v,_,e){"use strict";e.r(_);var o=e(1),a=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[v._v("简要介绍常见中间件")]),v._v(" "),e("h2",{attrs:{id:"redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[v._v("#")]),v._v(" Redis")]),v._v(" "),e("h2",{attrs:{id:"zookeeper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[v._v("#")]),v._v(" Zookeeper")]),v._v(" "),e("p",[e("code",[v._v("zookeeper")]),v._v(" 是一个分布式服务框架，是 "),e("code",[v._v("Apache Hadoop")]),v._v(" 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("结点类型：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("临时节点：临时节点的生命周期和客户端会话绑定在一起，客户端会话失效，则这个节点就会被自动清除。")])]),v._v(" "),e("li",[e("p",[v._v("永久节点：该数据节点被创建后，就会一直存在于 "),e("code",[v._v("zookeeper")]),v._v(" 服务器上，直到有删除操作来主动删除这个节点。")])])])])]),v._v(" "),e("h3",{attrs:{id:"使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),e("p",[v._v("配置中心：配置中心，顾名思义就是将配置数据写到 "),e("code",[v._v("ZK")]),v._v(" 节点上，供各个分布式机器获取配置，同时监听自己对应的节点。实现配置信息的集中式管理和动态更新。")]),v._v(" "),e("p",[v._v("命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。被命名的实体通常可以是集群中的机器，提供的服务地址，远程对象等等，这些我们都可以统称他们为名字("),e("code",[v._v("Name")]),v._v(")。通过调用 "),e("code",[v._v("ZK")]),v._v(" 提供的创建节点的 "),e("code",[v._v("API")]),v._v("，能够很容易创建一个全局唯一的 "),e("code",[v._v("path")]),v._v("，这个 "),e("code",[v._v("path")]),v._v(" 就可以作为一个名称。")]),v._v(" "),e("p",[v._v("分布式通知："),e("code",[v._v("ZooKeeper")]),v._v(" 的 "),e("code",[v._v("watcher")]),v._v(" 注册与异步通知机制，能够很好的实现分布式环境下不同系统之间的通知与协调，实现对数据变更的实时处理。不同系统都对 "),e("code",[v._v("ZK")]),v._v(" 上同一个 "),e("code",[v._v("znode")]),v._v(" 进行注册，监听 "),e("code",[v._v("znode")]),v._v(" 的变化（包括 "),e("code",[v._v("znode")]),v._v(" 本身内容及子节点的)，其中一个系统 "),e("code",[v._v("update")]),v._v(" 了 "),e("code",[v._v("znode")]),v._v("，那么另一个系统能够收到通知，并作出相应处理")]),v._v(" "),e("p",[v._v("选主：利用 "),e("code",[v._v("ZooKeeper")]),v._v(" 的一致性，能够保证在分布式高并发情况下节点创建的全局唯一性，即：同时有多个客户端请求创建 "),e("code",[v._v("/currentMaster")]),v._v(" 节点，最终一定只有一个客户端请求能够创建成功。利用这个特性，就能很轻易的在分布式环境中进行集群选取了。")]),v._v(" "),e("p",[v._v("分布式锁：分布式锁，这个主要得益于 "),e("code",[v._v("ZooKeeper")]),v._v(" 的节点创建和事件监听机制。")]),v._v(" "),e("h2",{attrs:{id:"rabbit-mq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rabbit-mq"}},[v._v("#")]),v._v(" Rabbit MQ")]),v._v(" "),e("p",[e("code",[v._v("Rabbit MQ")]),v._v(" 是一个由 "),e("code",[v._v("erlang")]),v._v(" 开发的 "),e("code",[v._v("AMQP（Advanced Message Queue）")]),v._v(" 的开源实现")]),v._v(" "),e("h3",{attrs:{id:"模块介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块介绍"}},[v._v("#")]),v._v(" 模块介绍")]),v._v(" "),e("p",[e("code",[v._v("Broker")]),v._v("：可以简单理解为一台物理机器。")]),v._v(" "),e("p",[e("code",[v._v("Producer")]),v._v("：消息生产者，就是投递消息的程序。")]),v._v(" "),e("p",[e("code",[v._v("Consumer")]),v._v("：消息消费者，就是接受消息的程序。")]),v._v(" "),e("p",[e("code",[v._v("Exchange")]),v._v("：消息交换机，它指定消息按什么规则，路由到哪个队列。\n"),e("code",[v._v("fanout|direct|topic|headerQueue")]),v._v("：消息的载体，每个消息都会被投到一个或多个队列。")]),v._v(" "),e("p",[e("code",[v._v("Binding")]),v._v("：绑定，它的作用就是把 "),e("code",[v._v("exchange")]),v._v(" 和 "),e("code",[v._v("queue")]),v._v(" 按照路由规则绑定起来。")]),v._v(" "),e("p",[e("code",[v._v("Routing Key")]),v._v("：路由关键字，"),e("code",[v._v("exchange")]),v._v(" 根据这个关键字进行消息投递。")]),v._v(" "),e("p",[e("code",[v._v("vhost")]),v._v("：虚拟主机，一个 "),e("code",[v._v("broker")]),v._v(" 里可以有多个 "),e("code",[v._v("vhost")]),v._v("，用作不同用户的权限分离。")]),v._v(" "),e("h3",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[v._v("#")]),v._v(" 应用")]),v._v(" "),e("p",[v._v("消息传递、异步处理、应用解耦、流量削峰")]),v._v(" "),e("h3",{attrs:{id:"高可用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[v._v("#")]),v._v(" 高可用")]),v._v(" "),e("p",[v._v("发送方："),e("code",[v._v("confirm")]),v._v(" 机制（发送成功后有异步通知）")]),v._v(" "),e("p",[v._v("消费端："),e("code",[v._v("ACK")]),v._v(" 消息应答机制")]),v._v(" "),e("p",[e("code",[v._v("rabbit")]),v._v("："),e("code",[v._v("queue")]),v._v(" 持久化，消息持久化（"),e("code",[v._v("deliveryMode = 2")]),v._v("）")]),v._v(" "),e("h2",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[v._v("#")]),v._v(" Nginx")]),v._v(" "),e("p",[e("code",[v._v("Nginx")]),v._v(" 是一款轻量级的 "),e("code",[v._v("Web")]),v._v(" 服务器/反向代理服务器及电子邮件"),e("code",[v._v("（IMAP/POP3)")]),v._v("代理服务器，在 "),e("code",[v._v("BSD-like")]),v._v(" 协议下发行。其特点是占有内存少，并发能力强，事实上 "),e("code",[v._v("nginx")]),v._v(" 的并发能力在同类型的网页服务器中几乎成为公认的标杆，在百度、京东、新浪、网易、腾讯、淘宝等互联网公司中均有应用。")]),v._v(" "),e("h3",{attrs:{id:"动静分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[v._v("#")]),v._v(" 动静分离")]),v._v(" "),e("p",[v._v("静态资源：由 "),e("code",[v._v("nginx")]),v._v(" 作为 "),e("code",[v._v("web")]),v._v(" 服务器身份，直接返回")]),v._v(" "),e("p",[v._v("动态资源："),e("code",[v._v("nginx")]),v._v(" 将请求转发出去，交给后端应用服务器处理")]),v._v(" "),e("h3",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[v._v("#")]),v._v(" 负载均衡")]),v._v(" "),e("p",[v._v("当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群提升并行处理能力。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。这时使用 "),e("code",[v._v("nginx")]),v._v(" 实现了机器之间的负载均衡。")])])}),[],!1,null,null,null);_.default=a.exports}}]);