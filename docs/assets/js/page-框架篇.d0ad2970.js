(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{528:function(e,t,_){"use strict";_.r(t);var v=_(1),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"框架篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#框架篇"}},[e._v("#")]),e._v(" 框架篇")]),e._v(" "),_("h2",{attrs:{id:"spring-refresh-流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-refresh-流程"}},[e._v("#")]),e._v(" Spring refresh 流程")]),e._v(" "),_("h3",{attrs:{id:"要求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#要求"}},[e._v("#")]),e._v(" 要求")]),e._v(" "),_("ul",[_("li",[e._v("掌握 "),_("code",[e._v("refresh")]),e._v(" 的 12 个步骤")])]),e._v(" "),_("h3",{attrs:{id:"spring-refresh-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-refresh-概述"}},[e._v("#")]),e._v(" Spring refresh 概述")]),e._v(" "),_("p",[_("code",[e._v("refresh")]),e._v(" 是 "),_("code",[e._v("AbstractApplicationContext")]),e._v(" 中的一个方法，负责初始化 "),_("code",[e._v("ApplicationContext")]),e._v(" 容器，容器必须调用 "),_("code",[e._v("refresh")]),e._v(" 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 "),_("code",[e._v("refresh")]),e._v(" 的 12 个步骤：")]),e._v(" "),_("div",{staticClass:"language-yml line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-yml"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 准备环境")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("prepareRefresh")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 1 做好准备工作\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 准备 BeanFactory")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("obtainFreshBeanFactory")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 2 创建或获取 BeanFactory\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("prepareBeanFactory")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 3 准备 BeanFactory\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("postProcessBeanFactory")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 4 子类扩展 BeanFactory\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("invokeBeanFactoryPostProcessors")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 5 后处理器扩展 BeanFactory\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("registerBeanPostProcessors")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 6 准备 Bean 后处理器\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 准备 ApplicationContext")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("initMessageSource")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 7 为 ApplicationContext 提供国际化功能\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("initApplicationEventMulticaster")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 8 为 ApplicationContext 提供事件发布器\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("onRefresh")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 9 留给子类扩展\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("registerListeners")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 10 为 ApplicationContext 准备监听器\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("finishRefresh")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 12 准备生命周期管理器，发布ContextRefreshed 事件\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 初始化 BeanFactory 中非延迟单例 bean")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("finishBeanFactoryInitialization")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" 11 初始化单例 Bean，执行 Bean 后处理器扩展\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br"),_("span",{staticClass:"line-number"},[e._v("12")]),_("br"),_("span",{staticClass:"line-number"},[e._v("13")]),_("br"),_("span",{staticClass:"line-number"},[e._v("14")]),_("br"),_("span",{staticClass:"line-number"},[e._v("15")]),_("br"),_("span",{staticClass:"line-number"},[e._v("16")]),_("br")])]),_("h4",{attrs:{id:"_1-preparerefresh"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-preparerefresh"}},[e._v("#")]),e._v(" 1. prepareRefresh")]),e._v(" "),_("p",[e._v("这一步创建和准备了 "),_("code",[e._v("Environment")]),e._v(" 对象，它作为 "),_("code",[e._v("ApplicationContext")]),e._v(" 的一个成员变量")]),e._v(" "),_("p",[_("code",[e._v("Environment")]),e._v(" 对象的作用之一是为后续 "),_("code",[e._v("@Value")]),e._v(" 值注入时提供键值")]),e._v(" "),_("p",[_("code",[e._v("Environment")]),e._v(" 分成三个主要部分")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("systemProperties")]),e._v(" - 保存 "),_("code",[e._v("java")]),e._v(" 环境键值")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("systemEnvironment")]),e._v(" - 保存系统环境键值")])]),e._v(" "),_("li",[_("p",[e._v("自定义 "),_("code",[e._v("PropertySource")]),e._v(" - 保存自定义键值，例如来自于 "),_("code",[e._v("*.properties")]),e._v(" 文件的键值")])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081057917.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_2-obtainfreshbeanfactory"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-obtainfreshbeanfactory"}},[e._v("#")]),e._v(" 2. obtainFreshBeanFactory")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("这一步获取（或创建） "),_("code",[e._v("BeanFactory")]),e._v(" 也是作为 "),_("code",[e._v("ApplicationContext")]),e._v(" 的一个成员变量")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("BeanFactory")]),e._v(" 的作用是负责 "),_("code",[e._v("bean")]),e._v(" 的创建、依赖注入和初始化，"),_("code",[e._v("bean")]),e._v(" 的各项特征由 "),_("code",[e._v("BeanDefinition")]),e._v(" 定义")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("BeanDefinition")]),e._v(" 作为 "),_("code",[e._v("bean")]),e._v(" 的设计蓝图，规定了 "),_("code",[e._v("bean")]),e._v(" 的特征，如单例多例、依赖关系、初始销毁方法等")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("BeanDefinition")]),e._v(" 的来源有多种多样，可以是通过 "),_("code",[e._v("xml")]),e._v(" 获得、配置类获得、组件扫描获得，也可以是编程添加")])])])]),e._v(" "),_("li",[_("p",[e._v("所有的 "),_("code",[e._v("BeanDefinition")]),e._v(" 会存入 "),_("code",[e._v("BeanFactory")]),e._v(" 中的 "),_("code",[e._v("beanDefinitionMap")]),e._v(" 集合")])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081057632.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_3-preparebeanfactory"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-preparebeanfactory"}},[e._v("#")]),e._v(" 3. prepareBeanFactory")]),e._v(" "),_("ul",[_("li",[e._v("这一步会进一步完善 "),_("code",[e._v("BeanFactory")]),e._v("，为它的各项成员变量赋值")]),e._v(" "),_("li",[_("code",[e._v("beanExpressionResolver")]),e._v(" 用来解析 "),_("code",[e._v("SpEL")]),e._v("，常见实现为 "),_("code",[e._v("StandardBeanExpressionResolver")])]),e._v(" "),_("li",[_("code",[e._v("propertyEditorRegistrars")]),e._v(" 会注册类型转换器\n"),_("ul",[_("li",[e._v("它在这里使用了 "),_("code",[e._v("ResourceEditorRegistrar")]),e._v(" 实现类")]),e._v(" "),_("li",[e._v("并应用 "),_("code",[e._v("ApplicationContext")]),e._v(" 提供的 "),_("code",[e._v("Environment")]),e._v(" 完成 "),_("code",[e._v("${ }")]),e._v(" 解析")])])]),e._v(" "),_("li",[_("code",[e._v("registerResolvableDependency")]),e._v(" 来注册 "),_("code",[e._v("beanFactory")]),e._v(" 以及 "),_("code",[e._v("ApplicationContext")]),e._v("，让它们也能用于依赖注入")]),e._v(" "),_("li",[_("code",[e._v("beanPostProcessors")]),e._v(" 是 "),_("code",[e._v("bean")]),e._v(" 后处理器集合，会工作在 "),_("code",[e._v("bean")]),e._v(" 的生命周期各个阶段，此处会添加两个：\n"),_("ul",[_("li",[_("code",[e._v("ApplicationContextAwareProcessor")]),e._v(" 用来解析 "),_("code",[e._v("Aware")]),e._v(" 接口")]),e._v(" "),_("li",[_("code",[e._v("ApplicationListenerDetector")]),e._v(" 用来识别容器中 "),_("code",[e._v("ApplicationListener")]),e._v(" 类型的 "),_("code",[e._v("bean")])])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081057394.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_4-postprocessbeanfactory"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-postprocessbeanfactory"}},[e._v("#")]),e._v(" 4. postProcessBeanFactory")]),e._v(" "),_("ul",[_("li",[e._v("这一步是空实现，留给子类扩展。\n"),_("ul",[_("li",[e._v("一般 "),_("code",[e._v("Web")]),e._v(" 环境的 "),_("code",[e._v("ApplicationContext")]),e._v(" 都要利用它注册新的 "),_("code",[e._v("Scope")]),e._v("，完善 "),_("code",[e._v("Web")]),e._v(" 下的 "),_("code",[e._v("BeanFactory")])])])]),e._v(" "),_("li",[e._v("这里体现的是模板方法设计模式")])]),e._v(" "),_("h4",{attrs:{id:"_5-invokebeanfactorypostprocessors"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-invokebeanfactorypostprocessors"}},[e._v("#")]),e._v(" 5. invokeBeanFactoryPostProcessors")]),e._v(" "),_("ul",[_("li",[e._v("这一步会调用 "),_("code",[e._v("beanFactory")]),e._v(" 后处理器")]),e._v(" "),_("li",[_("code",[e._v("beanFactory")]),e._v(" 后处理器，充当 "),_("code",[e._v("beanFactory")]),e._v(" 的扩展点，可以用来补充或修改 "),_("code",[e._v("BeanDefinition")])]),e._v(" "),_("li",[e._v("常见的 "),_("code",[e._v("beanFactory")]),e._v(" 后处理器有\n"),_("ul",[_("li",[_("code",[e._v("ConfigurationClassPostProcessor")]),e._v(" – 解析 "),_("code",[e._v("@Configuration、@Bean、@Import、@PropertySource")]),e._v(" 等")]),e._v(" "),_("li",[_("code",[e._v("PropertySourcesPlaceHolderConfigurer")]),e._v(" – 替换 "),_("code",[e._v("BeanDefinition")]),e._v(" 中的 "),_("code",[e._v("${ }")])]),e._v(" "),_("li",[_("code",[e._v("MapperScannerConfigurer")]),e._v(" – 补充 "),_("code",[e._v("Mapper")]),e._v(" 接口对应的 "),_("code",[e._v("BeanDefinition")])])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081058642.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_6-registerbeanpostprocessors"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-registerbeanpostprocessors"}},[e._v("#")]),e._v(" 6. registerBeanPostProcessors")]),e._v(" "),_("ul",[_("li",[e._v("这一步是继续从 "),_("code",[e._v("beanFactory")]),e._v(" 中找出 "),_("code",[e._v("bean")]),e._v(" 后处理器，添加至 "),_("code",[e._v("beanPostProcessors")]),e._v(" 集合中")]),e._v(" "),_("li",[_("code",[e._v("bean")]),e._v(" 后处理器，充当 "),_("code",[e._v("bean")]),e._v(" 的扩展点，可以工作在 "),_("code",[e._v("bean")]),e._v(" 的实例化、依赖注入、初始化阶段，常见的有：\n"),_("ul",[_("li",[_("code",[e._v("AutowiredAnnotationBeanPostProcessor")]),e._v(" 功能有：解析 "),_("code",[e._v("@Autowired，@Value")]),e._v(" 注解")]),e._v(" "),_("li",[_("code",[e._v("CommonAnnotationBeanPostProcessor")]),e._v(" 功能有：解析 "),_("code",[e._v("@Resource，@PostConstruct，@PreDestroy")])]),e._v(" "),_("li",[_("code",[e._v("AnnotationAwareAspectJAutoProxyCreator")]),e._v(" 功能有：为符合切点的目标 "),_("code",[e._v("bean")]),e._v(" 自动创建代理")])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081058548.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_7-initmessagesource"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-initmessagesource"}},[e._v("#")]),e._v(" 7. initMessageSource")]),e._v(" "),_("ul",[_("li",[e._v("这一步是为 "),_("code",[e._v("ApplicationContext")]),e._v(" 添加 "),_("code",[e._v("messageSource")]),e._v(" 成员，实现国际化功能")]),e._v(" "),_("li",[e._v("去 "),_("code",[e._v("beanFactory")]),e._v(" 内找名为 "),_("code",[e._v("messageSource")]),e._v(" 的 "),_("code",[e._v("bean")]),e._v("，如果没有，则提供空的 "),_("code",[e._v("MessageSource")]),e._v(" 实现")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081058233.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_8-initapplicationcontexteventmulticaster"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-initapplicationcontexteventmulticaster"}},[e._v("#")]),e._v(" 8. initApplicationContextEventMulticaster")]),e._v(" "),_("ul",[_("li",[e._v("这一步为 "),_("code",[e._v("ApplicationContext")]),e._v(" 添加事件广播器成员，即 "),_("code",[e._v("applicationContextEventMulticaster")])]),e._v(" "),_("li",[e._v("它的作用是发布事件给监听器")]),e._v(" "),_("li",[e._v("去 "),_("code",[e._v("beanFactory")]),e._v(" 找名为 "),_("code",[e._v("applicationEventMulticaster")]),e._v(" 的 "),_("code",[e._v("bean")]),e._v(" 作为事件广播器，若没有，会创建默认的事件广播器")]),e._v(" "),_("li",[e._v("之后就可以调用 "),_("code",[e._v("ApplicationContext.publishEvent")]),e._v("(事件对象) 来发布事件")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081058783.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_9-onrefresh"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-onrefresh"}},[e._v("#")]),e._v(" 9. onRefresh")]),e._v(" "),_("ul",[_("li",[e._v("这一步是空实现，留给子类扩展\n"),_("ul",[_("li",[_("code",[e._v("SpringBoot")]),e._v(" 中的子类在这里准备了 "),_("code",[e._v("WebServer")]),e._v("，即内嵌 "),_("code",[e._v("web")]),e._v(" 容器")])])]),e._v(" "),_("li",[e._v("体现的是模板方法设计模式")])]),e._v(" "),_("h4",{attrs:{id:"_10-registerlisteners"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-registerlisteners"}},[e._v("#")]),e._v(" 10. registerListeners")]),e._v(" "),_("ul",[_("li",[e._v("这一步会从多种途径找到事件监听器，并添加至 "),_("code",[e._v("applicationEventMulticaster")])]),e._v(" "),_("li",[e._v("事件监听器顾名思义，用来接收事件广播器发布的事件，有如下来源\n"),_("ul",[_("li",[e._v("事先编程添加的")]),e._v(" "),_("li",[e._v("来自容器中的 "),_("code",[e._v("bean")])]),e._v(" "),_("li",[e._v("来自于 "),_("code",[e._v("@EventListener")]),e._v(" 的解析")])])]),e._v(" "),_("li",[e._v("要实现事件监听器，只需要实现 "),_("code",[e._v("ApplicationListener")]),e._v(" 接口，重写其中 "),_("code",[e._v("onApplicationEvent(E e)")]),e._v(" 方法即可")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081059510.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_11-finishbeanfactoryinitialization"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-finishbeanfactoryinitialization"}},[e._v("#")]),e._v(" 11. finishBeanFactoryInitialization")]),e._v(" "),_("ul",[_("li",[e._v("这一步会将 "),_("code",[e._v("beanFactory")]),e._v(" 的成员补充完毕，并初始化所有非延迟单例 "),_("code",[e._v("bean")])]),e._v(" "),_("li",[_("code",[e._v("conversionService")]),e._v(" 也是一套转换机制，作为对 "),_("code",[e._v("PropertyEditor")]),e._v(" 的补充")]),e._v(" "),_("li",[_("code",[e._v("embeddedValueResolvers")]),e._v(" 即内嵌值解析器，用来解析 "),_("code",[e._v("@Value")]),e._v(" 中的 "),_("code",[e._v("${ }")]),e._v("，借用的是 "),_("code",[e._v("Environment")]),e._v(" 的功能")]),e._v(" "),_("li",[_("code",[e._v("singletonObjects")]),e._v(" 即单例池，缓存所有单例对象\n"),_("ul",[_("li",[e._v("对象的创建都分三个阶段，每一阶段都有不同的 "),_("code",[e._v("bean")]),e._v(" 后处理器参与进来，扩展功能")])])])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081059692.png",alt:""}})]),e._v(" "),_("h4",{attrs:{id:"_12-finishrefresh"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-finishrefresh"}},[e._v("#")]),e._v(" 12. finishRefresh")]),e._v(" "),_("ul",[_("li",[e._v("这一步会为 "),_("code",[e._v("ApplicationContext")]),e._v(" 添加 "),_("code",[e._v("lifecycleProcessor")]),e._v(" 成员，用来控制容器内需要生命周期管理的 "),_("code",[e._v("bean")])]),e._v(" "),_("li",[e._v("如果容器中有名称为 "),_("code",[e._v("lifecycleProcessor")]),e._v(" 的 "),_("code",[e._v("bean")]),e._v(" 就用它，否则创建默认的生命周期管理器")]),e._v(" "),_("li",[e._v("准备好生命周期管理器，就可以实现\n"),_("ul",[_("li",[e._v("调用 "),_("code",[e._v("context")]),e._v(" 的 "),_("code",[e._v("start")]),e._v("，即可触发所有实现 "),_("code",[e._v("LifeCycle")]),e._v(" 接口 "),_("code",[e._v("bean")]),e._v(" 的 "),_("code",[e._v("start")])]),e._v(" "),_("li",[e._v("调用 "),_("code",[e._v("context")]),e._v(" 的 "),_("code",[e._v("stop")]),e._v("，即可触发所有实现 "),_("code",[e._v("LifeCycle")]),e._v(" 接口 "),_("code",[e._v("bean")]),e._v(" 的 "),_("code",[e._v("stop")])])])]),e._v(" "),_("li",[e._v("发布 "),_("code",[e._v("ContextRefreshed")]),e._v(" 事件，整个 "),_("code",[e._v("refresh")]),e._v(" 执行完成")])]),e._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/biliit/pic-go/raw/master/202201081059816.png",alt:""}})]),e._v(" "),_("h2",{attrs:{id:"spring-bean-生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-生命周期"}},[e._v("#")]),e._v(" Spring bean 生命周期")]),e._v(" "),_("h3",{attrs:{id:"要求-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#要求-2"}},[e._v("#")]),e._v(" 要求")]),e._v(" "),_("ul",[_("li",[e._v("掌握 "),_("code",[e._v("Spring bean")]),e._v(" 的生命周期")])]),e._v(" "),_("h3",{attrs:{id:"bean-生命周期-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bean-生命周期-概述"}},[e._v("#")]),e._v(" bean 生命周期 概述")]),e._v(" "),_("p",[_("code",[e._v("bean")]),e._v(" 的生命周期从调用 "),_("code",[e._v("beanFactory")]),e._v(" 的 "),_("code",[e._v("getBean")]),e._v(" 开始，到这个 "),_("code",[e._v("bean")]),e._v(" 被销毁，可以总结为以下七个阶段：")]),e._v(" "),_("div",{staticClass:"language-text line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("1. 处理名称，检查缓存\n\n2. 处理父子容器\n\n3. 处理 `dependsOn`\n\n4. 选择 `scope` 策略\n\n5. 创建 `bean`\n\n6. 类型转换处理\n\n7. 销毁 `bean`\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br"),_("span",{staticClass:"line-number"},[e._v("12")]),_("br"),_("span",{staticClass:"line-number"},[e._v("13")]),_("br")])]),_("blockquote",[_("p",[_("em",[_("strong",[e._v("注意")])])]),e._v(" "),_("ul",[_("li",[e._v("划分的阶段和名称并不重要，重要的是理解整个过程中做了哪些事情")])])]),e._v(" "),_("h4",{attrs:{id:"_1-处理名称-检查缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-处理名称-检查缓存"}},[e._v("#")]),e._v(" 1. 处理名称，检查缓存")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("这一步会处理别名，将别名解析为实际名称")])]),e._v(" "),_("li",[_("p",[e._v("对 "),_("code",[e._v("FactoryBean")]),e._v(" 也会特殊处理，如果以 "),_("code",[e._v("&")]),e._v(" 开头表示要获取 "),_("code",[e._v("FactoryBean")]),e._v(" 本身，否则表示要获取其产品")])]),e._v(" "),_("li",[_("p",[e._v("这里针对单例对象会检查一级、二级、三级缓存")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("singletonFactories")]),e._v(" 三级缓存，存放单例工厂对象")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("earlySingletonObjects")]),e._v(" 二级缓存，存放单例工厂的产品对象")]),e._v(" "),_("ul",[_("li",[e._v("如果发生循环依赖，产品是代理；无循环依赖，产品是原始对象")])])]),e._v(" "),_("li",[_("p",[_("code",[e._v("singletonObjects")]),e._v(" 一级缓存，存放单例成品对象")])])])])]),e._v(" "),_("h4",{attrs:{id:"_2-处理父子容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-处理父子容器"}},[e._v("#")]),e._v(" 2. 处理父子容器")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("如果当前容器根据名字找不到这个 "),_("code",[e._v("bean")]),e._v("，此时若父容器存在，则执行父容器的 "),_("code",[e._v("getBean")]),e._v(" 流程")])]),e._v(" "),_("li",[_("p",[e._v("父子容器的 "),_("code",[e._v("bean")]),e._v(" 名称可以重复")])])]),e._v(" "),_("h4",{attrs:{id:"_3-处理-dependson"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-处理-dependson"}},[e._v("#")]),e._v(" 3. 处理 dependsOn")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("如果当前 "),_("code",[e._v("bean")]),e._v(" 有通过 "),_("code",[e._v("dependsOn")]),e._v(" 指定了非显式依赖的 "),_("code",[e._v("bean")]),e._v("，这一步会提前创建这些 "),_("code",[e._v("dependsOn")]),e._v(" 的 "),_("code",[e._v("bean")])])]),e._v(" "),_("li",[_("p",[e._v("所谓非显式依赖，就是指两个 "),_("code",[e._v("bean")]),e._v(" 之间不存在直接依赖关系，但需要控制它们的创建先后顺序")])])]),e._v(" "),_("h4",{attrs:{id:"_4-选择-scope-策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-选择-scope-策略"}},[e._v("#")]),e._v(" 4. 选择 scope 策略")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("对于 "),_("code",[e._v("singleton scope")]),e._v("，首先到单例池去获取 "),_("code",[e._v("bean")]),e._v("，如果有则直接返回，没有再进入创建流程")])]),e._v(" "),_("li",[_("p",[e._v("对于 "),_("code",[e._v("prototype scope")]),e._v("，每次都会进入创建流程")])]),e._v(" "),_("li",[_("p",[e._v("对于自定义 "),_("code",[e._v("scope")]),e._v("，例如 "),_("code",[e._v("request")]),e._v("，首先到 "),_("code",[e._v("request")]),e._v(" 域获取 "),_("code",[e._v("bean")]),e._v("，如果有则直接返回，没有再进入创建流程")])])]),e._v(" "),_("h4",{attrs:{id:"_5-1-创建-bean-创建-bean-实例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-创建-bean-创建-bean-实例"}},[e._v("#")]),e._v(" 5.1 创建 bean - 创建 bean 实例")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[e._v("要点")])]),e._v(" "),_("th",[_("strong",[e._v("总结")])])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("有自定义 "),_("code",[e._v("TargetSource")]),e._v(" 的情况")]),e._v(" "),_("td",[e._v("由 "),_("code",[e._v("AnnotationAwareAspectJAutoProxyCreator")]),e._v(" 创建代理返回")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("Supplier")]),e._v(" 方式创建 "),_("code",[e._v("bean")]),e._v(" 实例")]),e._v(" "),_("td",[e._v("为 "),_("code",[e._v("Spring 5.0")]),e._v(" 新增功能，方便编程方式创建  "),_("code",[e._v("bean")]),e._v("  实例")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("FactoryMethod")]),e._v(" 方式  创建 "),_("code",[e._v("bean")]),e._v("  实例")]),e._v(" "),_("td",[e._v("① 分成静态工厂与实例工厂；② 工厂方法若有参数，需要对工厂方法参数进行解析，利用 "),_("code",[e._v("resolveDependency")]),e._v("；③ 如果有多个工厂方法候选者，还要进一步按权重筛选")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("AutowiredAnnotationBeanPostProcessor")])]),e._v(" "),_("td",[e._v("① 优先选择带  "),_("code",[e._v("@Autowired")]),e._v("  注解的构造；② 若有唯一的带参构造，也会入选")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("mbd.getPreferredConstructors")])]),e._v(" "),_("td",[e._v("选择所有公共构造，这些构造之间按权重筛选")])]),e._v(" "),_("tr",[_("td",[e._v("采用默认构造")]),e._v(" "),_("td",[e._v("如果上面的后处理器和 "),_("code",[e._v("BeanDefiniation")]),e._v(" 都没找到构造，采用默认构造，即使是私有的")])])])]),e._v(" "),_("h4",{attrs:{id:"_5-2-创建-bean-依赖注入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-创建-bean-依赖注入"}},[e._v("#")]),e._v(" 5.2 创建 bean - 依赖注入")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[e._v("要点")])]),e._v(" "),_("th",[_("strong",[e._v("总结")])])])]),e._v(" "),_("tbody",[_("tr",[_("td",[_("code",[e._v("AutowiredAnnotationBeanPostProcessor")])]),e._v(" "),_("td",[e._v("识别 "),_("code",[e._v("@Autowired")]),e._v(" 及 "),_("code",[e._v("@Value")]),e._v(" 标注的成员，封装为 "),_("code",[e._v("InjectionMetadata")]),e._v(" 进行依赖注入")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("CommonAnnotationBeanPostProcessor")])]),e._v(" "),_("td",[e._v("识别 "),_("code",[e._v("@Resource")]),e._v(" 标注的成员，封装为 "),_("code",[e._v("InjectionMetadata")]),e._v(" 进行依赖注入")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("resolveDependency")])]),e._v(" "),_("td",[e._v("用来查找要装配的值，可以识别：① "),_("code",[e._v("Optional")]),e._v("；② "),_("code",[e._v("ObjectFactory")]),e._v(" 及 "),_("code",[e._v("ObjectProvider")]),e._v("；③ "),_("code",[e._v("@Lazy")]),e._v("  注解；④ "),_("code",[e._v("@Value")]),e._v(" 注解（"),_("code",[e._v("${ }")]),e._v(", "),_("code",[e._v("#{ }")]),e._v(", 类型转换）；⑤ 集合类型（"),_("code",[e._v("Collection")]),e._v("，"),_("code",[e._v("Map")]),e._v("，数组等）；⑥ 泛型和  "),_("code",[e._v("@Qualifier")]),e._v("（用来区分类型歧义）；⑦ "),_("code",[e._v("primary")]),e._v("  及名字匹配（用来区分类型歧义）")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("AUTOWIRE_BY_NAME")])]),e._v(" "),_("td",[e._v("根据成员名字找 "),_("code",[e._v("bean")]),e._v(" 对象，修改 "),_("code",[e._v("mbd")]),e._v(" 的 "),_("code",[e._v("propertyValues")]),e._v("，不会考虑简单类型的成员")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("AUTOWIRE_BY_TYPE")])]),e._v(" "),_("td",[e._v("根据成员类型执行 "),_("code",[e._v("resolveDependency")]),e._v(" 找到依赖注入的值，修改  "),_("code",[e._v("mbd")]),e._v(" 的 "),_("code",[e._v("propertyValues")])])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("applyPropertyValues")])]),e._v(" "),_("td",[e._v("根据 "),_("code",[e._v("mbd")]),e._v(" 的 "),_("code",[e._v("propertyValues")]),e._v(" 进行依赖注入（即 "),_("code",[e._v("xml")]),e._v(" 中 "),_("code",[e._v("<property name ref|value/>")]),e._v("）")])])])]),e._v(" "),_("h4",{attrs:{id:"_5-3-创建-bean-初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-创建-bean-初始化"}},[e._v("#")]),e._v(" 5.3 创建 bean - 初始化")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[e._v("要点")])]),e._v(" "),_("th",[_("strong",[e._v("总结")])])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("内置 "),_("code",[e._v("Aware")]),e._v(" 接口的装配")]),e._v(" "),_("td",[e._v("包括 "),_("code",[e._v("BeanNameAware")]),e._v("，"),_("code",[e._v("BeanFactoryAware")]),e._v(" 等")])]),e._v(" "),_("tr",[_("td",[e._v("扩展 "),_("code",[e._v("Aware")]),e._v(" 接口的装配")]),e._v(" "),_("td",[e._v("由 "),_("code",[e._v("ApplicationContextAwareProcessor")]),e._v(" 解析，执行时机在  "),_("code",[e._v("postProcessBeforeInitialization")])])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("@PostConstruct")])]),e._v(" "),_("td",[e._v("由 "),_("code",[e._v("CommonAnnotationBeanPostProcessor")]),e._v(" 解析，执行时机在  "),_("code",[e._v("postProcessBeforeInitialization")])])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("InitializingBean")])]),e._v(" "),_("td",[e._v("通过接口回调执行初始化")])]),e._v(" "),_("tr",[_("td",[_("code",[e._v("initMethod")])]),e._v(" "),_("td",[e._v("根据 "),_("code",[e._v("BeanDefinition")]),e._v(" 得到的初始化方法执行初始化，即 "),_("code",[e._v("<bean init-method>")]),e._v(" 或 "),_("code",[e._v("@Bean")]),e._v("("),_("code",[e._v("initMethod")]),e._v(")")])]),e._v(" "),_("tr",[_("td",[e._v("创建 "),_("code",[e._v("aop")]),e._v(" 代理")]),e._v(" "),_("td",[e._v("由 "),_("code",[e._v("AnnotationAwareAspectJAutoProxyCreator")]),e._v(" 创建，执行时机在  "),_("code",[e._v("postProcessAfterInitialization")])])])])]),e._v(" "),_("h4",{attrs:{id:"_5-4-创建-bean-注册可销毁-bean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-创建-bean-注册可销毁-bean"}},[e._v("#")]),e._v(" 5.4 创建 bean - 注册可销毁 bean")]),e._v(" "),_("p",[e._v("在这一步判断并登记可销毁 "),_("code",[e._v("bean")])]),e._v(" "),_("ul",[_("li",[_("p",[e._v("判断依据")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("如果实现了 "),_("code",[e._v("DisposableBean")]),e._v(" 或 "),_("code",[e._v("AutoCloseable")]),e._v(" 接口，则为可销毁 "),_("code",[e._v("bean")])])]),e._v(" "),_("li",[_("p",[e._v("如果自定义了 "),_("code",[e._v("destroyMethod")]),e._v("，则为可销毁 "),_("code",[e._v("bean")])])]),e._v(" "),_("li",[_("p",[e._v("如果采用 "),_("code",[e._v("@Bean")]),e._v(" 没有指定 "),_("code",[e._v("destroyMethod")]),e._v("，则采用自动推断方式获取销毁方法名（"),_("code",[e._v("close，shutdown")]),e._v("）")])]),e._v(" "),_("li",[_("p",[e._v("如果有 "),_("code",[e._v("@PreDestroy")]),e._v(" 标注的方法")])])])]),e._v(" "),_("li",[_("p",[e._v("存储位置")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("singleton scope")]),e._v(" 的可销毁 "),_("code",[e._v("bean")]),e._v(" 会存储于 "),_("code",[e._v("beanFactory")]),e._v(" 的成员当中")])]),e._v(" "),_("li",[_("p",[e._v("自定义 "),_("code",[e._v("scope")]),e._v(" 的可销毁 "),_("code",[e._v("bean")]),e._v(" 会存储于对应的域对象当中")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("prototype scope")]),e._v(" 不会存储，需要自己找到此对象销毁")])])])]),e._v(" "),_("li",[_("p",[e._v("存储时都会封装为 "),_("code",[e._v("DisposableBeanAdapter")]),e._v(" 类型对销毁方法的调用进行适配")])])]),e._v(" "),_("h4",{attrs:{id:"_6-类型转换处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-类型转换处理"}},[e._v("#")]),e._v(" 6. 类型转换处理")]),e._v(" "),_("ul",[_("li",[e._v("如果 "),_("code",[e._v("getBean")]),e._v(" 的 "),_("code",[e._v("requiredType")]),e._v(" 参数与实际得到的对象类型不同，会尝试进行类型转换")])]),e._v(" "),_("h4",{attrs:{id:"_7-销毁-bean"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-销毁-bean"}},[e._v("#")]),e._v(" 7. 销毁 bean")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("销毁时机")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("singleton bean")]),e._v(" 的销毁在 "),_("code",[e._v("ApplicationContext.close")]),e._v(" 时，此时会找到所有 "),_("code",[e._v("DisposableBean")]),e._v(" 的名字，逐一销毁")])]),e._v(" "),_("li",[_("p",[e._v("自定义 "),_("code",[e._v("scope bean")]),e._v(" 的销毁在作用域对象生命周期结束时")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("prototype bean")]),e._v(" 的销毁可以通过自己手动调用 "),_("code",[e._v("AutowireCapableBeanFactory.destroyBean")]),e._v(" 方法执行销毁")])])])]),e._v(" "),_("li",[_("p",[e._v("同一 "),_("code",[e._v("bean")]),e._v(" 中不同形式销毁方法的调用次序")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("优先后处理器销毁，即 "),_("code",[e._v("@PreDestroy")])])]),e._v(" "),_("li",[_("p",[e._v("其次 "),_("code",[e._v("DisposableBean")]),e._v(" 接口销毁")])]),e._v(" "),_("li",[_("p",[e._v("最后 "),_("code",[e._v("destroyMethod")]),e._v(" 销毁（包括自定义名称，推断名称，"),_("code",[e._v("AutoCloseable")]),e._v(" 接口 多选一）")])])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);